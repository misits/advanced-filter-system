{"version":3,"file":"afs.modern.js","sources":["../src/core/Logger.js","../src/core/Options.js","../src/core/State.js","../src/styles/StyleManager.js","../src/core/EventEmitter.js","../src/styles/Animation.js","../src/features/Filter.js","../src/utils/index.js","../src/features/InputRangeFilter.js","../src/features/Search.js","../src/features/Sort.js","../src/features/Pagination.js","../src/features/URLManager.js","../src/features/RangeFilter.js","../src/features/DateFilter.js","../src/AFS.js"],"sourcesContent":["/**\n * @fileoverview Logging system for AFS\n */\n\nexport class Logger {\n  /**\n   * @param {boolean} [debug=false] - Enable debug mode\n   * @param {string} [logLevel='info'] - Logging level\n   */\n  constructor(debug = false, logLevel = 'info') {\n    this.enabled = debug;\n    this.level = logLevel;\n    this.levels = {\n      error: 0,\n      warn: 1,\n      info: 2,\n      debug: 3\n    };\n  }\n\n  /**\n   * Internal log method\n   * @private\n   */\n  _log(level, ...args) {\n    if (!this.enabled) return;\n\n    const currentLevelValue = this.levels[this.level];\n    const messageLevel = this.levels[level];\n\n    if (messageLevel <= currentLevelValue) {\n      const timestamp = new Date().toISOString();\n      const prefix = `[AFS ${level.toUpperCase()}] ${timestamp}`;\n\n      switch (level) {\n        case 'error':\n          console.error(prefix, ...args);\n          break;\n        case 'warn':\n          console.warn(prefix, ...args);\n          break;\n        case 'info':\n          console.info(prefix, ...args);\n          break;\n        case 'debug':\n          console.debug(prefix, ...args);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Log error message\n   * @public\n   */\n  error(...args) {\n    this._log('error', ...args);\n  }\n\n  /**\n   * Log warning message\n   * @public\n   */\n  warn(...args) {\n    this._log('warn', ...args);\n  }\n\n  /**\n   * Log info message\n   * @public\n   */\n  info(...args) {\n    this._log('info', ...args);\n  }\n\n  /**\n   * Log debug message\n   * @public\n   */\n  debug(...args) {\n    this._log('debug', ...args);\n  }\n\n  /**\n   * Enable or disable debug mode\n   * @public\n   */\n  setDebugMode(enabled, level = 'info') {\n    this.enabled = enabled;\n    if (this.levels.hasOwnProperty(level)) {\n      this.level = level;\n    }\n    this._log('info', `Debug mode ${enabled ? 'enabled' : 'disabled'} with level: ${level}`);\n  }\n}","/**\n * @fileoverview Configuration management for AFS\n */\n\nexport class Options {\n  /**\n   * @typedef {Object} AFSOptions\n   * @property {string} containerSelector - Main container selector\n   * @property {string} itemSelector - Items to filter selector\n   * @property {string} filterButtonSelector - Filter buttons selector\n   * @property {string} searchInputSelector - Search input selector\n   * @property {string} counterSelector - Results counter selector\n   * @property {string} activeClass - Active state class\n   * @property {string} hiddenClass - Hidden state class\n   * @property {number} animationDuration - Animation duration in ms\n   * @property {string} filterMode - Filter mode ('OR' or 'AND')\n   * @property {string[]} searchKeys - Data attributes to search in\n   * @property {number} debounceTime - Search debounce delay in ms\n   * @property {boolean} debug - Enable debug mode\n   * @property {string} logLevel - Log level\n   * @property {string} dateFormat - Date format\n   * @property {Object} counter - Counter-related options\n   * @property {Object} styles - Style-related options\n   */\n\n  /**\n   * @type {AFSOptions}\n   */\n  static defaults = {\n    // Selectors\n    containerSelector: \".afs-filter-container\",\n    itemSelector: \".afs-filter-item\",\n    filterButtonSelector: \".afs-btn-filter\",\n    searchInputSelector: \".afs-filter-search\",\n    counterSelector: \".afs-filter-counter\",\n\n    // Classes\n    activeClass: \"active\",\n    hiddenClass: \"hidden\",\n\n    // Filtering\n    filterMode: \"OR\",\n    searchKeys: [\"title\"],\n    debounceTime: 300,\n\n    // Debug\n    debug: false,\n    logLevel: \"info\",\n\n    // Date handling\n    dateFormat: \"YYYY-MM-DD\",\n\n    counter: {\n      template: \"Showing {visible} of {total}\",\n      showFiltered: true,\n      filteredTemplate: \"({filtered} filtered)\",\n      noResultsTemplate: \"No items found\",\n      formatter: (num) => num.toLocaleString(),\n    },\n\n    // Styles\n    styles: {\n      slider: {\n        // Add new UI options\n        ui: {\n          showHistogram: false,\n          bins: 10, // Number of bins for histogram\n          track: {\n            radius: \"0\", // Button radius\n            background: \"#e5e7eb\", // Track color\n          },\n          thumb: {\n            radius: \"50%\", // Button radius\n            size: \"16px\", // Button size\n            background: \"#000\", // Button color\n          },\n          histogram: {\n            background: \"#e5e7eb\", // Histogram background\n            bar: {\n              background: \"#000\", // Bar color\n            },\n          },\n        },\n      },\n      pagination: {\n        ui: {\n          button: {\n            background: \"transparent\",\n            border: \"1px solid #000\",\n            borderRadius: \"4px\",\n            padding: \"8px 12px\",\n            color: \"#000\",\n            active: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n            hover: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n          },\n        },\n      },\n      colors: {\n        primary: \"#000\",\n        background: \"#e5e7eb\",\n        text: \"#000\",\n      },\n    },\n\n    // Slider\n    slider: {\n      containerClass: \"afs-range-slider\",\n      trackClass: \"afs-range-track\",\n      thumbClass: \"afs-range-thumb\",\n      valueClass: \"afs-range-value\",\n      selectedClass: \"afs-range-selected\",\n    },\n\n    // Pagination\n    pagination: {\n      enabled: false,\n      itemsPerPage: 10,\n      container: \".afs-pagination-container\",\n      pageButtonClass: \"afs-page-button\",\n      activePageClass: \"afs-page-active\",\n      containerClass: \"afs-pagination\",\n      scrollToTop: false,\n      scrollOffset: 50,\n      scrollBehavior: \"smooth\", // or 'auto' for instant scroll\n    },\n\n    // Animation\n    animation: {\n      type: \"fade\",\n      duration: 300,\n      easing: \"ease-out\",\n      inClass: \"afs-animation-enter\",\n      outClass: \"afs-animation-leave\",\n    },\n  };\n\n  constructor(userOptions = {}) {\n    this.options = this.mergeOptions(Options.defaults, userOptions);\n    this.initializeStyles();\n    this.validate();\n  }\n\n  /**\n   * Initialize styles with defaults\n   * @private\n   */\n  initializeStyles() {\n    const defaultStyles = Options.defaults.styles;\n    const currentStyles = this.options.styles || {};\n\n    this.options.styles = this.mergeOptions(defaultStyles, currentStyles);\n\n    // Ensure colors object exists and has all required properties\n    this.options.styles.colors = {\n      ...defaultStyles.colors,\n      ...(currentStyles.colors || {}),\n    };\n  }\n\n  /**\n   * Deep merge options\n   * @private\n   * @param {Object} target - Target object\n   * @param {Object} source - Source object\n   * @returns {Object} Merged options\n   */\n  mergeOptions(target, source) {\n    const result = { ...target };\n\n    for (const key in source) {\n      if (\n        source[key] !== null &&\n        typeof source[key] === \"object\" &&\n        !Array.isArray(source[key])\n      ) {\n        // If the key doesn't exist in target or isn't an object, create/override it\n        if (!target[key] || typeof target[key] !== \"object\") {\n          result[key] = {};\n        }\n        // Recursively merge nested objects\n        result[key] = this.mergeOptions(result[key], source[key]);\n      } else if (source[key] !== undefined) {\n        // Only override if the source value is defined\n        result[key] = source[key];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate options\n   * @private\n   * @throws {Error} If options are invalid\n   */\n  validate() {\n    // Required selectors\n    const requiredSelectors = [\"containerSelector\", \"itemSelector\"];\n    for (const selector of requiredSelectors) {\n      if (typeof this.options[selector] !== \"string\") {\n        throw new Error(`${selector} must be a string`);\n      }\n    }\n\n    // Animation duration\n    if (\n      typeof this.options.animation.duration !== \"number\" ||\n      this.options.animation.duration < 0\n    ) {\n      throw new Error(\"animationDuration must be a positive number\");\n    }\n\n    // Filter mode\n    if (![\"OR\", \"AND\"].includes(this.options.filterMode.toUpperCase())) {\n      throw new Error('filterMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Search keys\n    if (\n      !Array.isArray(this.options.searchKeys) ||\n      this.options.searchKeys.length === 0\n    ) {\n      throw new Error(\"searchKeys must be a non-empty array\");\n    }\n\n    // Counter validation\n    if (this.options.counter) {\n      if (typeof this.options.counter.template !== \"string\") {\n        throw new Error(\"counter.template must be a string\");\n      }\n      if (typeof this.options.counter.showFiltered !== \"boolean\") {\n        this.options.counter.showFiltered = true; // Set default\n      }\n      if (typeof this.options.counter.formatter !== \"function\") {\n        this.options.counter.formatter = (num) => num.toLocaleString(); // Set default\n      }\n    } else {\n      this.options.counter = { ...Options.defaults.counter }; // Set defaults if missing\n    }\n  }\n\n  /**\n   * Get option value\n   * @param {string} path - Dot notation path to option\n   * @returns {any} Option value\n   */\n  get(path) {\n    return path.split(\".\").reduce((obj, key) => obj?.[key], this.options);\n  }\n\n  /**\n   * Set option value\n   * @param {string} path - Dot notation path to option\n   * @param {any} value - New value\n   */\n  set(path, value) {\n    const parts = path.split(\".\");\n    const last = parts.pop();\n    const target = parts.reduce((obj, key) => {\n      if (!(key in obj)) obj[key] = {};\n      return obj[key];\n    }, this.options);\n\n    target[last] = value;\n    this.validate();\n  }\n\n  /**\n   * Update multiple options\n   * @param {Object} updates - Options to update\n   */\n  update(updates) {\n    this.options = this.mergeOptions(this.options, updates);\n    this.validate();\n  }\n\n  /**\n   * Reset options to defaults\n   */\n  reset() {\n    this.options = { ...Options.defaults };\n  }\n\n  /**\n   * Export options\n   * @returns {Object} Current options\n   */\n  export() {\n    return { ...this.options };\n  }\n}\n","/**\n * @fileoverview State management for AFS\n */\n\nexport class State {\n  constructor() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n\n  /**\n   * Get current state\n   * @returns {Object} Current state\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Update state\n   * @param {string} path - Dot notation path to update\n   * @param {any} value - New value\n   */\n  setState(path, value) {\n    const parts = path.split('.');\n    let current = this.state;\n    \n    for (let i = 0; i < parts.length - 1; i++) {\n      if (!(parts[i] in current)) {\n        current[parts[i]] = {};\n      }\n      current = current[parts[i]];\n    }\n    \n    current[parts[parts.length - 1]] = value;\n  }\n\n  /**\n   * Export state\n   * @returns {Object} Exportable state\n   */\n  export() {\n    return {\n      filters: {\n        current: Array.from(this.state.filters.current),\n        groups: Array.from(this.state.filters.groups.entries()),\n        ranges: Array.from(this.state.filters.ranges.entries()),\n        dateRanges: Array.from(this.state.filters.dateRanges.entries()),\n        mode: this.state.filters.mode,\n        groupMode: this.state.filters.groupMode\n      },\n      search: { ...this.state.search },\n      sort: { ...this.state.sort },\n      pagination: { ...this.state.pagination }\n    };\n  }\n\n  /**\n   * Import state\n   * @param {Object} importedState - State to import\n   */\n  import(importedState) {\n    if (importedState.filters) {\n      this.state.filters.current = new Set(importedState.filters.current);\n      this.state.filters.groups = new Map(importedState.filters.groups);\n      this.state.filters.ranges = new Map(importedState.filters.ranges);\n      this.state.filters.dateRanges = new Map(importedState.filters.dateRanges);\n      this.state.filters.mode = importedState.filters.mode;\n      this.state.filters.groupMode = importedState.filters.groupMode;\n    }\n\n    if (importedState.search) {\n      this.state.search = { ...importedState.search };\n    }\n\n    if (importedState.sort) {\n      this.state.sort = { ...importedState.sort };\n    }\n\n    if (importedState.pagination) {\n      this.state.pagination = { ...importedState.pagination };\n    }\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  reset() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n}","/**\n * @fileoverview Style management for AFS\n */\n\nexport class StyleManager {\n  /**\n   * @param {import('../core/Options').Options} options - Options instance\n   */\n  constructor(options) {\n    this.options = options;\n    this.styleElement = null;\n  }\n\n  /**\n   * Create base styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createBaseStyles() {\n    const hiddenClass = this.options.get(\"hiddenClass\") || \"hidden\";\n    const itemSelector = this.options.get(\"itemSelector\") || \".afs-filter-item\";\n    const filterButtonSelector = this.options.get(\"filterButtonSelector\") || \".afs-btn-filter\";\n    const activeClass = this.options.get(\"activeClass\") || \"active\";\n    const animationDuration = this.options.get(\"animation.duration\") || '300ms';\n    const animationEasing = this.options.get(\"animation.easing\") || 'ease-out';\n    \n    return `\n      .${hiddenClass} {\n        display: none !important;\n      }\n\n      ${itemSelector} {\n        opacity: 1;\n        transform: scale(1);\n        filter: blur(0);\n        transition: opacity ${animationDuration} ${animationEasing},\n                    transform ${animationDuration} ${animationEasing},\n                    filter ${animationDuration} ${animationEasing};\n      }\n\n      ${itemSelector}.${hiddenClass} {\n        opacity: 0;\n        transform: scale(0.95);\n        filter: blur(5px);\n      }\n\n      ${filterButtonSelector} {\n        opacity: 0.5;\n        transition: opacity ${animationDuration} ${animationEasing};\n      }\n\n      ${filterButtonSelector}.${activeClass} {\n        opacity: 1;\n      }\n    `;\n}\n\n  /**\n   * Create range slider styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createRangeStyles() {\n    const styles = this.options.get(\"styles\");\n    const sliderOptions = this.options.get(\"slider\") || {};\n    const sliderStyles = styles.slider;\n    const colors = styles.colors;\n\n    const containerClass = sliderOptions.containerClass || \"afs-range-slider\";\n    const trackClass = sliderOptions.trackClass || \"afs-range-track\";\n    const thumbClass = sliderOptions.thumbClass || \"afs-range-thumb\";\n    const valueClass = sliderOptions.valueClass || \"afs-range-value\";\n    const selectedClass = sliderOptions.selectedClass || \"afs-range-selected\";\n\n    return `\n    /* Range Slider Styles */\n    .${containerClass} {\n      position: relative;\n      width: auto;\n      height: 40px;\n      margin: 10px 0;\n      padding: 0 8px;\n    }\n\n    .${trackClass} {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 100%;\n      height: 4px;\n      background: ${sliderStyles.ui.track.background || colors.background};\n      border-radius: ${sliderStyles.ui.track.radius || \"0\"};\n    }\n\n    .${thumbClass} {\n      position: absolute;\n      top: 50%;\n      width: ${sliderStyles.ui.thumb.size || \"16px\"};\n      height: ${sliderStyles.ui.thumb.size || \"16px\"};\n      background: ${sliderStyles.ui.thumb.background || colors.primary};\n      border-radius: ${sliderStyles.ui.thumb.radius || \"50%\"};\n      transform: translate(-50%, -50%);\n      cursor: pointer;\n      z-index: 2;\n    }\n\n    .${valueClass} {\n      position: absolute;\n      top: -20px;\n      transform: translateX(-50%);\n      font-size: 10px;\n      color: ${colors.text};\n    }\n\n    .${selectedClass} {\n      position: absolute;\n      height: 4px;\n      background: ${colors.primary};\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    /* Histogram Styles */\n    .afs-histogram {\n      position: absolute;\n      bottom: 22px;\n      left: 8px;\n      right: 8px;\n      height: 20px;\n      display: flex;\n      align-items: flex-end;\n      gap: 1px;\n      opacity: 0.5;\n    }\n\n    .afs-histogram-bar {\n      flex: 1;\n      background-color: ${sliderStyles.ui.histogram.background ||colors.background};\n      min-height: 4px;\n      transition: background-color 0.2s ease;\n    }\n\n    .afs-histogram-bar.active {\n      background-color: ${sliderStyles.ui.histogram.bar.background || colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createDateStyles() {\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n    .afs-date-range-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin: 10px 0;\n    }\n\n    .afs-date-input-wrapper {\n      flex: 1;\n    }\n\n    .afs-date-input-wrapper label {\n      display: block;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      margin-bottom: 0.5rem;\n    }\n\n    .afs-date-input {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid ${colors.background};\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      transition: border-color 0.2s ease;\n    }\n\n    .afs-date-input:focus {\n      outline: none;\n      border-color: ${colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createInputRangeStyles() {\n    const colors = this.options.get(\"styles\").colors;\n    return `\n        .afs-input-range-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 1rem;\n            margin: 10px 0;\n        }\n\n        .afs-input-wrapper {\n            flex: 1;\n        }\n\n        .afs-input-label {\n            display: block;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            margin-bottom: 0.5rem;\n        }\n\n        .afs-input {\n            width: 100%;\n            padding: 0.5rem;\n            border: 1px solid ${colors.background};\n            border-radius: 0.25rem;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            transition: border-color 0.2s ease;\n        }\n\n        .afs-input:focus {\n            outline: none;\n            border-color: ${colors.primary};\n        }\n    `;\n}\n\n  /**\n   * Apply all styles\n   * @public\n   */\n  applyStyles() {\n    try {\n      const styles = `\n      /* Base styles */\n      ${this.createBaseStyles()}\n\n      /* Range slider styles */\n      ${this.createRangeStyles()}\n\n      /* Date filter styles */\n      ${this.createDateStyles()}\n\n      /* Pagination styles */\n      ${this.createPaginationStyles()}\n\n      /* Search styles */\n      ${this.createSearchStyles()}\n\n      /* Input range styles */\n      ${this.createInputRangeStyles()}\n    `;\n\n      if (this.styleElement) {\n        this.styleElement.textContent = styles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = styles;\n        document.head.appendChild(this.styleElement);\n      }\n    } catch (error) {\n      console.error(\"Error applying styles:\", error);\n      const fallbackStyles = this.createBaseStyles();\n      if (this.styleElement) {\n        this.styleElement.textContent = fallbackStyles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = fallbackStyles;\n        document.head.appendChild(this.styleElement);\n      }\n    }\n  }\n\n  /**\n   * Create pagination styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createPaginationStyles() {\n    const styles = this.options.get(\"styles\");\n    const paginationOptions = this.options.get(\"pagination\") || {};\n    const colors = this.options.get(\"styles\").colors;\n\n    const containerClass = paginationOptions.containerClass || \"afs-pagination\";\n    const buttonClass = paginationOptions.pageButtonClass || \"afs-page-button\";\n    const activeClass = paginationOptions.activePageClass || \"afs-page-active\";\n\n    const paginationStyles = styles.pagination;\n\n    return `\n      .${containerClass} {\n        display: flex;\n        justify-content: center;\n        gap: 8px;\n        margin-top: 20px;\n      }\n\n      .${buttonClass} {\n        padding: ${paginationStyles.ui.button.padding || '8px 12px'};\n        border: ${paginationStyles.ui.button.border || '1px solid ' + colors.primary};\n        border-radius: ${paginationStyles.ui.button.borderRadius || '4px'};\n        cursor: pointer;\n        transition: all 200ms ease-out;\n        background: ${paginationStyles.ui.button.background || 'transparent' };\n        color: ${paginationStyles.ui.button.color || colors.primary};\n      }\n\n      .${buttonClass}:hover {\n        background: ${paginationStyles.ui.button.hover.background || colors.primary};\n        color: ${paginationStyles.ui.button.hover.color || 'white'};\n      }\n\n      .${buttonClass}.${activeClass} {\n        background: ${paginationStyles.ui.button.active.background || colors.primary};\n        color: ${paginationStyles.ui.button.active.color || 'white'};\n      }\n\n      .${buttonClass}:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n\n  /**\n   * Create search styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createSearchStyles() {\n    const searchClass = this.options.get(\"searchInputClass\") || \"afs-search\";\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n      .${searchClass} {\n        padding: 8px;\n        border: 1px solid ${colors.background};\n        border-radius: 4px;\n        width: 100%;\n        max-width: 300px;\n        transition: border-color 200ms ease-out;\n      }\n\n      .${searchClass}:focus {\n        outline: none;\n        border-color: ${colors.primary};\n      }\n    `;\n  }\n\n  /**\n   * Update styles\n   * @public\n   * @param {Object} newOptions - New style options\n   */\n  updateStyles(newOptions) {\n    this.options = newOptions;\n    this.applyStyles();\n  }\n\n  /**\n   * Remove styles\n   * @public\n   */\n  removeStyles() {\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n}\n","/**\n * @fileoverview Event handling system for AFS\n */\n\nexport class EventEmitter {\n  constructor() {\n    this.events = new Map();\n    this.onceEvents = new Map();\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventName, callback) {\n    if (!this.events.has(eventName)) {\n      this.events.set(eventName, new Set());\n    }\n\n    this.events.get(eventName).add(callback);\n\n    // Return unsubscribe function\n    return () => this.off(eventName, callback);\n  }\n\n  /**\n   * Subscribe to an event once\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventName, callback) {\n    const onceWrapper = (...args) => {\n      this.off(eventName, onceWrapper);\n      callback.apply(this, args);\n    };\n\n    if (!this.onceEvents.has(eventName)) {\n      this.onceEvents.set(eventName, new Map());\n    }\n\n    this.onceEvents.get(eventName).set(callback, onceWrapper);\n    return this.on(eventName, onceWrapper);\n  }\n\n  /**\n   * Unsubscribe from an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   */\n  off(eventName, callback) {\n    // Remove from regular events\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).delete(callback);\n\n      // Cleanup if no more listeners\n      if (this.events.get(eventName).size === 0) {\n        this.events.delete(eventName);\n      }\n    }\n\n    // Remove from once events\n    if (this.onceEvents.has(eventName)) {\n      const onceWrapper = this.onceEvents.get(eventName).get(callback);\n      if (onceWrapper) {\n        this.events.get(eventName)?.delete(onceWrapper);\n        this.onceEvents.get(eventName).delete(callback);\n      }\n\n      // Cleanup if no more once listeners\n      if (this.onceEvents.get(eventName).size === 0) {\n        this.onceEvents.delete(eventName);\n      }\n    }\n  }\n\n  /**\n   * Emit an event\n   * @param {string} eventName - Name of the event\n   * @param {...any} args - Arguments to pass to callbacks\n   */\n  emit(eventName, ...args) {\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all event listeners\n   * @param {string} [eventName] - Optional event name to clear specific event\n   */\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n      this.onceEvents.delete(eventName);\n    } else {\n      this.events.clear();\n      this.onceEvents.clear();\n    }\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event\n   * @returns {number} Number of listeners\n   */\n  listenerCount(eventName) {\n    return (this.events.get(eventName)?.size || 0) + \n           (this.onceEvents.get(eventName)?.size || 0);\n  }\n}","/**\n * @fileoverview Animation management for AFS\n */\n\nexport class Animation {\n    constructor(afs) {\n        this.afs = afs;\n        this.options = this.afs.options;\n        this.animations = {\n          fade: {\n            in: { opacity: 1, transform: 'scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.95)', transitionTimingFunction: 'ease-out' },\n          },\n          slide: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in-out' },\n            out: { opacity: 0, transform: 'translateY(20px)', transitionTimingFunction: 'ease-in-out' },\n          },\n          scale: {\n            in: { opacity: 1, transform: 'scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.8)', transitionTimingFunction: 'ease-out' },\n          },\n          rotate: {\n            in: { opacity: 1, transform: 'rotate(0deg) scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'rotate(90deg) scale(0.9)', transitionTimingFunction: 'ease-out' },\n          },\n          flip: {\n            in: { opacity: 1, transform: 'rotateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'rotateY(180deg)', transitionTimingFunction: 'ease-out' },\n          },\n          zoom: {\n            in: { opacity: 1, transform: 'scale(1.2)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.8)', transitionTimingFunction: 'ease-out' },\n          },\n          bounce: {\n            in: { opacity: 1, transform: 'translateY(0)', animation: 'bounce 1s cubic-bezier(0.68, -0.55, 0.27, 1.55)' },\n            out: { opacity: 0, transform: 'translateY(-20px)', animation: 'bounceOut 1s ease-out' },\n          },\n          blur: {\n            in: { opacity: 1, filter: 'blur(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, filter: 'blur(5px)', transitionTimingFunction: 'ease-out' },\n          },\n          skew: {\n            in: { opacity: 1, transform: 'skew(0deg)', transitionTimingFunction: 'ease-in-out' },\n            out: { opacity: 0, transform: 'skew(10deg)', transitionTimingFunction: 'ease-in-out' },\n          },\n          slideInLeft: {\n            in: { opacity: 1, transform: 'translateX(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateX(-100%)', transitionTimingFunction: 'ease-out' },\n          },\n          slideInRight: {\n            in: { opacity: 1, transform: 'translateX(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateX(100%)', transitionTimingFunction: 'ease-out' },\n          },\n          fadeInUp: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateY(10px)', transitionTimingFunction: 'ease-out' },\n          },\n          fadeInDown: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateY(-10px)', transitionTimingFunction: 'ease-out' },\n          },\n          bounceIn: {\n            in: { opacity: 1, transform: 'scale(1.05)', transitionTimingFunction: 'cubic-bezier(0.68, -0.55, 0.27, 1.55)' },\n            out: { opacity: 0, transform: 'scale(0.9)', transitionTimingFunction: 'ease-out' },\n          },\n        };\n      }\n      \n    applyShowAnimation(item, animationType = 'fade') {\n    const duration = this.options.get('animation.duration') || '300ms';\n    const animation = this.animations[animationType]?.in || this.animations.fade.in;\n    \n    // Ensure display is set\n    item.style.display = 'block';\n    item.style.opacity = '0'; // Start with opacity 0\n    \n    // Apply animation in next frame\n    requestAnimationFrame(() => {\n      Object.assign(item.style, animation, {\n        transition: `opacity ${duration} ${animation.transitionTimingFunction}, transform ${duration} ${animation.transitionTimingFunction}`,\n      });\n    });\n  }\n  \n    applyHideAnimation(item, animationType = 'fade') {\n      const duration = this.options.get('animation.duration') || '300ms';\n      const animation = this.animations[animationType]?.out || this.animations.fade.out;\n      \n      Object.assign(item.style, animation, {\n        transition: `opacity ${duration} ${animation.transitionTimingFunction}, transform ${duration} ${animation.transitionTimingFunction}`,\n      });\n\n      const handleTransitionEnd = () => {\n        item.style.display = 'none';\n        item.removeEventListener('transitionend', handleTransitionEnd);\n      };\n      item.addEventListener('transitionend', handleTransitionEnd);\n    }\n\n    setAnimation(animationType) {\n      this.afs.options.set('animation.type', animationType);\n    }\n}","/**\n * @fileoverview Filter functionality for AFS\n */\n\nimport { Animation } from '../styles/Animation.js';\n\nexport class Filter {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.animation = new Animation(afs);\n    this.filterButtons = new Map();\n    this.activeFilters = new Set([\"*\"]);\n    this.currentFilters = new Set([\"*\"]);\n    this.filterGroups = new Map();\n    this.sortOrders = new Map();\n    this.setupFilters();\n  }\n\n  /**\n   * Setup filters\n   * @private\n   */\n  setupFilters() {\n    this.afs.logger.debug(\"Setting up filters\");\n    const filterSelector = this.afs.options.get(\"filterButtonSelector\");\n    if (!filterSelector) return;\n\n    // Initialize filter buttons\n    document.querySelectorAll(filterSelector).forEach((button) => {\n      const filterValue = button.dataset.filter;\n      if (!filterValue) {\n        this.afs.logger.warn(\n          \"Filter button missing data-filter attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.filterButtons.set(button, filterValue);\n      this.bindFilterEvent(button);\n    });\n\n    this.afs.logger.debug(\"Filters initialized\");\n  }\n\n  /**\n   * Set filter logic mode\n   * @public\n   * @param {string|boolean} logic - 'AND'/'OR' or true/false (true = AND, false = OR)\n   */\n  setLogic(logic) {\n    if (typeof logic === \"boolean\") {\n      // Handle boolean input (true = AND, false = OR)\n      this.afs.options.set(\"filterMode\", logic ? \"AND\" : \"OR\");\n    } else {\n      const mode = logic.toUpperCase();\n      if ([\"OR\", \"AND\"].includes(mode)) {\n        this.afs.options.set(\"filterMode\", mode);\n      } else {\n        this.afs.logger.warn(`Invalid filter mode: ${logic}`);\n        return;\n      }\n    }\n\n    this.afs.logger.debug(\n      `Filter logic set to: ${this.afs.options.get(\"filterMode\")}`,\n    );\n    this.applyFilters();\n  }\n\n  /**\n   * Clear all filters\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Reset filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Reset filter groups\n    this.filterGroups.clear();\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear sorting\n    this.sortOrders.clear();\n\n    // Apply changes and update UI\n    this.applyFilters();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"filtersCleared\");\n  }\n\n  /**\n   * Bind filter event to button\n   * @private\n   * @param {HTMLElement} button - Filter button\n   */\n  bindFilterEvent(button) {\n    this.afs.logger.debug(\"Binding filter event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const filterValue = this.filterButtons.get(button);\n\n      if (!filterValue) return;\n\n      if (filterValue === \"*\") {\n        this.resetFilters();\n      } else {\n        this.toggleFilter(filterValue, button);\n      }\n\n      // Update the URL after filter change\n      this.afs.urlManager.updateURL();\n    });\n  }\n\n  /**\n   * Reset filters to default state\n   * @public\n   */\n  resetFilters() {\n    this.afs.logger.debug(\"Resetting filters\");\n  \n    // Clear existing filters\n    this.activeFilters.clear();\n    \n    // Reset button states\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n  \n    // Add \"*\" filter and activate \"all\" button\n    this.activeFilters.add(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n  \n    // Clear filter groups\n    this.filterGroups.clear();\n  \n    // Create a promise to track animations\n    const animationPromises = [];\n  \n    // Show all items with animation\n    this.afs.items.forEach(item => {\n      const promise = new Promise(resolve => {\n        item.classList.remove(this.afs.options.get('hiddenClass'));\n        item.style.display = 'block'; // Ensure item is visible\n        \n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(item, this.afs.options.get(\"animation.type\"));\n          // Resolve after animation duration\n          setTimeout(resolve, this.afs.options.get(\"animation.duration\") || 300);\n        });\n      });\n      animationPromises.push(promise);\n    });\n  \n    // Update state after all items are visible\n    const visibleItems = new Set(this.afs.items);\n    this.afs.state.setState(\"items.visible\", visibleItems);\n  \n    // Wait for all animations to complete\n    Promise.all(animationPromises).then(() => {\n      // Update counter\n      this.afs.updateCounter();\n      \n      // Update URL\n      this.afs.urlManager.updateURL();\n  \n      // Emit event\n      this.afs.emit(\"filtersReset\");\n    });\n  }\n\n  /**\n   * Find \"all\" filter button\n   * @private\n   * @returns {HTMLElement|null} All button\n   */\n  findAllButton() {\n    for (const [button, value] of this.filterButtons.entries()) {\n      if (value === \"*\") return button;\n    }\n\n    return null;\n  }\n\n  handleFilterClick(button) {\n    const filterValue = button.dataset.filter;\n    this.afs.logger.debug(\"Filter clicked:\", filterValue);\n\n    if (filterValue === \"*\") {\n      this.resetFilters();\n    } else {\n      this.toggleFilter(filterValue, button);\n    }\n\n    this.filter();\n\n    // Call updateURL to reflect the new filter state in the URL\n    this.updateURL();\n  }\n\n  /**\n   * Toggle filter state\n   * @private\n   * @param {string} filterValue - Filter value\n   * @param {HTMLElement} button - Filter button\n   */\n  toggleFilter(filterValue, button) {\n    // Remove \"all\" filter\n    this.activeFilters.delete(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.remove(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Toggle filter\n    if (button.classList.contains(this.afs.options.get(\"activeClass\"))) {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.delete(filterValue);\n\n      // Reset to \"all\" if no filters active\n      if (this.activeFilters.size === 0) {\n        this.resetFilters();\n        return;\n      }\n    } else {\n      button.classList.add(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.add(filterValue);\n    }\n\n    this.applyFilters();\n\n    // Emit event\n    this.afs.emit(\"filterToggled\", {\n      filter: filterValue,\n      activeFilters: Array.from(this.activeFilters),\n    });\n\n    this.afs.logger.debug(\"Filter toggled:\", filterValue);\n  }\n\n /**\n * Apply current filters\n * @public\n */\n applyFilters() {\n    const activeFilters = Array.from(this.activeFilters);\n    this.afs.logger.debug(\"Active filters:\", activeFilters);\n\n    const previouslyVisible = new Set(this.afs.state.getState().items.visible);\n    const visibleItems = new Set();\n\n    // First determine visibility\n    this.afs.items.forEach(item => {\n        if (this.activeFilters.has(\"*\") || this.itemMatchesFilters(item)) {\n            visibleItems.add(item);\n        }\n    });\n\n    // Update state before animations\n    this.afs.state.setState(\"items.visible\", visibleItems);\n\n    // Track animation promises\n    const animationPromises = [];\n\n    // Apply animations\n    this.afs.items.forEach(item => {\n        const promise = new Promise(resolve => {\n            if (visibleItems.has(item)) {\n                // Show item\n                item.classList.remove(this.afs.options.get('hiddenClass'));\n                requestAnimationFrame(() => {\n                    this.animation.applyShowAnimation(item, this.afs.options.get(\"animation.type\"));\n                    setTimeout(resolve, parseFloat(this.afs.options.get(\"animation.duration\")) || 300);\n                });\n            } else {\n                // Hide item\n                requestAnimationFrame(() => {\n                    this.animation.applyHideAnimation(item, this.afs.options.get(\"animation.type\"));\n                    setTimeout(resolve, parseFloat(this.afs.options.get(\"animation.duration\")) || 300);\n                });\n            }\n        });\n        animationPromises.push(promise);\n    });\n\n    // Handle completion\n    Promise.all(animationPromises).then(() => {\n        // Ensure visible items remain visible\n        visibleItems.forEach(item => {\n            item.style.display = 'block';\n            item.style.opacity = '1';\n        });\n\n        // Update UI\n        this.afs.updateCounter();\n        this.afs.urlManager.updateURL();\n\n        this.afs.emit(\"filtersApplied\", {\n            activeFilters,\n            visibleItems: visibleItems.size,\n        });\n    });\n\n    // Emit visibility change events\n    this.emitFilterEvents(previouslyVisible, visibleItems);\n}\n\n  /**\n   * Check if item matches current filters\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {boolean} Whether item matches filters\n   */\n  itemMatchesFilters(item) {\n    // Show all items if \"*\" is active\n    if (this.activeFilters.has(\"*\")) {\n      return true;\n    }\n  \n    // Regular filter matching\n    const itemCategories = new Set(item.dataset.categories?.split(\" \") || []);\n  \n    // If using filter groups\n    if (this.filterGroups.size > 0) {\n      return this.itemMatchesFilterGroups(itemCategories);\n    }\n  \n    // Regular filtering\n    return this.afs.options.get(\"filterMode\") === \"OR\"\n      ? this.itemMatchesAnyFilter(itemCategories)\n      : this.itemMatchesAllFilters(itemCategories);\n  }\n\n  /**\n   * Check if item matches any active filter (OR mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches any filter\n   */\n  itemMatchesAnyFilter(itemCategories) {\n    return Array.from(this.activeFilters).some((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches all active filters (AND mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches all filters\n   */\n  itemMatchesAllFilters(itemCategories) {\n    return Array.from(this.activeFilters).every((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches filter groups\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches groups\n   */\n  itemMatchesFilterGroups(itemCategories) {\n    const groupMatches = Array.from(this.filterGroups.values()).map((group) => {\n      if (group.filters.size === 0) return true;\n\n      return group.operator === \"OR\"\n        ? Array.from(group.filters).some((filter) => itemCategories.has(filter))\n        : Array.from(group.filters).every((filter) =>\n            itemCategories.has(filter),\n          );\n    });\n\n    return this.afs.options.get(\"groupMode\") === \"OR\"\n      ? groupMatches.some((matches) => matches)\n      : groupMatches.every((matches) => matches);\n  }\n\n  /**\n   * Emit filter-related events\n   * @private\n   * @param {Set} previouslyVisible - Previously visible items\n   * @param {Set} nowVisible - Currently visible items\n   */\n  emitFilterEvents(previouslyVisible, nowVisible) {\n    // Determine added and removed items\n    const added = new Set(\n      [...nowVisible].filter((item) => !previouslyVisible.has(item)),\n    );\n    const removed = new Set(\n      [...previouslyVisible].filter((item) => !nowVisible.has(item)),\n    );\n\n    // Emit filter event\n    this.afs.emit(\"filter\", {\n      activeFilters: Array.from(this.activeFilters),\n      visibleItems: nowVisible.size,\n      added: added.size,\n      removed: removed.size,\n    });\n\n    // Emit specific events for added/removed items\n    if (added.size > 0) {\n      this.afs.emit(\"itemsShown\", { items: added });\n    }\n    if (removed.size > 0) {\n      this.afs.emit(\"itemsHidden\", { items: removed });\n    }\n  }\n\n  /**\n   * Add or update a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   * @param {string[]} filters - Array of filter values\n   * @param {string} [operator='OR'] - Operator within group\n   */\n  addFilterGroup(groupId, filters, operator = \"OR\") {\n    this.afs.logger.debug(`Adding filter group: ${groupId}`);\n\n    if (!Array.isArray(filters)) {\n      this.afs.logger.error(\"Filters must be an array\");\n      return;\n    }\n\n    const validOperator = operator.toUpperCase();\n    if (![\"AND\", \"OR\"].includes(validOperator)) {\n      this.afs.logger.warn(`Invalid operator: ${operator}, defaulting to OR`);\n      operator = \"OR\";\n    }\n\n    this.filterGroups.set(groupId, {\n      filters: new Set(filters),\n      operator: validOperator,\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   */\n  removeFilterGroup(groupId) {\n    if (this.filterGroups.delete(groupId)) {\n      this.afs.logger.debug(`Removed filter group: ${groupId}`);\n\n      if (this.filterGroups.size === 0) {\n        this.resetFilters();\n      } else {\n        this.applyFilters();\n      }\n    }\n  }\n\n  /**\n   * Set filter group mode\n   * @public\n   * @param {string} mode - Mode for combining groups\n   */\n  setGroupMode(mode) {\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"groupMode\", validMode);\n      this.afs.logger.debug(`Set group mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid group mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Add filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  addFilter(filter) {\n    this.afs.logger.debug(`Adding filter: ${filter}`);\n\n    if (filter === \"*\") {\n      this.resetFilters();\n      return;\n    }\n\n    this.activeFilters.delete(\"*\");\n    this.activeFilters.add(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.add(this.afs.options.get(\"activeClass\"));\n      } else if (value === \"*\") {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Set filter mode\n   * @public\n   * @param {string} mode - Filter mode ('AND' or 'OR')\n   */\n  setFilterMode(mode) {\n    this.afs.logger.debug(`Setting filter mode to: ${mode}`);\n\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"filterMode\", validMode);\n      this.afs.logger.debug(`Set filter mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid filter mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Get active filters\n   * @public\n   * @returns {Set} Active filters\n   */\n  getActiveFilters() {\n    return new Set(this.activeFilters);\n  }\n\n  /**\n   * Get filter groups\n   * @public\n   * @returns {Map} Filter groups\n   */\n  getFilterGroups() {\n    return new Map(this.filterGroups);\n  }\n\n  /**\n   * Add filter button dynamically\n   * @public\n   * @param {HTMLElement} button - Button element\n   * @param {string} filter - Filter value\n   */\n  addFilterButton(button, filter) {\n    if (!filter) {\n      this.afs.logger.warn(\"Filter value required for new filter button\");\n      return;\n    }\n\n    this.filterButtons.set(button, filter);\n    this.bindFilterEvent(button);\n    this.afs.logger.debug(`Added filter button for: ${filter}`);\n  }\n\n  /**\n   * Remove filter button\n   * @public\n   * @param {HTMLElement} button - Button to remove\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Sort items with automatic order detection\n   * @public\n   * @param {string} key - The data attribute key to sort by\n   */\n  sortWithOrder(key) {\n    this.afs.logger.debug(`Sorting by ${key}`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Toggle sort order for the key\n      const currentOrder = this.sortOrders.get(key) || \"asc\";\n      const newOrder = currentOrder === \"asc\" ? \"desc\" : \"asc\";\n      this.sortOrders.set(key, newOrder);\n\n      // Determine sort type from first item\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, newOrder);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Emit event\n      this.afs.emit(\"sort\", { key, order: newOrder });\n\n      this.afs.logger.info(`Sorted items by ${key} in ${newOrder} order`);\n\n      return newOrder; // Return the new order for UI updates\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      // Use the existing reorderItems method to update the DOM\n      this.reorderItems(items);\n\n      // Clear any existing sort orders as we've shuffled\n      this.sortOrders.clear();\n\n      this.afs.emit(\"shuffled\", {\n        itemCount: items.length,\n      });\n\n      this.afs.logger.debug(\"Items shuffled successfully\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from item value\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @returns {string} Sort type ('number', 'date', or 'string')\n   */\n  determineSortType(item, key) {\n    this.afs.logger.debug(`Determining sort type for ${key}`);\n\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Parsed value for sorting\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value) || 0;\n      case \"date\":\n        return new Date(value).getTime() || 0;\n      default:\n        return (value || \"\").toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values for sorting\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} order - Sort order ('asc' or 'desc')\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, order) {\n    // Handle null/undefined values\n    if (a === null || a === undefined) return order === \"asc\" ? 1 : -1;\n    if (b === null || b === undefined) return order === \"asc\" ? -1 : 1;\n\n    // Compare values\n    const comparison = a < b ? -1 : a > b ? 1 : 0;\n    return order === \"asc\" ? comparison : -comparison;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const fragment = document.createDocumentFragment();\n    items.forEach((item) => fragment.appendChild(item));\n    this.afs.container.appendChild(fragment);\n  }\n\n  /**\n   * Get current sort order for key\n   * @public\n   * @param {string} key - Sort key\n   * @returns {string} Current sort order ('asc' or 'desc')\n   */\n  getCurrentSortOrder(key) {\n    return this.sortOrders.get(key) || \"asc\";\n  }\n\n  /**\n   * Clear all sort orders\n   * @public\n   */\n  clearSortOrders() {\n    this.afs.logger.debug(\"Clearing all sort orders\");\n\n    this.sortOrders.clear();\n    this.afs.emit(\"sortCleared\");\n  }\n\n  /**\n   * Clear all filters, url and search\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters and search\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Update filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear checkboxes\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach((checkbox) => {\n      if (checkbox.classList.contains(this.afs.options.get(\"activeClass\"))) {\n        checkbox.checked = false;\n        checkbox.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Clear search\n    if (this.afs.search) {\n      this.afs.search.setValue(\"\");\n    }\n\n    // Clear filter groups and sort orders\n    this.filterGroups.clear();\n    this.sortOrders.clear();\n\n    // Apply changes and ensure counter is updated\n    this.applyFilters();\n    \n    // Update URL if URLManager exists\n    if (this.afs.urlManager) {\n      this.afs.urlManager.updateURL();\n    }\n\n    // Emit event\n    this.afs.emit(\"filtersCleared\");\n\n    this.afs.logger.info(\"All filters cleared\");\n  }\n\n  /**\n   * Refresh the view\n   * @public\n   */\n  refresh() {\n    this.afs.logger.debug(\"Refreshing view\");\n\n    this.applyFilters();\n    this.afs.updateCounter();\n  }\n\n  removeFilterButton(button) {\n    this.filterButtons.delete(button);\n    button.removeEventListener(\"click\", this.handleFilterClick);\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.filterButtons.forEach((_, button) => {\n      this.removeFilterButton(button);\n    });\n    this.filterButtons.clear();\n    this.activeFilters.clear();\n    this.filterGroups.clear();\n    this.afs.logger.debug(\"Filter functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Utility functions for AFS\n */\n\n/**\n * Debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Delay in milliseconds\n * @param {boolean} [immediate=false] - Execute immediately\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, wait, immediate = false) => {\n    let timeout;\n    return function executedFunction(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  \n  /**\n   * Throttle function\n   * @param {Function} func - Function to throttle\n   * @param {number} limit - Time limit in milliseconds\n   * @returns {Function} Throttled function\n   */\n  export const throttle = (func, limit) => {\n    let inThrottle;\n    return function executedFunction(...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n  \n  /**\n   * Parse date string according to format\n   * @param {string} dateStr - Date string to parse\n   * @param {string} format - Date format\n   * @returns {Date|null} Parsed date object or null if invalid\n   */\n  export const parseDate = (dateStr, format) => {\n    const formats = {\n      'YYYY-MM-DD': /^\\d{4}-\\d{2}-\\d{2}$/,\n      'DD-MM-YYYY': /^\\d{2}-\\d{2}-\\d{4}$/,\n      'MM/DD/YYYY': /^\\d{2}\\/\\d{2}\\/\\d{4}$/\n    };\n  \n    try {\n      if (formats[format]?.test(dateStr)) {\n        const parts = dateStr.split(/[-\\/]/);\n        switch (format) {\n          case 'YYYY-MM-DD':\n            return new Date(parts[0], parts[1] - 1, parts[2]);\n          case 'DD-MM-YYYY':\n            return new Date(parts[2], parts[1] - 1, parts[0]);\n          case 'MM/DD/YYYY':\n            return new Date(parts[2], parts[0] - 1, parts[1]);\n        }\n      }\n      return new Date(dateStr);\n    } catch {\n      return null;\n    }\n  }\n  \n  /**\n   * Get element's computed style value\n   * @param {HTMLElement} element - Target element\n   * @param {string} property - CSS property\n   * @returns {string} Computed style value\n   */\n  export const getStyle = (element, property) => {\n    return window.getComputedStyle(element).getPropertyValue(property);\n  }\n  \n  /**\n   * Check if element matches a selector\n   * @param {HTMLElement} element - Element to check\n   * @param {string} selector - CSS selector\n   * @returns {boolean} Whether element matches selector\n   */\n  export const matches = (element, selector) => {\n    return (\n      element.matches ||\n      element.matchesSelector ||\n      element.msMatchesSelector ||\n      element.mozMatchesSelector ||\n      element.webkitMatchesSelector ||\n      element.oMatchesSelector\n    ).call(element, selector);\n  }\n  \n  /**\n   * Deep clone an object\n   * @param {Object} obj - Object to clone\n   * @returns {Object} Cloned object\n   */\n  export const deepClone = (obj) => {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj);\n    if (obj instanceof Array) return obj.map(item => deepClone(item));\n    if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item)));\n    if (obj instanceof Map) return new Map([...obj].map(([k, v]) => [deepClone(k), deepClone(v)]));\n    \n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\n    );\n  }\n  \n  /**\n   * Generate unique ID\n   * @param {string} [prefix=''] - ID prefix\n   * @returns {string} Unique ID\n   */\n  export const uniqueId = (prefix = '') => {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Check if value is plain object\n   * @param {any} value - Value to check\n   * @returns {boolean} Whether value is plain object\n   */\n  export function isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n  }\n","/**\n * @fileoverview Input range filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class InputRangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n  }\n\n  /**\n   * @typedef {Object} InputRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {number} [min] - Minimum value\n   * @property {number} [max] - Maximum value\n   * @property {number} [step] - Step value\n   * @property {string} [label] - Label for the input range\n   */\n\n  /**\n   * Add input range filter\n   * @param {InputRangeOptions} options - Input range options\n   */\n  addInputRange({ key, container, min, max, step = 1, label = '' }) {\n    this.afs.logger.debug(`Adding input range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for input range');\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Create input elements\n    const elements = this.createInputElements(label);\n    const state = this.initializeState(min, max, step);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateInputUI(key);\n\n    this.afs.logger.info(`Input range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const value = parseFloat(item.dataset[key]);\n          return isNaN(value) ? null : value;\n        })\n        .filter(value => value !== null);\n\n      if (values.length === 0) {\n        return {\n          min: 0,\n          max: 100\n        };\n      }\n\n      return {\n        min: Math.min(...values),\n        max: Math.max(...values)\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating range:', error);\n      return {\n        min: 0,\n        max: 100\n      };\n    }\n  }\n\n  /**\n   * Create input elements\n   * @private\n   */\n  /**\n * Create input elements\n * @private\n */\ncreateInputElements(label) {\n  const container = document.createElement('div');\n  container.className = 'afs-input-range-container';\n\n  if (label) {\n      const labelElement = document.createElement('div');\n      labelElement.className = 'afs-input-range-label';\n      labelElement.textContent = label;\n      container.appendChild(labelElement);\n  }\n\n  // Min input wrapper\n  const minWrapper = document.createElement('div');\n  minWrapper.className = 'afs-input-wrapper';\n  \n  const minLabel = document.createElement('label');\n  minLabel.textContent = 'Min';\n  minLabel.className = 'afs-input-label';\n  \n  const minInput = document.createElement('input');\n  minInput.type = 'number';\n  minInput.className = 'afs-input min';\n\n  minWrapper.appendChild(minLabel);\n  minWrapper.appendChild(minInput);\n\n  // Max input wrapper\n  const maxWrapper = document.createElement('div');\n  maxWrapper.className = 'afs-input-wrapper';\n  \n  const maxLabel = document.createElement('label');\n  maxLabel.textContent = 'Max';\n  maxLabel.className = 'afs-input-label';\n  \n  const maxInput = document.createElement('input');\n  maxInput.type = 'number';\n  maxInput.className = 'afs-input max';\n\n  maxWrapper.appendChild(maxLabel);\n  maxWrapper.appendChild(maxInput);\n\n  container.appendChild(minWrapper);\n  container.appendChild(maxWrapper);\n\n  return {\n      container,\n      minInput,\n      maxInput\n  };\n}\n\n  /**\n   * Initialize input range state\n   * @private\n   */\n  initializeState(min, max, step) {\n    return {\n      min,\n      max,\n      step,\n      currentMin: min,\n      currentMax: max\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minInput, maxInput } = elements;\n\n    const handleInputChange = debounce(() => {\n      const minValue = parseFloat(minInput.value);\n      const maxValue = parseFloat(maxInput.value);\n\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        state.currentMin = Math.max(state.min, Math.min(maxValue, minValue));\n        state.currentMax = Math.min(state.max, Math.max(minValue, maxValue));\n        this.updateInputUI(key);\n        this.applyFilter(key);\n      }\n    }, 300);\n\n    minInput.addEventListener('input', handleInputChange);\n    maxInput.addEventListener('input', handleInputChange);\n  }\n\n  /**\n   * Update input UI\n   * @private\n   */\n  updateInputUI(key) {\n    try {\n      const { state, elements } = this.activeRanges.get(key);\n      const { minInput, maxInput } = elements;\n\n      // Set constraints\n      minInput.min = state.min;\n      minInput.max = state.max;\n      minInput.step = state.step;\n      maxInput.min = state.min;\n      maxInput.max = state.max;\n      maxInput.step = state.step;\n\n      // Set current values\n      minInput.value = state.currentMin;\n      maxInput.value = state.currentMax;\n    } catch (error) {\n      this.afs.logger.error('Error updating input UI:', error);\n    }\n  }\n\n  /**\n   * Apply filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.info(`Applying input filter for ${key}`);\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach(item => {\n      try {\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        const itemValue = parseFloat(item.dataset[key]);\n        if (isNaN(itemValue)) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        if (itemValue >= state.currentMin && itemValue <= state.currentMax) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item:', error);\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('inputRangeFilter', {\n      key,\n      min: state.currentMin,\n      max: state.currentMax\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRange(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateInputUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove input range\n   * @param {string} key - Range key\n   */\n  removeInputRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Input range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Search functionality for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class Search {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.searchInput = null;\n    this.searchKeys = ['title']; // Default search keys\n    this.minSearchLength = 2;\n    this.highlightClass = 'afs-highlight';\n    this.setupSearch();\n  }\n\n  /**\n   * Setup search functionality\n   * @private\n   */\n  setupSearch() {\n    const searchSelector = this.afs.options.get('searchInputSelector');\n    if (!searchSelector) return;\n\n    this.searchInput = document.querySelector(searchSelector);\n    if (!this.searchInput) {\n      this.afs.logger.warn(`Search input not found: ${searchSelector}`);\n      return;\n    }\n\n    // Configure search\n    this.searchKeys = this.afs.options.get('searchKeys') || this.searchKeys;\n    this.minSearchLength = this.afs.options.get('minSearchLength') || this.minSearchLength;\n\n    // Bind events\n    this.bindSearchEvents();\n    this.afs.logger.debug('Search functionality initialized');\n  }\n\n  /**\n   * Bind search events\n   * @private\n   */\n  bindSearchEvents() {\n    if (!this.searchInput) return;\n\n    // Create debounced search function\n    const debouncedSearch = debounce((e) => {\n      this.search(e.target.value);\n    }, this.afs.options.get('debounceTime') || 300);\n\n    // Bind input event\n    this.searchInput.addEventListener('input', debouncedSearch);\n\n    // Bind clear event\n    this.searchInput.addEventListener('search', (e) => {\n      if (!e.target.value) {\n        this.clearSearch();\n      }\n    });\n\n    // Handle Enter key\n    this.searchInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.search(e.target.value);\n      }\n    });\n  }\n\n  /**\n   * Perform search\n   * @public\n   * @param {string} query - Search query\n   */\n  search(query) {\n    this.afs.logger.debug('Performing search:', query);\n    const normalizedQuery = this.normalizeQuery(query);\n\n    // Update state\n    this.afs.state.setState('search.query', normalizedQuery);\n    let matches = 0;\n\n    // Special case for empty query\n    if (!normalizedQuery) {\n      this.clearSearch();\n      return;\n    }\n\n    // Skip if query is too short\n    if (normalizedQuery.length < this.minSearchLength) {\n      this.afs.logger.debug('Search query too short');\n      return;\n    }\n\n    try {\n      // Create search regex\n      const regex = this.createSearchRegex(normalizedQuery);\n\n      // Search through items\n      this.afs.items.forEach(item => {\n        const searchText = this.getItemSearchText(item);\n        const matchesSearch = regex.test(searchText);\n\n        if (matchesSearch) {\n          this.afs.showItem(item);\n          this.highlightMatches(item, regex);\n          matches++;\n        } else {\n          this.afs.hideItem(item);\n          this.removeHighlights(item);\n        }\n      });\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit('search', {\n        query: normalizedQuery,\n        matches,\n        total: this.afs.items.length\n      });\n\n      this.afs.logger.info(`Search complete. Found ${matches} matches`);\n    } catch (error) {\n      this.afs.logger.error('Search error:', error);\n    }\n\n    // Update counter after animation\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Normalize search query\n   * @private\n   * @param {string} query - Raw search query\n   * @returns {string} Normalized query\n   */\n  normalizeQuery(query) {\n    return query\n      .toLowerCase()\n      .trim()\n      .replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Create search regex\n   * @private\n   * @param {string} query - Normalized search query\n   * @returns {RegExp} Search regex\n   */\n  createSearchRegex(query) {\n    // Escape special regex characters\n    const escapedQuery = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    \n    // Split into words for whole word matching\n    const words = escapedQuery.split(' ').filter(Boolean);\n    \n    // Create regex pattern\n    const pattern = words\n      .map(word => `(?=.*\\\\b${word})`)\n      .join('');\n    \n    return new RegExp(pattern, 'i');\n  }\n\n  /**\n   * Get searchable text from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {string} Searchable text\n   */\n  getItemSearchText(item) {\n    return this.searchKeys\n      .map(key => item.dataset[key] || '')\n      .join(' ')\n      .toLowerCase();\n  }\n\n  /**\n   * Highlight search matches\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {RegExp} regex - Search regex\n   */\n  highlightMatches(item, regex) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const text = target.textContent;\n      const words = this.afs.state.getState().search.query.split(' ');\n\n      let highlightedText = text;\n      words.forEach(word => {\n        if (!word) return;\n        const wordRegex = new RegExp(`(${word})`, 'gi');\n        highlightedText = highlightedText.replace(\n          wordRegex,\n          `<span class=\"${this.highlightClass}\">$1</span>`\n        );\n      });\n\n      target.innerHTML = highlightedText;\n    });\n  }\n\n  /**\n   * Remove highlights\n   * @private\n   * @param {HTMLElement} item - DOM element\n   */\n  removeHighlights(item) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const highlights = target.querySelectorAll(`.${this.highlightClass}`);\n      highlights.forEach(highlight => {\n        const text = highlight.textContent;\n        highlight.replaceWith(text);\n      });\n    });\n  }\n\n  /**\n   * Clear search\n   * @public\n   */\n  clearSearch() {\n    this.afs.logger.debug('Clearing search');\n\n    // Clear input\n    if (this.searchInput) {\n      this.searchInput.value = '';\n    }\n\n    // Clear state\n    this.afs.state.setState('search.query', '');\n\n    // Show all items\n    this.afs.items.forEach(item => {\n      this.afs.showItem(item);\n      this.removeHighlights(item);\n    });\n\n    // Update URL and emit event\n    this.afs.urlManager.updateURL();\n    this.afs.emit('searchCleared');\n\n    // Update counter\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Set search value\n   * @public\n   * @param {string} value - Search value\n   */\n  setValue(value) {\n    if (this.searchInput) {\n      this.searchInput.value = value;\n    }\n    this.search(value);\n  }\n\n  /**\n   * Get current search value\n   * @public\n   * @returns {string} Current search value\n   */\n  getValue() {\n    return this.afs.state.getState().search.query;\n  }\n\n  /**\n   * Update search configuration\n   * @public\n   * @param {Object} config - Search configuration\n   */\n  updateConfig({\n    searchKeys,\n    minSearchLength,\n    highlightClass,\n    debounceTime\n  } = {}) {\n    if (searchKeys) this.searchKeys = searchKeys;\n    if (minSearchLength) this.minSearchLength = minSearchLength;\n    if (highlightClass) this.highlightClass = highlightClass;\n    if (debounceTime) {\n      this.bindSearchEvents(); // Rebind with new debounce time\n    }\n  }\n\n  /**\n   * Destroy search functionality\n   * @public\n   */\n  destroy() {\n    if (this.searchInput) {\n      this.searchInput.removeEventListener('input', this.debouncedSearch);\n      this.searchInput.removeEventListener('search', this.handleClear);\n      this.searchInput.removeEventListener('keypress', this.handleEnter);\n    }\n    this.clearSearch();\n  }\n}","/**\n * @fileoverview Sort functionality for AFS\n */\n\nexport class Sort {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.sortButtons = new Map();\n    this.setupSort();\n  }\n\n  /**\n   * Setup sort functionality\n   * @private\n   */\n  setupSort() {\n    const sortSelector = this.afs.options.get(\"sortButtonSelector\");\n    if (!sortSelector) return;\n\n    // Find and setup sort buttons\n    document.querySelectorAll(sortSelector).forEach((button) => {\n      const key = button.dataset.sortKey;\n      if (!key) {\n        this.afs.logger.warn(\n          \"Sort button missing data-sort-key attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.sortButtons.set(button, {\n        key,\n        direction: button.dataset.sortDirection || \"asc\",\n      });\n\n      this.bindSortEvent(button);\n    });\n\n    this.afs.logger.debug(\"Sort functionality initialized\");\n  }\n\n  /**\n   * Bind sort event to button\n   * @private\n   * @param {HTMLElement} button - Sort button\n   */\n  bindSortEvent(button) {\n    this.afs.logger.debug(\"Binding sort event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const sortData = this.sortButtons.get(button);\n      if (!sortData) return;\n\n      // Toggle direction\n      sortData.direction = sortData.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.sortButtons.set(button, sortData);\n\n      // Update button state\n      this.updateSortButtonState(button, sortData);\n\n      // Perform sort\n      this.sort(sortData.key, sortData.direction);\n    });\n  }\n\n  /**\n   * Update sort button visual state\n   * @private\n   * @param {HTMLElement} button - Sort button\n   * @param {Object} sortData - Sort data\n   */\n  updateSortButtonState(button, sortData) {\n    // Remove active class from all buttons\n    this.sortButtons.forEach((_, btn) => {\n      btn.classList.remove(this.afs.options.get(\"activeSortClass\"));\n    });\n\n    // Add active class to current button\n    button.classList.add(this.afs.options.get(\"activeSortClass\"));\n\n    // Update direction indicator\n    const indicator = button.querySelector(\".sort-direction\");\n    if (indicator) {\n      indicator.textContent = sortData.direction === \"asc\" ? \"↑\" : \"↓\";\n    }\n  }\n\n  /**\n   * Sort items\n   * @public\n   * @param {string} key - Sort key\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   */\n  sort(key, direction = \"asc\") {\n    this.afs.logger.debug(`Sorting by ${key} in ${direction} order`);\n\n    try {\n      // Update state\n      this.afs.state.setState(\"sort.current\", { key, direction });\n\n      // Get all items as array\n      const items = Array.from(this.afs.items);\n\n      // Determine sort type\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, direction);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sort\", { key, direction });\n\n      this.afs.logger.info(`Sorted items by ${key} ${direction}`);\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from first item\n   * @private\n   * @param {HTMLElement} item - First item\n   * @param {string} key - Sort key\n   * @returns {string} Sort type\n   */\n  determineSortType(item, key) {\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Sort value\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value);\n      case \"date\":\n        return new Date(value).getTime();\n      default:\n        return value.toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} direction - Sort direction\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, direction) {\n    const modifier = direction === \"asc\" ? 1 : -1;\n\n    if (a === b) return 0;\n    if (a === undefined || a === null) return 1;\n    if (b === undefined || b === null) return -1;\n\n    return a > b ? modifier : -modifier;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const container = this.afs.options.get(\"container\");\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => fragment.appendChild(item));\n    container.appendChild(fragment);\n  }\n  /**\n   * Sort with multiple criteria\n   * @public\n   * @param {Array<{key: string, direction: string}>} criteria - Sort criteria\n   */\n  sortMultiple(criteria) {\n    this.afs.logger.debug(\"Sorting by multiple criteria:\", criteria);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      items.sort((a, b) => {\n        for (const { key, direction } of criteria) {\n          const type = this.determineSortType(items[0], key);\n          const valueA = this.getSortValue(a, key, type);\n          const valueB = this.getSortValue(b, key, type);\n\n          const comparison = this.compareValues(valueA, valueB, direction);\n          if (comparison !== 0) return comparison;\n        }\n        return 0;\n      });\n\n      this.reorderItems(items);\n\n      // Update state with primary sort\n      if (criteria.length > 0) {\n        this.afs.state.setState(\"sort.current\", criteria[0]);\n      }\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"multiSort\", { criteria });\n    } catch (error) {\n      this.afs.logger.error(\"Multiple sort error:\", error);\n    }\n  }\n\n  /**\n   * Sort with custom comparator\n   * @public\n   * @param {string} key - Sort key\n   * @param {Function} comparator - Custom comparison function\n   */\n  sortWithComparator(key, comparator) {\n    this.afs.logger.debug(`Sorting by ${key} with custom comparator`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      items.sort((a, b) => {\n        const valueA = a.dataset[key];\n        const valueB = b.dataset[key];\n        return comparator(valueA, valueB);\n      });\n\n      this.reorderItems(items);\n      this.afs.emit(\"customSort\", { key, comparator });\n    } catch (error) {\n      this.afs.logger.error(\"Custom sort error:\", error);\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      this.reorderItems(items);\n\n      // Clear current sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Update UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"shuffle\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Reset sort to default state\n   * @public\n   */\n  reset() {\n    this.afs.logger.debug(\"Resetting sort\");\n\n    // Clear sort state\n    this.afs.state.setState(\"sort.current\", null);\n\n    // Reset UI\n    this.sortButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n      const indicator = button.querySelector(\".sort-direction\");\n      if (indicator) indicator.textContent = \"\";\n    });\n\n    // Reset sort data\n    this.sortButtons.forEach((data, button) => {\n      data.direction = \"asc\";\n      this.sortButtons.set(button, data);\n    });\n\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"sortReset\");\n  }\n\n  /**\n   * Get current sort state\n   * @public\n   * @returns {Object|null} Current sort state\n   */\n  getCurrentSort() {\n    return this.afs.state.getState().sort.current;\n  }\n\n  /**\n   * Add sort button dynamically\n   * @public\n   * @param {HTMLElement} button - Sort button element\n   * @param {string} key - Sort key\n   * @param {string} [direction='asc'] - Initial sort direction\n   */\n  addSortButton(button, key, direction = \"asc\") {\n    if (!key) {\n      this.afs.logger.warn(\"Sort key required for new sort button\");\n      return;\n    }\n\n    this.sortButtons.set(button, { key, direction });\n    this.bindSortEvent(button);\n    this.afs.logger.debug(`Added sort button for ${key}`);\n  }\n\n  /**\n   * Remove sort button\n   * @public\n   * @param {HTMLElement} button - Sort button to remove\n   */\n  removeSortButton(button) {\n    if (this.sortButtons.has(button)) {\n      button.removeEventListener(\"click\", this.bindSortEvent);\n      this.sortButtons.delete(button);\n      this.afs.logger.debug(\"Removed sort button\");\n    }\n  }\n\n  /**\n   * Destroy sort functionality\n   * @public\n   */\n  destroy() {\n    this.sortButtons.forEach((_, button) => {\n      this.removeSortButton(button);\n    });\n    this.sortButtons.clear();\n    this.afs.logger.debug(\"Sort functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Pagination functionality for AFS\n */\nimport { Animation } from \"../styles/Animation.js\";\n\nexport class Pagination {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.container = null;\n    this.animation = new Animation(afs);\n    this.options = this.afs.options.get(\"pagination\");\n    this.setupPagination();\n  }\n\n  /**\n   * Setup pagination\n   * @private\n   */\n  setupPagination() {\n    this.afs.logger.debug(\"Setting up pagination\");\n    if (!this.afs.options.get('pagination.enabled')) return;\n    console.log('Pagination enabled');\n\n    this.container = document.createElement(\"div\");\n    this.container.className = this.options.containerClass;\n\n    const itemsContainer = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!itemsContainer) {\n      this.afs.logger.error(\"Items container not found.\");\n      return;\n    }\n    itemsContainer.appendChild(this.container);\n\n    // Initialize pagination state with defaults\n    this.afs.state.setState(\"pagination\", {\n      currentPage: 1,\n      itemsPerPage: this.options.itemsPerPage,\n      totalPages: 0,\n    });\n\n    this.bindEvents();\n    this.update();\n    this.afs.logger.debug(\"Pagination initialized\");\n  }\n\n  /**\n   * Bind pagination events\n   * @private\n   */\n  bindEvents() {\n    this.afs.on(\"filter\", () => this.update());\n    this.afs.on(\"search\", () => this.update());\n    this.afs.on(\"sort\", () => this.update());\n\n    this.container.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button\");\n      if (!button) return;\n\n      const page = button.dataset.page;\n      if (page) {\n        this.goToPage(parseInt(page, 10));\n      }\n    });\n  }\n\n  /**\n   * Update pagination\n   * @public\n   */\n  update() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    const itemsPerPage = this.afs.state.getState().pagination.itemsPerPage;\n    const totalPages = Math.max(\n      1,\n      Math.ceil(visibleItems.length / itemsPerPage),\n    );\n\n    // Update state\n    const currentState = this.afs.state.getState().pagination;\n    let currentPage = currentState.currentPage;\n\n    // Adjust current page if it's beyond the total pages\n    if (currentPage > totalPages) {\n      currentPage = totalPages;\n    }\n\n    // Update pagination state\n    this.afs.state.setState(\"pagination\", {\n      ...currentState,\n      currentPage,\n      totalPages,\n    });\n\n    // Update visibility before rendering pagination controls\n    this.updateVisibility(visibleItems);\n    this.renderPagination();\n    this.afs.urlManager.updateURL();\n\n    this.afs.emit(\"pagination\", {\n      currentPage,\n      totalPages,\n      itemsPerPage,\n      visibleItems: visibleItems.length,\n    });\n  }\n\n  /**\n   * Update items visibility based on current page\n   * @private\n   */\n  updateVisibility(visibleItems) {\n    const { currentPage, itemsPerPage } = this.afs.state.getState().pagination;\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n\n    // First hide all items\n    this.afs.items.forEach((item) => {\n      item.style.display = \"none\";\n      item.classList.add(this.afs.options.get(\"hiddenClass\"));\n    });\n\n    // Then show only the items for the current page\n    const itemsToShow = visibleItems.slice(startIndex, endIndex);\n\n    // Ensure we're not trying to display non-existent items\n    if (itemsToShow.length === 0 && visibleItems.length > 0) {\n      // If we have no items to show but we do have visible items,\n      // we're probably on an invalid page - go to page 1\n      this.goToPage(1);\n      return;\n    }\n\n    // Show items with animation\n    requestAnimationFrame(() => {\n      itemsToShow.forEach((item) => {\n        // Remove hidden class and restore display\n        item.style.display = \"\";\n        item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n        // Apply show animation in the next frame\n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(\n            item,\n            this.options.animationType || \"fade\",\n          );\n        });\n      });\n    });\n  }\n\n  /**\n   * Render pagination controls\n   * @private\n   */\n  renderPagination() {\n    const { currentPage, totalPages } = this.afs.state.getState().pagination;\n\n    this.container.innerHTML = \"\";\n\n    if (totalPages <= 1) {\n      this.container.style.display = \"none\";\n      return;\n    }\n\n    this.container.style.display = \"flex\";\n    const controls = this.createPaginationControls(currentPage, totalPages);\n    this.container.appendChild(controls);\n  }\n\n  /**\n   * Create pagination controls\n   * @private\n   * @param {number} currentPage - Current page\n   * @param {number} totalPages - Total pages\n   * @returns {DocumentFragment} Pagination controls\n   */\n  createPaginationControls(currentPage, totalPages) {\n    const fragment = document.createDocumentFragment();\n\n    if (this.options.showPrevNext) {\n      const prevButton = this.createPageButton(\"‹\", currentPage - 1, {\n        disabled: currentPage === 1,\n        class: \"afs-pagination-prev\",\n      });\n      fragment.appendChild(prevButton);\n    }\n\n    fragment.appendChild(\n      this.createPageButton(\"1\", 1, { active: currentPage === 1 }),\n    );\n\n    const range = this.calculatePageRange(currentPage, totalPages);\n\n    if (range.start > 2) fragment.appendChild(this.createEllipsis());\n\n    for (let i = range.start; i <= range.end; i++) {\n      if (i === 1 || i === totalPages) continue;\n      fragment.appendChild(\n        this.createPageButton(i.toString(), i, { active: currentPage === i }),\n      );\n    }\n\n    if (range.end < totalPages - 1) fragment.appendChild(this.createEllipsis());\n\n    if (totalPages > 1)\n      fragment.appendChild(\n        this.createPageButton(totalPages.toString(), totalPages, {\n          active: currentPage === totalPages,\n        }),\n      );\n\n    if (this.options.showPrevNext) {\n      const nextButton = this.createPageButton(\"›\", currentPage + 1, {\n        disabled: currentPage === totalPages,\n        class: \"afs-pagination-next\",\n      });\n      fragment.appendChild(nextButton);\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Create page button\n   * @private\n   */\n  createPageButton(\n    text,\n    page,\n    { active = false, disabled = false, class: className = \"\" } = {},\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = text;\n    button.dataset.page = page;\n    button.classList.add(this.options.pageButtonClass || \"afs-page-button\");\n\n    if (className) button.classList.add(className);\n    if (active)\n      button.classList.add(this.options.activePageClass || \"afs-page-active\");\n    if (disabled) button.disabled = true;\n\n    return button;\n  }\n\n  createEllipsis() {\n    const span = document.createElement(\"span\");\n    span.textContent = \"...\";\n    span.classList.add(\"afs-pagination-ellipsis\");\n    return span;\n  }\n\n  calculatePageRange(currentPage, totalPages) {\n    const maxButtons = this.options.maxButtons || 7;\n    const sideButtons = Math.floor((maxButtons - 3) / 2);\n\n    let start = Math.max(2, currentPage - sideButtons);\n    let end = Math.min(totalPages - 1, start + maxButtons - 3);\n\n    if (end - start < maxButtons - 3)\n      start = Math.max(2, end - (maxButtons - 3));\n\n    return { start, end };\n  }\n\n  /**\n   * Go to specific page\n   * @public\n   */\n  goToPage(page) {\n    const state = this.afs.state.getState().pagination;\n    const targetPage = Math.max(1, Math.min(page, state.totalPages));\n\n    if (targetPage === state.currentPage) return;\n\n    // Update state\n    this.afs.state.setState(\"pagination.currentPage\", targetPage);\n\n    // Force a reflow before updating\n    this.afs.container.offsetHeight;\n\n    // Update visibility and controls\n    this.update();\n\n    // Scroll to top if enabled\n    if (this.options.scrollToTop) {\n      setTimeout(() => this.scrollToTop(), 100);\n    }\n\n    // Emit page change event\n    this.afs.emit(\"pageChanged\", {\n      previousPage: state.currentPage,\n      currentPage: targetPage,\n      totalPages: state.totalPages,\n    });\n  }\n\n  scrollToTop() {\n    const container = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!container) {\n      this.afs.logger.warn(\"Scroll container not found.\");\n      return;\n    }\n\n    window.scrollTo({\n      top: container.offsetTop - this.options.scrollOffset,\n      behavior: \"smooth\",\n    });\n  }\n\n  /**\n   * Set pagination mode\n   * @public\n   */\n  setPaginationMode(enabled) {\n    this.afs.logger.debug(`Setting pagination mode to: ${enabled}`);\n    \n    // Update options\n    this.afs.options.set('pagination.enabled', enabled);\n    \n    if (enabled) {\n      // Enable pagination\n      this.setupPagination();\n    } else {\n      // Disable pagination and show all items\n      this.container.remove();\n      this.showAllItems();\n    }\n\n    // Emit event\n    this.afs.emit('paginationModeChanged', { enabled });\n  }\n\n  /**\n   * Show all items (for infinite scroll mode)\n   * @private\n   */\n  showAllItems() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    \n    requestAnimationFrame(() => {\n      visibleItems.forEach(item => {\n        item.style.display = '';\n        item.classList.remove(this.afs.options.get('hiddenClass'));\n        \n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(item, this.options.animationType || 'fade');\n        });\n      });\n    });\n  }\n}\n","/**\n * @fileoverview URL state management for AFS\n */\n\nexport class URLManager {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.defaultParams = new URLSearchParams();\n    this.setupPopStateHandler();\n    \n    // Load URL state after a small delay to ensure all features are ready\n    setTimeout(() => {\n      this.loadFromURL();\n    }, 0);\n  }\n\n  /**\n   * Setup history popstate handler\n   * @private\n   */\n  setupPopStateHandler() {\n    window.addEventListener('popstate', () => {\n      this.loadFromURL();\n    });\n  }\n\n  /**\n   * Update URL with current filter state\n   * @public\n   */\n  /**\n * Update URL with current filter state\n * @public\n */\nupdateURL() {\n  this.afs.logger.debug(\"Updating URL state\");\n  const params = new URLSearchParams();\n  const state = this.afs.state.getState();  // Get current state of filters\n\n  // Get active filters directly from the Filter instance\n  const activeFilters = this.afs.filter.getActiveFilters();\n\n  // Update the state object with the active filters\n  state.filters.current = activeFilters;\n\n  // Add filters to URL\n  this.addFiltersToURL(params, state);\n  \n  // Add ranges (if applicable) to URL\n  this.addRangesToURL(params, state);\n  \n  // Add search query to URL\n  this.addSearchToURL(params, state);\n  \n  // Add sort state to URL\n  this.addSortToURL(params, state);\n  \n  // Add pagination to URL\n  this.addPaginationToURL(params, state);\n  \n  // Push the updated URL\n  this.pushState(params);  // Push the new URL state to the browser\n}\n\n  /**\n   * Add filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addFiltersToURL(params, state) {\n    const filters = state.filters;\n\n    // Skip if only default filter is active\n    if (filters.current.size === 0 || \n        (filters.current.size === 1 && filters.current.has('*'))) {\n      return;\n    }\n\n    // Group filters by type\n    const filtersByType = {};\n    for (const filter of filters.current) {\n      if (filter !== '*') {\n        const [type, value] = filter.split(':');\n        if (!filtersByType[type]) {\n          filtersByType[type] = new Set();\n        }\n        filtersByType[type].add(value);\n      }\n    }\n\n    // Add filters to params\n    Object.entries(filtersByType).forEach(([type, values]) => {\n      params.set(type, Array.from(values).join(','));\n    });\n\n    // Add filter mode if not default\n    if (filters.mode !== 'OR') {\n      params.set('filterMode', filters.mode.toLowerCase());\n    }\n\n    // Add group mode if groups exist and mode isn't default\n    if (filters.groups.size > 0 && filters.groupMode !== 'OR') {\n      params.set('groupMode', filters.groupMode.toLowerCase());\n    }\n\n    // Add filter groups if they exist\n    filters.groups.forEach((group, groupId) => {\n      params.set(`group_${groupId}`, Array.from(group.filters).join(','));\n      if (group.operator !== 'OR') {\n        params.set(`groupOp_${groupId}`, group.operator.toLowerCase());\n      }\n    });\n  }\n\n  /**\n   * Add range filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addRangesToURL(params, state) {\n    // Handle numeric ranges\n    state.filters.ranges.forEach((range, key) => {\n      const { currentMin, currentMax } = range;\n      if (currentMin !== range.min || currentMax !== range.max) {\n        params.set(`range_${key}`, `${currentMin},${currentMax}`);\n      }\n    });\n\n    // Handle date ranges\n    state.filters.dateRanges.forEach((range, key) => {\n      const { start, end } = range;\n      params.set(`dateRange_${key}`, `${start.toISOString()},${end.toISOString()}`);\n    });\n  }\n\n  /**\n   * Add search parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSearchToURL(params, state) {\n    if (state.search.query) {\n      params.set('search', state.search.query);\n    }\n  }\n\n  /**\n   * Add sort parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSortToURL(params, state) {\n    if (state.sort.current) {\n      const { key, direction } = state.sort.current;\n      params.set('sort', `${key},${direction}`);\n    }\n  }\n\n  /**\n   * Add pagination parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addPaginationToURL(params, state) {\n    const { currentPage, itemsPerPage } = state.pagination;\n\n    if (!this.afs.options.get('pagination.enabled')) {\n      return;\n    }\n\n    if (currentPage > 1) {\n      params.set('page', currentPage.toString());\n    }\n    if (itemsPerPage !== this.afs.options.get('pagination.itemsPerPage')) {\n      params.set('perPage', itemsPerPage.toString());\n    }\n  }\n\n  /**\n   * Update browser URL\n   * @private\n   * @param {URLSearchParams} params\n   */\n  pushState(params) {\n    const queryString = params.toString();\n    const newURL = `${window.location.pathname}${queryString ? '?' + queryString : ''}`;\n    \n    // Only update if URL actually changed\n    if (newURL !== window.location.href) {\n      window.history.pushState({}, '', newURL);\n      this.afs.logger.debug('URL updated:', newURL);\n    }\n  }\n\n  /**\n * Load filter state from URL\n * @public\n */\nloadFromURL() {\n  this.afs.logger.debug('Loading state from URL');\n  const params = new URLSearchParams(window.location.search);\n\n  try {\n    // Clear existing state first\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n\n    // Process filter mode first\n    const filterMode = params.get('filterMode');\n    if (filterMode && this.afs.filter) {\n      this.afs.filter.setFilterMode(filterMode.toUpperCase());\n    }\n\n    // Process regular filters\n    const filterParams = Array.from(params.entries()).filter(([key]) => this.isRegularFilter(key));\n    if (filterParams.length > 0 && this.afs.filter) {\n      // Remove default '*' filter\n      this.afs.filter.activeFilters.clear();\n      \n      // Add filters and update button states\n      filterParams.forEach(([type, values]) => {\n        values.split(',').forEach(value => {\n          const filter = `${type}:${value}`;\n          this.afs.filter.activeFilters.add(filter);\n          \n          // Update button UI\n          this.afs.filter.filterButtons.forEach((buttonFilter, button) => {\n            if (buttonFilter === filter) {\n              button.classList.add(this.afs.options.get('activeClass'));\n            } else if (buttonFilter === '*') {\n              button.classList.remove(this.afs.options.get('activeClass'));\n            }\n          });\n        });\n      });\n    }\n\n    // Apply filters before processing other parameters\n    if (this.afs.filter) {\n      this.afs.filter.applyFilters();\n    }\n\n    // Process search\n    const searchQuery = params.get('search');\n    if (searchQuery && this.afs.search) {\n      this.afs.search.setValue(searchQuery);\n    }\n\n    // Process sort\n    const sortParam = params.get('sort');\n    if (sortParam && this.afs.sort) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.sort.sort(key, direction);\n    }\n\n    // Process pagination\n    const page = parseInt(params.get('page'));\n    if (!isNaN(page) && this.afs.pagination) {\n      this.afs.pagination.goToPage(page);\n    }\n\n    this.afs.emit('urlStateLoaded', { params: Object.fromEntries(params) });\n    this.afs.logger.info('State loaded from URL');\n  } catch (error) {\n    this.afs.logger.error('Error loading state from URL:', error);\n    // Reset to default state on error\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n}\n  \n  /**\n   * Process filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processFiltersFromURL(params) {\n    const state = this.afs.state.getState();\n    let hasFilters = false;\n\n    // Process filter mode\n    const filterMode = params.get('filterMode');\n    if (filterMode) {\n      state.filters.mode = filterMode.toUpperCase();\n    }\n\n    // Process group mode\n    const groupMode = params.get('groupMode');\n    if (groupMode) {\n      state.filters.groupMode = groupMode.toUpperCase();\n    }\n\n    // Process regular filters\n    for (const [type, values] of params.entries()) {\n      if (this.isRegularFilter(type)) {\n        values.split(',').filter(Boolean).forEach(value => {\n          hasFilters = true;\n          state.filters.current.add(`${type}:${value}`);\n        });\n      }\n    }\n\n    // Process filter groups\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('group_')) {\n        const groupId = key.replace('group_', '');\n        const operator = params.get(`groupOp_${groupId}`)?.toUpperCase() || 'OR';\n        state.filters.groups.set(groupId, {\n          filters: new Set(value.split(',')),\n          operator\n        });\n      }\n    }\n\n    // Set default if no filters\n    if (!hasFilters && state.filters.groups.size === 0) {\n      state.filters.current.add('*');\n    }\n  }\n\n  /**\n   * Process range filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processRangesFromURL(params) {\n    const state = this.afs.state.getState();\n\n    // Process numeric ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('range_')) {\n        const rangeKey = key.replace('range_', '');\n        const [min, max] = value.split(',').map(Number);\n        state.filters.ranges.set(rangeKey, { currentMin: min, currentMax: max });\n      }\n    }\n\n    // Process date ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('dateRange_')) {\n        const rangeKey = key.replace('dateRange_', '');\n        const [start, end] = value.split(',').map(str => new Date(str));\n        state.filters.dateRanges.set(rangeKey, { start, end });\n      }\n    }\n  }\n\n  /**\n   * Process search from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSearchFromURL(params) {\n    const searchQuery = params.get('search') || '';\n    this.afs.state.setState('search.query', searchQuery);\n    \n    if (this.afs.options.get('searchInput')) {\n      this.afs.options.get('searchInput').value = searchQuery;\n    }\n  }\n\n  /**\n   * Process sort from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSortFromURL(params) {\n    const sortParam = params.get('sort');\n    if (sortParam) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.state.setState('sort.current', { key, direction });\n    }\n  }\n\n  /**\n   * Process pagination from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processPaginationFromURL(params) {\n    const page = parseInt(params.get('page')) || 1;\n    const perPage = parseInt(params.get('perPage')) || \n                   this.afs.options.get('pagination.itemsPerPage');\n\n    this.afs.state.setState('pagination', {\n      currentPage: page,\n      itemsPerPage: perPage\n    });\n  }\n\n  /**\n   * Check if parameter is a regular filter\n   * @private\n   * @param {string} param - Parameter name\n   * @returns {boolean}\n   */\n  isRegularFilter(param) {\n    const excludedParams = [\n      'search', 'sort', 'page', 'perPage', 'filterMode', 'groupMode'\n    ];\n    return !excludedParams.includes(param) && \n           !param.startsWith('group_') && \n           !param.startsWith('groupOp_') && \n           !param.startsWith('range_') && \n           !param.startsWith('dateRange_');\n  }\n\n  /**\n   * Clear URL parameters\n   * @public\n   */\n  clearURL() {\n    window.history.pushState({}, '', window.location.pathname);\n    this.afs.state.reset();\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n\n  /**\n   * Get current URL parameters\n   * @public\n   * @returns {URLSearchParams}\n   */\n  getURLParams() {\n    return new URLSearchParams(window.location.search);\n  }\n\n  /**\n   * Check if URL has parameters\n   * @public\n   * @returns {boolean}\n   */\n  hasParams() {\n    return window.location.search.length > 1;\n  }\n\n  /**\n   * Get parameter value\n   * @public\n   * @param {string} param - Parameter name\n   * @returns {string|null}\n   */\n  getParam(param) {\n    return new URLSearchParams(window.location.search).get(param);\n  }\n}","/**\n * @fileoverview Range filter implementation for AFS\n */\n\nimport { debounce } from \"../utils\";\nimport { StyleManager } from \"../styles/StyleManager\";\n\nexport class RangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n    this.options = this.afs.options.get(\"slider\");\n    if (!this.afs.styleManager) {\n      this.afs.styleManager = new StyleManager(this.afs.options);\n    }\n\n    // Apply styles immediately\n    this.afs.styleManager.applyStyles();\n  }\n\n  /**\n   * @typedef {Object} RangeOptions\n   * @property {string} key - Data attribute key\n   * @property {string} type - Type of range ('number' or 'date')\n   * @property {HTMLElement} container - Container element\n   * @property {number|string} [min] - Minimum value\n   * @property {number|string} [max] - Maximum value\n   * @property {number} [step] - Step value\n   */\n\n  /**\n   * Add range slider\n   * @param {RangeOptions} options - Range slider options\n   */\n  addRangeSlider({ key, type, container, min, max, step = 1, ui }) {\n    this.afs.logger.debug(`Adding range slider for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error(\"Container element required for range slider\");\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key, type);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Get global UI options and merge with slider-specific options\n    const globalUiOptions = this.afs.options.get(\"styles.slider.ui\") || {\n      showHistogram: false,\n      bins: 10,\n    };\n    const sliderUiOptions = {\n      ...globalUiOptions,\n      ...ui, // Override with slider-specific options if provided\n    };\n\n    // Only calculate histogram data if enabled\n    const histogramData = sliderUiOptions.showHistogram\n      ? this.calculateHistogramData(key, sliderUiOptions.bins)\n      : { counts: [], binEdges: [], max: 0 };\n\n    // Create slider elements\n    const elements = this.createSliderElements(histogramData, sliderUiOptions);\n    const state = this.initializeState(min, max, step, type);\n\n    // Store histogram data and UI options in state\n    state.ui = sliderUiOptions;\n    if (sliderUiOptions.showHistogram) {\n      state.histogram = histogramData;\n    }\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateSliderUI(key);\n\n    // Setup histogram highlight updates only if enabled\n    if (sliderUiOptions.showHistogram) {\n      this.setupHistogramHighlight(elements, state, histogramData.binEdges);\n    }\n\n    this.afs.logger.info(`Range slider added for ${key}`);\n  }\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key, type) {\n    const values = Array.from(this.afs.items)\n      .map((item) => {\n        const value = item.dataset[key];\n        return type === \"date\" ? new Date(value).getTime() : parseFloat(value);\n      })\n      .filter((value) => !isNaN(value));\n\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n    };\n  }\n\n  /**\n   * Create slider DOM elements\n   * @private\n   * @param {Object} histogramData - Histogram data\n   * @param {Object} sliderUiOptions - UI options for this slider\n   */\n  createSliderElements(histogramData, sliderUiOptions) {\n    const styles =\n      this.afs.options.get(\"styles\") || this.afs.styleManager.defaultStyles;\n    const colors = styles.colors || this.afs.styleManager.defaultStyles.colors;\n    const sliderOptions = this.afs.options.get(\"slider\") || {};\n\n    const container = document.createElement(\"div\");\n    container.className = \"afs-range-container\";\n\n    const slider = document.createElement(\"div\");\n    slider.className = sliderOptions.containerClass;\n\n    const track = document.createElement(\"div\");\n    track.className = sliderOptions.trackClass;\n\n    // Only add histogram if enabled in the slider-specific options\n    if (sliderUiOptions?.showHistogram && histogramData?.counts?.length > 0) {\n      const histogram = this.createHistogramBars(histogramData, colors);\n      slider.appendChild(histogram);\n    }\n\n    const selectedRange = document.createElement(\"div\");\n    selectedRange.className = sliderOptions.selectedClass;\n\n    const minThumb = document.createElement(\"div\");\n    minThumb.className = sliderOptions.thumbClass;\n\n    const maxThumb = document.createElement(\"div\");\n    maxThumb.className = sliderOptions.thumbClass;\n\n    const minValue = document.createElement(\"div\");\n    minValue.className = sliderOptions.valueClass;\n\n    const maxValue = document.createElement(\"div\");\n    maxValue.className = sliderOptions.valueClass;\n\n    // Build the slider\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n\n    container.appendChild(slider);\n\n    return {\n      container,\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    };\n  }\n\n  // Add helper method for creating histogram\n  createHistogram(data, colors) {\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    // Create histogram bars\n    data.forEach((value, index) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${value}%`;\n      bar.style.backgroundColor = colors.histogram;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Calculate histogram data from items\n   * @private\n   * @param {string} key - Data attribute key (e.g., 'price')\n   * @param {number} [bins=10] - Number of bins for histogram\n   * @returns {Object} Histogram data and metadata\n   */\n  calculateHistogramData(key, bins = 10) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map((item) => parseFloat(item.dataset[key]))\n        .filter((value) => !isNaN(value));\n\n      if (values.length === 0) {\n        return { counts: [], binEdges: [], max: 0 };\n      }\n\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const binWidth = (max - min) / bins;\n\n      const counts = new Array(bins).fill(0);\n      const binEdges = new Array(bins + 1);\n\n      // Calculate bin edges\n      for (let i = 0; i <= bins; i++) {\n        binEdges[i] = min + i * binWidth;\n      }\n\n      // Count values in each bin\n      values.forEach((value) => {\n        if (value === max) {\n          counts[counts.length - 1]++;\n          return;\n        }\n\n        const binIndex = Math.floor((value - min) / binWidth);\n        counts[binIndex]++;\n      });\n\n      // Normalize heights to be more subtle\n      const maxCount = Math.max(...counts);\n      const normalizedCounts = counts.map(\n        (count) => Math.max(20, Math.round((count / maxCount) * 100)), // Minimum height of 20%\n      );\n\n      return {\n        counts: normalizedCounts,\n        binEdges,\n        max: maxCount,\n        min,\n        max,\n      };\n    } catch (error) {\n      this.afs.logger.error(\"Error calculating histogram:\", error);\n      return { counts: [], binEdges: [], max: 0 };\n    }\n  }\n\n  /**\n   * Setup histogram highlight on range changes\n   * @private\n   */\n  setupHistogramHighlight(elements, state, binEdges) {\n    const bars = elements.slider.querySelectorAll(\".afs-histogram-bar\");\n\n    const updateHistogram = () => {\n      const minVal = state.currentMin;\n      const maxVal = state.currentMax;\n\n      bars.forEach((bar, index) => {\n        const binStart = binEdges[index];\n        const binEnd = binEdges[index + 1];\n\n        // Highlight bars within the selected range\n        if (binStart >= minVal && binEnd <= maxVal) {\n          bar.classList.add(\"active\");\n        } else {\n          bar.classList.remove(\"active\");\n        }\n      });\n    };\n\n    // Update histogram on range changes using AFS instance\n    this.afs.on(\"rangeFilter\", () => updateHistogram());\n\n    // Initial update\n    updateHistogram();\n  }\n\n  /**\n   * Create histogram bars\n   * @private\n   */\n  createHistogramBars(histogramData, colors) {\n    const { counts } = histogramData;\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    counts.forEach((height) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${height}%`;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Initialize slider state\n   * @private\n   */\n  initializeState(min, max, step, type) {\n    return {\n      min,\n      max,\n      currentMin: min,\n      currentMax: max,\n      step,\n      type,\n      isDragging: false,\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    const {\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    } = elements;\n\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n    container.appendChild(slider);\n  }\n\n  /**\n   * Setup event handlers for slider\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minThumb, maxThumb } = elements;\n\n    const handleStart = (isMin) => (e) => {\n      e.preventDefault(); // Prevent scrolling while dragging on mobile\n      state.isDragging = true;\n      \n      // Get the correct event coordinates whether mouse or touch\n      const getEventXY = (event) => {\n        return event.touches ? event.touches[0] : event;\n      };\n\n      const moveHandler = (moveEvent) => {\n        const evt = getEventXY(moveEvent);\n        this.createMoveHandler(elements, state, key, isMin)(evt);\n      };\n\n      const stopHandler = () => {\n        state.isDragging = false;\n        \n        // Remove both mouse and touch event listeners\n        window.removeEventListener('mousemove', moveHandler);\n        window.removeEventListener('mouseup', stopHandler);\n        window.removeEventListener('touchmove', moveHandler);\n        window.removeEventListener('touchend', stopHandler);\n        window.removeEventListener('touchcancel', stopHandler);\n        \n        this.applyFilter(key);\n      };\n\n      // Add both mouse and touch event listeners\n      window.addEventListener('mousemove', moveHandler);\n      window.addEventListener('mouseup', stopHandler);\n      window.addEventListener('touchmove', moveHandler, { passive: false });\n      window.addEventListener('touchend', stopHandler);\n      window.addEventListener('touchcancel', stopHandler);\n    };\n\n    // Add both mouse and touch event listeners to thumbs\n    minThumb.addEventListener('mousedown', handleStart(true));\n    minThumb.addEventListener('touchstart', handleStart(true), { passive: false });\n    maxThumb.addEventListener('mousedown', handleStart(false));\n    maxThumb.addEventListener('touchstart', handleStart(false), { passive: false });\n  }\n\n  /**\n   * Update slider UI\n   * @private\n   */\n  updateSliderUI(key) {\n    const { state, elements } = this.activeRanges.get(key);\n    const { minThumb, maxThumb, selectedRange, minValue, maxValue } = elements;\n\n    // Calculate positions with padding consideration\n    const range = state.max - state.min;\n    const minPos = ((state.currentMin - state.min) / range) * 100;\n    const maxPos = ((state.currentMax - state.min) / range) * 100;\n\n    // Ensure thumbs stay within bounds\n    const clampedMinPos = Math.max(0, Math.min(minPos, 100));\n    const clampedMaxPos = Math.max(0, Math.min(maxPos, 100));\n\n    // Position thumbs\n    minThumb.style.left = `${clampedMinPos}%`;\n    maxThumb.style.left = `${clampedMaxPos}%`;\n\n    // Position selected range\n    selectedRange.style.left = `${clampedMinPos}%`;\n    selectedRange.style.width = `${clampedMaxPos - clampedMinPos}%`;\n\n    // Format values\n    const formatValue =\n      state.type === \"date\"\n        ? (value) => new Date(value).toLocaleDateString()\n        : (value) => value.toFixed(2);\n\n    // Update value labels\n    minValue.textContent = formatValue(state.currentMin);\n    maxValue.textContent = formatValue(state.currentMax);\n\n    // Position value labels considering bounds\n    minValue.style.left = `${clampedMinPos}%`;\n    maxValue.style.left = `${clampedMaxPos}%`;\n\n    // Handle edge cases for value label positioning\n    if (clampedMinPos < 5) {\n      minValue.style.transform = \"translateX(0)\";\n    } else if (clampedMinPos > 95) {\n      minValue.style.transform = \"translateX(-100%)\";\n    } else {\n      minValue.style.transform = \"translateX(-50%)\";\n    }\n\n    if (clampedMaxPos < 5) {\n      maxValue.style.transform = \"translateX(0)\";\n    } else if (clampedMaxPos > 95) {\n      maxValue.style.transform = \"translateX(-100%)\";\n    } else {\n      maxValue.style.transform = \"translateX(-50%)\";\n    }\n  }\n\n  // Also update the createMoveHandler to respect the padding\n  createMoveHandler(elements, state, key, isMin) {\n    this.afs.logger.debug(`Creating move handler for ${key}`);\n\n    const { track } = elements;\n    const PADDING = 5;\n\n    return debounce((e) => {\n      const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n      const rect = track.getBoundingClientRect();\n      const totalWidth = rect.width;\n      const paddingPixels = (PADDING / 100) * totalWidth;\n\n      // Calculate percent with padding consideration\n      const rawPercent =\n        (clientX - rect.left - paddingPixels) /\n        (totalWidth - 2 * paddingPixels);\n      const percent = Math.min(Math.max(0, rawPercent), 1);\n\n      // Calculate value considering the full range\n      const value = state.min + (state.max - state.min) * percent;\n      const stepped = Math.round(value / state.step) * state.step;\n\n      if (isMin) {\n        state.currentMin = Math.min(stepped, state.currentMax);\n      } else {\n        state.currentMax = Math.max(stepped, state.currentMin);\n      }\n\n      this.updateSliderUI(key);\n    }, 16); // ~60fps\n  }\n\n  /**\n   * Apply range filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.debug(`Applying range filter for ${key}`);\n\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach((item) => {\n      const value =\n        state.type === \"date\"\n          ? new Date(item.dataset[key]).getTime()\n          : parseFloat(item.dataset[key]);\n\n      if (value >= state.currentMin && value <= state.currentMax) {\n        this.afs.showItem(item);\n      } else {\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"rangeFilter\", {\n      key,\n      min: state.currentMin,\n      max: state.currentMax,\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRangeValues(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax,\n      type: range.state.type,\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRangeValues(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateSliderUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove range slider\n   * @param {string} key - Range key\n   */\n  removeRangeSlider(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.slider.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Range slider removed for ${key}`);\n  }\n}\n","/**\n * @fileoverview Date filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class DateFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeDateRanges = new Map();\n    this.defaultFormat = this.afs.options.get('dateFormat') || 'YYYY-MM-DD';\n  }\n\n  /**\n   * @typedef {Object} DateRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {Date} [minDate] - Minimum date\n   * @property {Date} [maxDate] - Maximum date\n   * @property {string} [format] - Date format (default: YYYY-MM-DD)\n   */\n\n  /**\n   * Add date range filter\n   * @param {DateRangeOptions} options - Date range options\n   */\n  addDateRange({ key, container, minDate, maxDate, format = this.defaultFormat }) {\n    this.afs.logger.debug(`Adding date range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for date range');\n      return;\n    }\n\n    // Calculate min/max dates if not provided\n    const dates = this.calculateMinMaxDates(key);\n    minDate = minDate ?? dates.min;\n    maxDate = maxDate ?? dates.max;\n\n    // Create date picker elements\n    const elements = this.createDateElements();\n    const state = this.initializeState(minDate, maxDate, format);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeDateRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateDateUI(key);\n\n    this.afs.logger.info(`Date range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max dates from items\n   * @private\n   */\n  calculateMinMaxDates(key) {\n    try {\n      const validDates = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const date = new Date(item.dataset[key]);\n          return isNaN(date.getTime()) ? null : date;\n        })\n        .filter(date => date !== null);\n  \n      if (validDates.length === 0) {\n        // Return default date range if no valid dates found\n        const today = new Date();\n        return {\n          min: new Date(today.getFullYear(), 0, 1), // January 1st of current year\n          max: new Date(today.getFullYear(), 11, 31) // December 31st of current year\n        };\n      }\n  \n      return {\n        min: new Date(Math.min(...validDates)),\n        max: new Date(Math.max(...validDates))\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating date range:', error);\n      // Return default date range on error\n      const today = new Date();\n      return {\n        min: new Date(today.getFullYear(), 0, 1),\n        max: new Date(today.getFullYear(), 11, 31)\n      };\n    }\n  }\n\n  /**\n   * Create date picker elements\n   * @private\n   */\n  createDateElements() {\n    this.afs.logger.debug('Creating date picker elements');\n\n    const container = document.createElement('div');\n    container.className = 'afs-date-range-container';\n\n    const startContainer = document.createElement('div');\n    startContainer.className = 'afs-date-input-wrapper';\n    \n    const startLabel = document.createElement('label');\n    startLabel.textContent = 'Start Date';\n    \n    const startInput = document.createElement('input');\n    startInput.type = 'date';\n    startInput.className = 'afs-date-input start-date';\n\n    const endContainer = document.createElement('div');\n    endContainer.className = 'afs-date-input-wrapper';\n    \n    const endLabel = document.createElement('label');\n    endLabel.textContent = 'End Date';\n    \n    const endInput = document.createElement('input');\n    endInput.type = 'date';\n    endInput.className = 'afs-date-input end-date';\n\n    startContainer.appendChild(startLabel);\n    startContainer.appendChild(startInput);\n    endContainer.appendChild(endLabel);\n    endContainer.appendChild(endInput);\n\n    container.appendChild(startContainer);\n    container.appendChild(endContainer);\n\n    return {\n      container,\n      startInput,\n      endInput\n    };\n  }\n\n  /**\n   * Initialize date filter state\n   * @private\n   */\n  initializeState(minDate, maxDate, format) {\n    return {\n      minDate,\n      maxDate,\n      currentStartDate: minDate,\n      currentEndDate: maxDate,\n      format\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    this.afs.logger.debug(`Setting up event handlers for date range ${key}`);\n\n    const { startInput, endInput } = elements;\n\n    const handleDateChange = debounce(() => {\n      const startDate = new Date(startInput.value);\n      const endDate = new Date(endInput.value);\n\n      if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n        state.currentStartDate = startDate;\n        state.currentEndDate = endDate;\n        this.applyDateFilter(key);\n      }\n    }, 300);\n\n    startInput.addEventListener('change', handleDateChange);\n    endInput.addEventListener('change', handleDateChange);\n  }\n\n  /**\n   * Update date picker UI\n   * @private\n   */\n  updateDateUI(key) {\n    try {\n      const { state, elements } = this.activeDateRanges.get(key);\n      const { startInput, endInput } = elements;\n  \n      // Format dates for input\n      const formatDate = date => {\n        try {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) {\n            throw new Error('Invalid date');\n          }\n          return d.toISOString().split('T')[0];\n        } catch (error) {\n          this.afs.logger.error('Error formatting date:', error);\n          return '';\n        }\n      };\n  \n      // Set min/max constraints\n      startInput.min = formatDate(state.minDate);\n      startInput.max = formatDate(state.maxDate);\n      endInput.min = formatDate(state.minDate);\n      endInput.max = formatDate(state.maxDate);\n  \n      // Set current values\n      startInput.value = formatDate(state.currentStartDate);\n      endInput.value = formatDate(state.currentEndDate);\n    } catch (error) {\n      this.afs.logger.error('Error updating date UI:', error);\n    }\n  }\n\n  /**\n   * Apply date filter\n   * @private\n   */\n  applyDateFilter(key) {\n    this.afs.logger.info(`Applying date filter for ${key}`);\n    const { state } = this.activeDateRanges.get(key);\n  \n    this.afs.items.forEach(item => {\n      try {\n        // Check if item and dataset exist\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        const itemDate = new Date(item.dataset[key]);\n        \n        // Check if date is valid\n        if (isNaN(itemDate.getTime())) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        // Set time to midnight for consistent comparison\n        const startDate = new Date(state.currentStartDate);\n        startDate.setHours(0, 0, 0, 0);\n        \n        const endDate = new Date(state.currentEndDate);\n        endDate.setHours(23, 59, 59, 999);\n        \n        const compareDate = new Date(itemDate);\n        compareDate.setHours(0, 0, 0, 0);\n  \n        if (compareDate >= startDate && compareDate <= endDate) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item by date:', error);\n        this.afs.hideItem(item);\n      }\n    });\n  \n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('dateFilter', {\n      key,\n      startDate: state.currentStartDate,\n      endDate: state.currentEndDate\n    });\n  }\n\n  /**\n   * Get current date range\n   * @param {string} key - Date range key\n   * @returns {Object} Current date range\n   */\n  getDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return null;\n\n    return {\n      startDate: range.state.currentStartDate,\n      endDate: range.state.currentEndDate\n    };\n  }\n\n  /**\n   * Set date range\n   * @param {string} key - Date range key\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   */\n  setDateRange(key, startDate, endDate) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.state.currentStartDate = startDate;\n    range.state.currentEndDate = endDate;\n    this.updateDateUI(key);\n    this.applyDateFilter(key);\n  }\n\n  /**\n   * Remove date range\n   * @param {string} key - Date range key\n   */\n  removeDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeDateRanges.delete(key);\n    this.afs.logger.info(`Date range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Advanced Filter System - Main Class\n */\nimport { Logger } from \"./core/Logger\";\nimport { Options } from \"./core/Options\";\nimport { State } from \"./core/State\";\nimport { StyleManager } from \"./styles/StyleManager\";\nimport { EventEmitter } from \"./core/EventEmitter\";\n\nimport { Filter } from \"./features/Filter\";\nimport { InputRangeFilter } from \"./features/InputRangeFilter\";\nimport { Search } from \"./features/Search\";\nimport { Sort } from \"./features/Sort\";\nimport { Pagination } from \"./features/Pagination\";\nimport { URLManager } from \"./features/URLManager\";\nimport { RangeFilter } from \"./features/RangeFilter\";\nimport { DateFilter } from \"./features/DateFilter\";\n\nimport { debounce } from \"./utils\";\n\n// Version\nexport const VERSION = '1.1.0';\n\nexport class AFS extends EventEmitter {\n  /**\n   * @param {Object} options - Configuration options\n   */\n  constructor(options = {}) {\n    super();\n    this.initializeCore(options);\n  }\n\n  /**\n   * Initialize core components\n   * @private\n   */\n  initializeCore(options) {\n    try {\n      this.options = new Options(options);\n      this.logger = new Logger(\n        this.options.get(\"debug\") || false,\n        this.options.get(\"logLevel\") || \"info\",\n      );\n      this.state = new State();\n      this.styleManager = new StyleManager(this.options);\n\n      this.initializeDOM();\n      this.initializeFeatures();\n      this.setupLifecycle();\n    } catch (error) {\n      console.error(\"AFS initialization error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize DOM elements\n   * @private\n   */\n  initializeDOM() {\n    this.logger.debug(\"Initializing DOM elements\");\n\n    this.container = document.querySelector(\n      this.options.get(\"containerSelector\"),\n    );\n    if (!this.container) {\n      throw new Error(\n        `Container not found: ${this.options.get(\"containerSelector\")}`,\n      );\n    }\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    if (this.items.length === 0) {\n      this.logger.warn(\"No items found in container\");\n    }\n\n    this.state.setState(\"items.total\", this.items.length);\n    this.state.setState(\"items.visible\", new Set(this.items));\n  }\n\n  /**\n   * Initialize features\n   * @private\n   */\n  initializeFeatures() {\n    this.logger.debug(\"Initializing features\");\n\n    // Then initialize other features\n    this.filter = new Filter(this);\n    this.search = new Search(this);\n    this.sort = new Sort(this);\n    this.rangeFilter = new RangeFilter(this);\n    this.urlManager = new URLManager(this);\n    this.dateFilter = new DateFilter(this);\n    this.pagination = new Pagination(this);\n    this.inputRangeFilter = new InputRangeFilter(this);\n\n    // Apply styles\n    this.styleManager.applyStyles();\n\n    // Load initial state from URL\n    this.urlManager.loadFromURL();\n  }\n\n  /**\n   * Setup lifecycle events\n   * @private\n   */\n  setupLifecycle() {\n    if (this.options.get(\"responsive\")) {\n      window.addEventListener(\"resize\", this.handleResize.bind(this));\n    }\n\n    if (this.options.get(\"preserveState\")) {\n      document.addEventListener(\n        \"visibilitychange\",\n        this.handleVisibilityChange.bind(this),\n      );\n    }\n\n    if (this.options.get(\"observeDOM\")) {\n      this.setupMutationObserver();\n    }\n\n    this.emit(\"initialized\", {\n      itemCount: this.items.length,\n      options: this.options.export(),\n    });\n  }\n\n  // Item Management Methods\n  /**\n   * Show item with animation\n   * @public\n   * @param {HTMLElement} item - Item to show\n   */\n  showItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.add(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Remove hidden class but keep opacity 0 initially\n    item.classList.remove(this.options.get(\"hiddenClass\"));\n\n    // Set initial animation state\n    item.style.opacity = \"0\";\n    item.style.transform = \"scale(0.95)\";\n    item.style.display = \"\"; // Ensure item is not display: none\n\n    // Force reflow before starting animation\n    item.offsetHeight;\n\n    // Add transition class if not present\n    const transitionClass =\n      this.options.get(\"transitionClass\") || \"afs-transition\";\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start animation in next frame\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        // Double RAF for reliable animation\n        item.style.opacity = \"1\";\n        item.style.transform = \"scale(1)\";\n      });\n    });\n\n    // Clean up after animation\n    const duration = this.options.get(\"animationDuration\") || 300;\n    setTimeout(() => {\n      // Only clean up if item is still meant to be visible\n      if (visibleItems.has(item)) {\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Hide item with animation\n   * @public\n   * @param {HTMLElement} item - Item to hide\n   */\n  hideItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.delete(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Add transition class if not present\n    const transitionClass =\n      this.options.get(\"transitionClass\") || \"afs-transition\";\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start hide animation\n    requestAnimationFrame(() => {\n      item.style.opacity = \"0\";\n      item.style.transform = \"scale(0.95)\";\n    });\n\n    // Add hidden class and clean up after animation\n    const duration = this.options.get(\"animationDuration\") || 300;\n    setTimeout(() => {\n      // Only hide if the item is still meant to be hidden\n      if (!visibleItems.has(item)) {\n        item.classList.add(this.options.get(\"hiddenClass\"));\n        // Clean up styles\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Add new items\n   * @public\n   */\n  addItems(newItems) {\n    const items = Array.isArray(newItems) ? newItems : [newItems];\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => {\n      fragment.appendChild(item);\n      this.state.getState().items.visible.add(item);\n    });\n\n    this.container.appendChild(fragment);\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.filter.applyFilters();\n  }\n\n  /**\n   * Remove items\n   * @public\n   */\n  removeItems(itemsToRemove) {\n    const items = Array.isArray(itemsToRemove)\n      ? itemsToRemove\n      : [itemsToRemove];\n    const visibleItems = this.state.getState().items.visible;\n\n    items.forEach((item) => {\n      visibleItems.delete(item);\n      item.remove();\n    });\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.updateCounter();\n  }\n\n  // State Management Methods\n  /**\n   * Save current state\n   * @public\n   */\n  saveState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    const state = {\n      filters: Array.from(this.filter.getActiveFilters()),\n      search: this.search.getValue(),\n      sort: this.sort.getCurrentSort(),\n      pagination: this.pagination.getPageInfo(),\n      timestamp: Date.now(),\n    };\n\n    localStorage.setItem(\"afs_state\", JSON.stringify(state));\n    this.logger.debug(\"State saved\");\n  }\n\n  /**\n   * Restore saved state\n   * @public\n   */\n  restoreState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    try {\n      const saved = localStorage.getItem(\"afs_state\");\n      if (!saved) return;\n\n      const state = JSON.parse(saved);\n      if (Date.now() - state.timestamp > this.options.get(\"stateExpiry\")) {\n        localStorage.removeItem(\"afs_state\");\n        return;\n      }\n\n      this.setState(state);\n      this.logger.debug(\"State restored\");\n    } catch (error) {\n      this.logger.error(\"Error restoring state:\", error);\n    }\n  }\n\n  /**\n   * Get current state\n   * @public\n   */\n  getState() {\n    return this.state.export();\n  }\n\n  /**\n   * Set new state\n   * @public\n   */\n  setState(newState) {\n    this.state.import(newState);\n    this.refresh();\n  }\n\n  // Update Methods\n  /**\n   * Update counter display\n   * @public\n   */\n  updateCounter() {\n    // Get counter element\n    const counterElement = document.querySelector(\n      this.options.get(\"counterSelector\"),\n    );\n    if (!counterElement) return;\n\n    try {\n      // Get count values\n      const total = this.items.length;\n      const visible = this.state.getState().items.visible.size;\n      const filtered = total - visible;\n\n      // Get counter options with defaults\n      const counterOpts =\n        this.options.get(\"counter\") || Options.defaults.counter;\n      const template = counterOpts.template || \"Showing {visible} of {total}\";\n      const formatter =\n        counterOpts.formatter || ((num) => num.toLocaleString());\n\n      // Format numbers\n      const formattedVisible = formatter(visible);\n      const formattedTotal = formatter(total);\n      const formattedFiltered = formatter(filtered);\n\n      // Build counter text\n      let counterText = template\n        .replace(\"{visible}\", formattedVisible)\n        .replace(\"{total}\", formattedTotal)\n        .replace(\"{filtered}\", formattedFiltered);\n\n      // Add filtered count if enabled\n      if (filtered > 0 && counterOpts.showFiltered) {\n        const filteredTemplate =\n          counterOpts.filteredTemplate || \"({filtered} filtered)\";\n        counterText +=\n          \" \" + filteredTemplate.replace(\"{filtered}\", formattedFiltered);\n      }\n\n      // Show no results message if applicable\n      if (visible === 0 && counterOpts.noResultsTemplate) {\n        counterText = counterOpts.noResultsTemplate;\n      }\n\n      // Update counter element\n      counterElement.textContent = counterText;\n\n      // Emit event\n      this.emit(\"counterUpdated\", {\n        total,\n        visible,\n        filtered,\n        formattedTotal,\n        formattedVisible,\n        formattedFiltered,\n      });\n    } catch (error) {\n      // Fallback to basic counter if anything fails\n      this.logger.error(\"Error updating counter:\", error);\n      counterElement.textContent = `${\n        this.state.getState().items.visible.size\n      }/${this.items.length}`;\n    }\n  }\n\n  /**\n   * Update options\n   * @public\n   */\n  updateOptions(newOptions) {\n    this.options.update(newOptions);\n    this.styleManager.updateStyles(newOptions);\n    this.refresh();\n  }\n\n  /**\n   * Refresh system\n   * @public\n   */\n  refresh() {\n    this.logger.debug(\"Refreshing AFS\");\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.state.setState(\"items.total\", this.items.length);\n\n    this.filter.applyFilters();\n    this.search.search(this.search.getValue());\n    this.pagination.update();\n\n    this.emit(\"refreshed\", { itemCount: this.items.length });\n  }\n\n  // Event Handlers\n  /**\n   * Handle resize\n   * @private\n   */\n  handleResize = debounce(() => {\n    this.emit(\"resize\");\n    this.refresh();\n  }, 250);\n\n  /**\n   * Handle visibility change\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.emit(\"hidden\");\n      this.saveState();\n    } else {\n      this.emit(\"visible\");\n      this.restoreState();\n    }\n  }\n\n  /**\n   * Setup mutation observer\n   * @private\n   */\n  setupMutationObserver() {\n    const observer = new MutationObserver((mutations) => {\n      if (mutations.some((mutation) => mutation.type === \"childList\")) {\n        this.refresh();\n      }\n    });\n\n    observer.observe(this.container, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  // Utility Methods\n  /**\n   * Get version\n   * @public\n   */\n  getVersion() {\n    return VERSION;\n  }\n\n  /**\n   * Check feature support\n   * @public\n   */\n  isFeatureSupported(feature) {\n    const supportedFeatures = {\n      search: !!this.search,\n      pagination: true,\n      animation:\n        typeof document.createElement(\"div\").style.transition !== \"undefined\",\n      urlState: typeof window.history.pushState === \"function\",\n      localStorage: (() => {\n        try {\n          localStorage.setItem(\"test\", \"test\");\n          localStorage.removeItem(\"test\");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      })(),\n    };\n\n    return !!supportedFeatures[feature];\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.logger.debug(\"Destroying AFS instance\");\n\n    // Remove event listeners\n    window.removeEventListener(\"resize\", this.handleResize);\n    document.removeEventListener(\n      \"visibilitychange\",\n      this.handleVisibilityChange,\n    );\n\n    // Destroy features\n    this.filter.destroy();\n    this.search.destroy();\n    this.sort.destroy();\n    this.pagination.destroy();\n    this.rangeFilter.destroy();\n\n    // Cleanup\n    this.styleManager.removeStyles();\n    this.state.reset();\n    localStorage.removeItem(\"afs_state\");\n\n    // Reset items\n    this.items.forEach((item) => {\n      item.style = \"\";\n      item.classList.remove(\n        this.options.get(\"hiddenClass\"),\n        this.options.get(\"activeClass\"),\n      );\n    });\n\n    this.emit(\"destroyed\");\n  }\n}\n"],"names":["Logger","constructor","debug","logLevel","this","enabled","level","levels","error","warn","info","_log","args","Date","toISOString","toUpperCase","setDebugMode","hasOwnProperty","Options","static","containerSelector","itemSelector","filterButtonSelector","searchInputSelector","counterSelector","activeClass","hiddenClass","filterMode","searchKeys","debounceTime","dateFormat","counter","template","showFiltered","filteredTemplate","noResultsTemplate","formatter","num","toLocaleString","styles","slider","ui","showHistogram","bins","track","radius","background","thumb","size","histogram","bar","pagination","button","border","borderRadius","padding","color","active","hover","colors","primary","text","containerClass","trackClass","thumbClass","valueClass","selectedClass","itemsPerPage","container","pageButtonClass","activePageClass","scrollToTop","scrollOffset","scrollBehavior","animation","type","duration","easing","inClass","outClass","userOptions","options","mergeOptions","defaults","initializeStyles","validate","defaultStyles","currentStyles","target","source","result","key","Array","isArray","undefined","requiredSelectors","selector","Error","includes","length","get","path","split","reduce","obj","set","value","parts","last","pop","update","updates","reset","export","State","state","filters","current","Set","groups","Map","ranges","dateRanges","mode","groupMode","search","query","keys","sort","orders","items","visible","total","currentPage","totalPages","getState","setState","i","from","entries","import","importedState","StyleManager","styleElement","createBaseStyles","animationDuration","animationEasing","createRangeStyles","sliderOptions","sliderStyles","createDateStyles","createInputRangeStyles","applyStyles","createPaginationStyles","createSearchStyles","textContent","document","createElement","head","appendChild","fallbackStyles","paginationOptions","buttonClass","paginationStyles","searchClass","updateStyles","newOptions","removeStyles","remove","EventEmitter","events","onceEvents","on","eventName","callback","has","add","off","once","onceWrapper","apply","delete","emit","forEach","removeAllListeners","clear","listenerCount","Animation","afs","animations","fade","in","opacity","transform","transitionTimingFunction","out","slide","scale","rotate","flip","zoom","bounce","blur","filter","skew","slideInLeft","slideInRight","fadeInUp","fadeInDown","bounceIn","applyShowAnimation","item","animationType","style","display","requestAnimationFrame","Object","assign","transition","applyHideAnimation","handleTransitionEnd","removeEventListener","addEventListener","setAnimation","Filter","filterButtons","activeFilters","currentFilters","filterGroups","sortOrders","setupFilters","logger","filterSelector","querySelectorAll","filterValue","dataset","bindFilterEvent","setLogic","logic","applyFilters","clearAllFilters","_","classList","allButton","findAllButton","urlManager","updateURL","resetFilters","toggleFilter","animationPromises","promise","Promise","resolve","setTimeout","push","visibleItems","all","then","updateCounter","handleFilterClick","contains","previouslyVisible","itemMatchesFilters","parseFloat","emitFilterEvents","itemCategories","categories","itemMatchesFilterGroups","itemMatchesAnyFilter","itemMatchesAllFilters","some","every","groupMatches","values","map","group","operator","matches","nowVisible","added","removed","addFilterGroup","groupId","validOperator","removeFilterGroup","setGroupMode","validMode","addFilter","removeFilter","setFilterMode","getActiveFilters","getFilterGroups","addFilterButton","sortWithOrder","newOrder","sortType","determineSortType","a","b","valueA","getSortValue","valueB","compareValues","reorderItems","order","shuffle","j","Math","floor","random","itemCount","isNaN","test","getTime","toLowerCase","comparison","fragment","createDocumentFragment","getCurrentSortOrder","clearSortOrders","checkbox","checked","setValue","refresh","removeFilterButton","destroy","debounce","func","wait","immediate","timeout","context","callNow","clearTimeout","later","InputRangeFilter","activeRanges","addInputRange","min","max","step","label","calculateMinMax","elements","createInputElements","initializeState","appendElements","setupEventHandlers","updateInputUI","className","labelElement","minWrapper","minLabel","minInput","maxWrapper","maxLabel","maxInput","currentMin","currentMax","handleInputChange","minValue","maxValue","applyFilter","hideItem","itemValue","showItem","getRange","range","setRange","removeInputRange","Search","searchInput","minSearchLength","highlightClass","setupSearch","searchSelector","querySelector","bindSearchEvents","debouncedSearch","e","clearSearch","preventDefault","normalizedQuery","normalizeQuery","regex","createSearchRegex","searchText","getItemSearchText","highlightMatches","removeHighlights","trim","replace","pattern","Boolean","word","join","RegExp","words","highlightedText","wordRegex","innerHTML","highlight","replaceWith","getValue","updateConfig","handleClear","handleEnter","Sort","sortButtons","setupSort","sortSelector","sortKey","direction","sortDirection","bindSortEvent","sortData","updateSortButtonState","btn","indicator","modifier","sortMultiple","criteria","sortWithComparator","comparator","data","getCurrentSort","addSortButton","removeSortButton","Pagination","setupPagination","itemsContainer","bindEvents","closest","page","goToPage","parseInt","ceil","currentState","updateVisibility","renderPagination","startIndex","endIndex","itemsToShow","slice","controls","createPaginationControls","showPrevNext","prevButton","createPageButton","disabled","class","calculatePageRange","start","createEllipsis","end","nextButton","span","maxButtons","targetPage","previousPage","window","scrollTo","top","offsetTop","behavior","setPaginationMode","showAllItems","URLManager","defaultParams","URLSearchParams","setupPopStateHandler","loadFromURL","params","addFiltersToURL","addRangesToURL","addSearchToURL","addSortToURL","addPaginationToURL","pushState","filtersByType","queryString","newURL","location","pathname","href","history","filterParams","isRegularFilter","buttonFilter","searchQuery","sortParam","fromEntries","processFiltersFromURL","hasFilters","startsWith","processRangesFromURL","rangeKey","Number","str","processSearchFromURL","processSortFromURL","processPaginationFromURL","perPage","param","clearURL","getURLParams","hasParams","getParam","RangeFilter","styleManager","addRangeSlider","sliderUiOptions","histogramData","calculateHistogramData","counts","binEdges","createSliderElements","updateSliderUI","setupHistogramHighlight","createHistogramBars","selectedRange","minThumb","maxThumb","createHistogram","index","height","backgroundColor","binWidth","fill","maxCount","count","round","bars","updateHistogram","minVal","maxVal","isDragging","handleStart","isMin","moveHandler","moveEvent","evt","event","touches","createMoveHandler","stopHandler","passive","maxPos","clampedMinPos","clampedMaxPos","left","width","formatValue","toLocaleDateString","toFixed","clientX","rect","getBoundingClientRect","totalWidth","paddingPixels","PADDING","stepped","getRangeValues","setRangeValues","removeRangeSlider","DateFilter","activeDateRanges","defaultFormat","addDateRange","minDate","maxDate","format","dates","calculateMinMaxDates","createDateElements","updateDateUI","validDates","date","today","getFullYear","startContainer","startLabel","startInput","endContainer","endLabel","endInput","currentStartDate","currentEndDate","handleDateChange","startDate","endDate","applyDateFilter","formatDate","d","itemDate","setHours","compareDate","getDateRange","setDateRange","removeDateRange","VERSION","AFS","super","initializeCore","initializeDOM","initializeFeatures","setupLifecycle","rangeFilter","dateFilter","inputRangeFilter","handleResize","bind","handleVisibilityChange","setupMutationObserver","transitionClass","addItems","newItems","removeItems","itemsToRemove","saveState","getPageInfo","timestamp","now","localStorage","setItem","JSON","stringify","restoreState","saved","getItem","parse","removeItem","newState","counterElement","filtered","counterOpts","formattedVisible","formattedTotal","formattedFiltered","counterText","updateOptions","hidden","MutationObserver","mutations","mutation","observe","childList","subtree","getVersion","isFeatureSupported","feature","urlState"],"mappings":"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"}