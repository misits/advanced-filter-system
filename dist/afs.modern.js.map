{"version":3,"file":"afs.modern.js","sources":["../src/core/Logger.js","../src/core/Options.js","../src/core/State.js","../src/styles/StyleManager.js","../src/core/EventEmitter.js","../src/styles/Animation.js","../src/features/Filter.js","../src/utils/index.js","../src/features/InputRangeFilter.js","../src/features/Search.js","../src/features/Sort.js","../src/features/Pagination.js","../src/features/URLManager.js","../src/features/RangeFilter.js","../src/features/DateFilter.js","../src/AFS.js"],"sourcesContent":["/**\n * @fileoverview Logging system for AFS\n */\n\nexport class Logger {\n  constructor(debug = false, logLevel = 'info') {\n    this.enabled = debug;\n    this.level = logLevel;\n    this.levels = {\n      error: 0,\n      warn: 1,\n      info: 2,\n      debug: 3\n    };\n\n    // Immediately log initialization if debug is enabled\n    if (this.enabled) {\n      console.debug(`[AFS DEBUG] Logger initialized with level: ${logLevel}`);\n    }\n  }\n\n  /**\n   * Internal log method\n   * @private\n   */\n  _log(level, ...args) {\n    // Always log errors regardless of debug mode\n    if (level === 'error' || this.enabled) {\n      const currentLevelValue = this.levels[this.level];\n      const messageLevel = this.levels[level];\n\n      if (messageLevel <= currentLevelValue) {\n        const timestamp = new Date().toLocaleTimeString();\n        const prefix = `[AFS ${level.toUpperCase()}]`;\n\n        // Ensure console methods exist\n        const consoleMethod = console[level] || console.log;\n        consoleMethod.apply(console, [prefix, timestamp, ...args]);\n      }\n    }\n  }\n\n  /**\n   * Log error message\n   * @public\n   */\n  error(...args) {\n    // Errors always get logged\n    this._log('error', ...args);\n  }\n\n  /**\n   * Log warning message\n   * @public\n   */\n  warn(...args) {\n    this._log('warn', ...args);\n  }\n\n  /**\n   * Log info message\n   * @public\n   */\n  info(...args) {\n    this._log('info', ...args);\n  }\n\n  /**\n   * Log debug message\n   * @public\n   */\n  debug(...args) {\n    this._log('debug', ...args);\n  }\n\n  /**\n   * Enable or disable debug mode\n   * @public\n   */\n  setDebugMode(enabled, level = 'info') {\n    const previousState = this.enabled;\n    this.enabled = Boolean(enabled);\n    \n    if (this.levels.hasOwnProperty(level)) {\n      this.level = level;\n    }\n\n    // Log state change if either previous or new state is enabled\n    if (this.enabled || previousState) {\n      this._log('info', \n        `Debug mode ${this.enabled ? 'enabled' : 'disabled'} with level: ${this.level}`\n      );\n    }\n  }\n\n  /**\n   * Get current debug state\n   * @public\n   * @returns {Object} Current logger state\n   */\n  getState() {\n    return {\n      enabled: this.enabled,\n      level: this.level\n    };\n  }\n}","/**\n * @fileoverview Configuration management for AFS\n */\n\nexport class Options {\n  /**\n   * @typedef {Object} AFSOptions\n   * @property {string} containerSelector - Main container selector\n   * @property {string} itemSelector - Items to filter selector\n   * @property {string} filterButtonSelector - Filter buttons selector\n   * @property {string} filterDropdownSelector - Filter dropdown selector\n   * @property {string} searchInputSelector - Search input selector\n   * @property {string} counterSelector - Results counter selector\n   * @property {string} sortButtonSelector - Sort buttons selector\n   * @property {string} activeClass - Active state class\n   * @property {string} hiddenClass - Hidden state class\n   * @property {string} activeSortClass - Active sort button class\n   * @property {string} transitionClass - Transition animation class\n   * @property {number} animationDuration - Animation duration in ms\n   * @property {string} filterMode - Filter mode ('OR' or 'AND')\n   * @property {string} groupMode - Group filter mode ('OR' or 'AND')\n   * @property {string[]} searchKeys - Data attributes to search in\n   * @property {number} debounceTime - Search debounce delay in ms\n   * @property {boolean} debug - Enable debug mode\n   * @property {string} logLevel - Log level\n   * @property {string} dateFormat - Date format\n   * @property {Object} counter - Counter-related options\n   * @property {Object} styles - Style-related options\n   * @property {boolean} responsive - Enable responsive mode\n   * @property {boolean} preserveState - Preserve state between sessions\n   * @property {number} stateExpiry - State expiry time in milliseconds\n   * @property {boolean} observeDOM - Observe DOM changes\n   */\n\n  /**\n   * @type {AFSOptions}\n   */\n  static defaults = {\n    // Selectors\n    containerSelector: \".afs-filter-container\",\n    itemSelector: \".afs-filter-item\",\n    filterButtonSelector: \".afs-btn-filter\",\n    filterDropdownSelector: \".afs-filter-dropdown\",\n    searchInputSelector: \".afs-filter-search\",\n    counterSelector: \".afs-filter-counter\",\n    sortButtonSelector: \".afs-btn-sort\",\n\n    // Classes\n    activeClass: \"active\",\n    hiddenClass: \"hidden\",\n    activeSortClass: \"sort-active\",\n    transitionClass: \"afs-transition\",\n\n    // Filtering\n    filterMode: \"OR\",\n    groupMode: \"AND\",\n    filterCategoryMode: \"mixed\", // New: 'mixed' (OR within categories, AND between), 'AND', or 'OR'\n    filterTypeLogic: {}, // New: Configure logic per filter type (e.g., { brand: 'OR', category: 'AND' })\n    searchKeys: [\"title\"],\n    debounceTime: 300,\n\n    // Debug\n    debug: false,\n    logLevel: \"info\",\n\n    // Lifecycle and state\n    responsive: true,\n    preserveState: false,\n    stateExpiry: 86400000, // 24 hours in milliseconds\n    observeDOM: false,\n\n    // Date handling\n    dateFormat: \"YYYY-MM-DD\",\n\n    counter: {\n      template: \"Showing {visible} of {total}\",\n      showFiltered: true,\n      filteredTemplate: \"({filtered} filtered)\",\n      noResultsTemplate: \"No items found\",\n      formatter: (num) => num.toLocaleString(),\n    },\n\n    // Styles\n    styles: {\n      slider: {\n        // Add new UI options\n        ui: {\n          showHistogram: false,\n          bins: 10, // Number of bins for histogram\n          track: {\n            radius: \"0\", // Button radius\n            background: \"#e5e7eb\", // Track color\n          },\n          selected: {\n            background: \"#000\", // Selected color\n          },\n          thumb: {\n            radius: \"50%\", // Button radius\n            size: \"16px\", // Button size\n            background: \"#000\", // Button color\n          },\n          histogram: {\n            background: \"#e5e7eb\", // Histogram background\n            bar: {\n              background: \"#000\", // Bar color\n            },\n          },\n        },\n      },\n      pagination: {\n        ui: {\n          button: {\n            background: \"transparent\",\n            border: \"1px solid #000\",\n            borderRadius: \"4px\",\n            padding: \"8px 12px\",\n            color: \"#000\",\n            active: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n            hover: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n          },\n        },\n      },\n      colors: {\n        primary: \"#000\",\n        background: \"#e5e7eb\",\n        text: \"#000\",\n        textHover: \"#fff\",\n      },\n    },\n\n    // Slider\n    slider: {\n      containerClass: \"afs-range-slider\",\n      trackClass: \"afs-range-track\",\n      thumbClass: \"afs-range-thumb\",\n      valueClass: \"afs-range-value\",\n      selectedClass: \"afs-range-selected\",\n    },\n\n    // Pagination\n    pagination: {\n      enabled: false,\n      itemsPerPage: 10,\n      container: \".afs-pagination-container\",\n      pageButtonClass: \"afs-page-button\",\n      activePageClass: \"afs-page-active\",\n      containerClass: \"afs-pagination\",\n      scrollToTop: false,\n      scrollOffset: 50,\n      scrollBehavior: \"smooth\", // or 'auto' for instant scroll\n    },\n\n    // Animation\n    animation: {\n      type: \"fade\",\n      duration: 300,\n      easing: \"ease-out\",\n      inClass: \"afs-animation-enter\",\n      outClass: \"afs-animation-leave\",\n    },\n  };\n\n  /**\n   * Create Options instance\n   * @param {Object} userOptions - User-provided options to override defaults\n   * @throws {Error} If required options are missing or invalid\n   */\n  constructor(userOptions = {}) {\n    this.options = this.mergeOptions(Options.defaults, userOptions);\n    this.initializeStyles();\n    this.validate();\n  }\n\n  /**\n   * Initialize styles with defaults\n   * @private\n   */\n  initializeStyles() {\n    const defaultStyles = Options.defaults.styles;\n    const currentStyles = this.options.styles || {};\n\n    this.options.styles = this.mergeOptions(defaultStyles, currentStyles);\n\n    // Ensure colors object exists and has all required properties\n    this.options.styles.colors = {\n      ...defaultStyles.colors,\n      ...(currentStyles.colors || {}),\n    };\n  }\n\n  /**\n   * Deep merge options\n   * @private\n   * @param {Object} target - Target object\n   * @param {Object} source - Source object\n   * @returns {Object} Merged options\n   */\n  mergeOptions(target, source) {\n    const result = { ...target };\n\n    for (const key in source) {\n      if (\n        source[key] !== null &&\n        typeof source[key] === \"object\" &&\n        !Array.isArray(source[key])\n      ) {\n        // If the key doesn't exist in target or isn't an object, create/override it\n        if (!target[key] || typeof target[key] !== \"object\") {\n          result[key] = {};\n        }\n        // Recursively merge nested objects\n        result[key] = this.mergeOptions(result[key], source[key]);\n      } else if (source[key] !== undefined) {\n        // Only override if the source value is defined\n        result[key] = source[key];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate options\n   * @private\n   * @throws {Error} If options are invalid\n   */\n  validate() {\n    // Required selectors\n    const requiredSelectors = [\"containerSelector\", \"itemSelector\"];\n    for (const selector of requiredSelectors) {\n      if (typeof this.options[selector] !== \"string\") {\n        throw new Error(`${selector} must be a string`);\n      }\n    }\n\n    // Animation duration\n    if (\n      typeof this.options.animation?.duration !== \"number\" ||\n      this.options.animation?.duration < 0\n    ) {\n      throw new Error(\"animation.duration must be a positive number\");\n    }\n\n    // Filter mode\n    if (![\"OR\", \"AND\"].includes(this.options.filterMode.toUpperCase())) {\n      throw new Error('filterMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Filter category mode\n    if (![\"MIXED\", \"OR\", \"AND\"].includes(this.options.filterCategoryMode?.toUpperCase() || \"MIXED\")) {\n      throw new Error('filterCategoryMode must be \"mixed\", \"OR\", or \"AND\"');\n    }\n\n    // Group mode\n    if (![\"OR\", \"AND\"].includes(this.options.groupMode.toUpperCase())) {\n      throw new Error('groupMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Search keys\n    if (\n      !Array.isArray(this.options.searchKeys) ||\n      this.options.searchKeys.length === 0\n    ) {\n      throw new Error(\"searchKeys must be a non-empty array\");\n    }\n\n    // Counter validation\n    if (this.options.counter) {\n      if (typeof this.options.counter.template !== \"string\") {\n        throw new Error(\"counter.template must be a string\");\n      }\n      if (typeof this.options.counter.showFiltered !== \"boolean\") {\n        this.options.counter.showFiltered = true; // Set default\n      }\n      if (typeof this.options.counter.formatter !== \"function\") {\n        this.options.counter.formatter = (num) => num.toLocaleString(); // Set default\n      }\n    } else {\n      this.options.counter = { ...Options.defaults.counter }; // Set defaults if missing\n    }\n  }\n\n  /**\n   * Get option value\n   * @param {string} path - Dot notation path to option\n   * @returns {any} Option value\n   */\n  get(path) {\n    return path.split(\".\").reduce((obj, key) => obj?.[key], this.options);\n  }\n\n  /**\n   * Set option value\n   * @param {string} path - Dot notation path to option\n   * @param {any} value - New value\n   */\n  set(path, value) {\n    const parts = path.split(\".\");\n    const last = parts.pop();\n    const target = parts.reduce((obj, key) => {\n      if (!(key in obj)) obj[key] = {};\n      return obj[key];\n    }, this.options);\n\n    target[last] = value;\n    this.validate();\n  }\n\n  /**\n   * Update multiple options\n   * @param {Object} updates - Options to update\n   */\n  update(updates) {\n    this.options = this.mergeOptions(this.options, updates);\n    this.validate();\n  }\n\n  /**\n   * Reset options to defaults\n   */\n  reset() {\n    this.options = { ...Options.defaults };\n  }\n\n  /**\n   * Export options\n   * @returns {Object} Current options\n   */\n  export() {\n    return { ...this.options };\n  }\n}\n","/**\n * @fileoverview State management for AFS\n */\n\nexport class State {\n  constructor() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n\n  /**\n   * Get current state\n   * @returns {Object} Current state\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Update state\n   * @param {string} path - Dot notation path to update\n   * @param {any} value - New value\n   */\n  setState(path, value) {\n    const parts = path.split('.');\n    let current = this.state;\n    \n    for (let i = 0; i < parts.length - 1; i++) {\n      if (!(parts[i] in current)) {\n        current[parts[i]] = {};\n      }\n      current = current[parts[i]];\n    }\n    \n    current[parts[parts.length - 1]] = value;\n  }\n\n  /**\n   * Export state\n   * @returns {Object} Exportable state\n   */\n  export() {\n    return {\n      filters: {\n        current: Array.from(this.state.filters.current),\n        groups: Array.from(this.state.filters.groups.entries()),\n        ranges: Array.from(this.state.filters.ranges.entries()),\n        dateRanges: Array.from(this.state.filters.dateRanges.entries()),\n        mode: this.state.filters.mode,\n        groupMode: this.state.filters.groupMode\n      },\n      search: { ...this.state.search },\n      sort: { ...this.state.sort },\n      pagination: { ...this.state.pagination }\n    };\n  }\n\n  /**\n   * Import state\n   * @param {Object} importedState - State to import\n   */\n  import(importedState) {\n    if (importedState.filters) {\n      this.state.filters.current = new Set(importedState.filters.current);\n      this.state.filters.groups = new Map(importedState.filters.groups);\n      this.state.filters.ranges = new Map(importedState.filters.ranges);\n      this.state.filters.dateRanges = new Map(importedState.filters.dateRanges);\n      this.state.filters.mode = importedState.filters.mode;\n      this.state.filters.groupMode = importedState.filters.groupMode;\n    }\n\n    if (importedState.search) {\n      this.state.search = { ...importedState.search };\n    }\n\n    if (importedState.sort) {\n      this.state.sort = { ...importedState.sort };\n    }\n\n    if (importedState.pagination) {\n      this.state.pagination = { ...importedState.pagination };\n    }\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  reset() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n}","/**\n * @fileoverview Style management for AFS\n */\n\nexport class StyleManager {\n  /**\n   * @param {import('../core/Options').Options} options - Options instance\n   */\n  constructor(options) {\n    this.options = options;\n    this.styleElement = null;\n  }\n\n  /**\n   * Create base styles with option colors\n   * @private\n   * @returns {string} CSS styles\n   */\n  createBaseStyles() {\n    const hiddenClass = this.options.get(\"hiddenClass\") || \"hidden\";\n    const itemSelector = this.options.get(\"itemSelector\") || \".afs-filter-item\";\n    const filterButtonSelector =\n      this.options.get(\"filterButtonSelector\") || \".afs-btn-filter\";\n    const activeClass = this.options.get(\"activeClass\") || \"active\";\n    const animationDuration = this.options.get(\"animation.duration\") || \"300ms\";\n    const animationEasing = this.options.get(\"animation.easing\") || \"ease-out\";\n    const filterDropdownSelector =\n      this.options.get(\"filterDropdownSelector\") || \".afs-filter-dropdown\";\n\n    // Get colors from options\n    const primaryColor = this.options.get(\"styles.colors.primary\") || \"#000\";\n    const backgroundColor =\n      this.options.get(\"styles.colors.background\") || \"#e5e7eb\";\n    const textColor = this.options.get(\"styles.colors.text\") || \"#000\";\n    const textHoverColor = this.options.get(\"styles.colors.textHover\") || \"#fff\";\n\n    // Get button and dropdown styles from options\n    const buttonStyles = this.options.get(\"styles.button\") || {};\n    const dropdownStyles = this.options.get(\"styles.dropdown\") || {};\n    const checkboxStyles = this.options.get(\"styles.checkbox\") || {};\n    const radioStyles = this.options.get(\"styles.radio\") || {};\n\n    // Common button and dropdown properties\n    const buttonPadding = buttonStyles.padding || \"4px 8px\";\n    const dropdownPadding = dropdownStyles.padding || \"4px 32px 4px 8px\";\n    const buttonBorder = buttonStyles.border || `1px solid ${backgroundColor}`;\n    const dropdownBorder = dropdownStyles.border || `1px solid ${backgroundColor}`;\n    const buttonBorderRadius = buttonStyles.borderRadius || \"4px\";\n    const dropdownBorderRadius = dropdownStyles.borderRadius || \"4px\";\n    const buttonFontSize = buttonStyles.fontSize || \"14px\";\n    const dropdownFontSize = dropdownStyles.fontSize || \"14px\";\n    const buttonFontFamily = buttonStyles.fontFamily || \"inherit\";\n    const dropdownFontFamily = dropdownStyles.fontFamily || \"inherit\";\n    const buttonFontWeight = buttonStyles.fontWeight || \"normal\";\n    const dropdownFontWeight = dropdownStyles.fontWeight || \"normal\";\n    const buttonLineHeight = buttonStyles.lineHeight || \"1.5\";\n    const dropdownLineHeight = dropdownStyles.lineHeight || \"1.5\";\n    const buttonLetterSpacing = buttonStyles.letterSpacing || \"normal\";\n    const dropdownLetterSpacing = dropdownStyles.letterSpacing || \"normal\";\n    const buttonTextTransform = buttonStyles.textTransform || \"none\";\n    const dropdownTextTransform = dropdownStyles.textTransform || \"none\";\n    const buttonBoxShadow = buttonStyles.boxShadow || \"none\";\n    const dropdownBoxShadow = dropdownStyles.boxShadow || \"none\";\n    const buttonBackgroundColor = buttonStyles.background || \"transparent\";\n    const dropdownBackgroundColor = dropdownStyles.background || \"transparent\";\n    const buttonTextColor = buttonStyles.color || textColor;\n    const dropdownTextColor = dropdownStyles.color || textColor;\n\n    // Common checkbox styles\n    const checkboxBorder = checkboxStyles.border || `1px solid ${backgroundColor}`;\n    const checkboxBorderRadius = checkboxStyles.borderRadius || \"4px\";\n    const checkboxBackgroundColor = checkboxStyles.background || \"transparent\";\n    const checkboxTextColor = checkboxStyles.color || textColor;\n    const checkboxPadding = checkboxStyles.padding || \"8px\";\n    const checkboxHeight = checkboxStyles.height || \"20px\";\n    const checkboxWidth = checkboxStyles.width || \"20px\";\n    const checkboxActiveBorder = checkboxStyles.activeBorder || \"none\";\n\n    // Common radio styles\n    const radioBorder = radioStyles.border || `1px solid ${backgroundColor}`;\n    const radioBorderRadius = radioStyles.borderRadius || \"50%\";\n    const radioBackgroundColor = radioStyles.background || \"transparent\";\n    const radioTextColor = radioStyles.color || textColor;\n    const radioPadding = radioStyles.padding || \"8px\";\n    const radioHeight = radioStyles.height || \"20px\";\n    const radioWidth = radioStyles.width || \"20px\";\n    const radioActiveBorder = radioStyles.activeBorder || \"none\";\n\n    // Create rgba version of primary color for focus shadow\n    const rgbValues = primaryColor.match(\n      /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n    );\n    const rgbaColor = rgbValues\n      ? `rgba(${parseInt(rgbValues[1], 16)}, ${parseInt(\n          rgbValues[2],\n          16\n        )}, ${parseInt(rgbValues[3], 16)}, 0.2)`\n      : \"rgba(0, 0, 0, 0.2)\";\n\n    // Create SVG arrow with dynamic color\n    const arrowColor = encodeURIComponent(textColor);\n    const arrowSvg = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='${arrowColor}' d='M6 8L1 3h10z'/%3E%3C/svg%3E`;\n    const arrowSvgWhite = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='${textHoverColor}' d='M6 8L1 3h10z'/%3E%3C/svg%3E`;\n\n    return `\n    /* Hidden state */\n    .${hiddenClass} {\n      display: none !important;\n    }\n\n    /* Filterable items */\n    ${itemSelector} {\n      opacity: 1;\n      transform: scale(1);\n      filter: blur(0);\n      transition: opacity ${animationDuration} ${animationEasing},\n                  transform ${animationDuration} ${animationEasing},\n                  filter ${animationDuration} ${animationEasing};\n    }\n\n    ${itemSelector}.${hiddenClass} {\n      opacity: 0;\n      transform: scale(0.95);\n      filter: blur(5px);\n    }\n\n    /* Common styles for both buttons and dropdowns */\n    ${filterButtonSelector} {\n      appearance: none;\n      -webkit-appearance: none;\n      padding: ${buttonPadding};\n      border: ${buttonBorder};\n      border-radius: ${buttonBorderRadius};\n      font-size: ${buttonFontSize};\n      font-family: ${buttonFontFamily};\n      font-weight: ${buttonFontWeight};\n      letter-spacing: ${buttonLetterSpacing};\n      text-transform: ${buttonTextTransform};\n      background-color: ${buttonBackgroundColor};\n      color: ${buttonTextColor};\n      cursor: pointer;\n      transition: all ${animationDuration} ${animationEasing};\n      line-height: ${buttonLineHeight};\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      white-space: nowrap;\n      margin: 0;\n      box-shadow: ${buttonBoxShadow};\n    }\n\n    ${filterDropdownSelector} {\n      appearance: none;\n      -webkit-appearance: none;\n      padding: ${dropdownPadding};\n      border: ${dropdownBorder};\n      border-radius: ${dropdownBorderRadius};\n      font-size: ${dropdownFontSize};\n      font-family: ${dropdownFontFamily};\n      font-weight: ${dropdownFontWeight};\n      letter-spacing: ${dropdownLetterSpacing};\n      text-transform: ${dropdownTextTransform};\n      background-color: ${dropdownBackgroundColor};\n      color: ${dropdownTextColor};\n      cursor: pointer;\n      transition: all ${animationDuration} ${animationEasing};\n      line-height: ${dropdownLineHeight};\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      white-space: nowrap;\n      margin: 0;\n      box-shadow: ${dropdownBoxShadow};\n    }\n\n    /* Checkbox styles */\n    ${filterButtonSelector}[type=\"checkbox\"] {\n      position: relative;\n      appearance: none;\n      -webkit-appearance: none;\n      padding: ${checkboxPadding};\n      background-color: ${checkboxBackgroundColor};\n      color: ${checkboxTextColor};\n      border: ${checkboxBorder};\n      border-radius: ${checkboxBorderRadius};\n      height: ${checkboxHeight};\n      width: ${checkboxWidth};\n      cursor: pointer;\n      transition: all ${animationDuration} ${animationEasing};\n    }\n\n    ${filterButtonSelector}[type=\"checkbox\"]:hover:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: 100%;\n      border-radius: ${checkboxBorderRadius};\n      border: ${checkboxActiveBorder};\n    }\n      \n    ${filterButtonSelector}.${activeClass}[type=\"checkbox\"]:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: 100%;\n      border-radius: ${checkboxBorderRadius};\n      border: ${checkboxActiveBorder};\n    }\n\n    /* Radio button styles */\n    ${filterButtonSelector}[type=\"radio\"] {\n      position: relative;\n      appearance: none;\n      -webkit-appearance: none;\n      padding: ${radioPadding};\n      background-color: ${radioBackgroundColor};\n      color: ${radioTextColor};\n      border: ${radioBorder};\n      border-radius: ${radioBorderRadius};\n      height: ${radioHeight};\n      width: ${radioWidth};\n      cursor: pointer;\n      transition: all ${animationDuration} ${animationEasing};\n    }\n\n    ${filterButtonSelector}[type=\"radio\"]:hover:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: 100%;\n      border-radius: ${radioBorderRadius};\n      border: ${radioActiveBorder};\n    }\n      \n    ${filterButtonSelector}.${activeClass}[type=\"radio\"]:before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      content: \"\";\n      display: block;\n      width: 100%;\n      height: 100%;\n      border-radius: ${radioBorderRadius};\n      border: ${radioActiveBorder};\n    }\n\n    /* Hover state */\n    ${filterButtonSelector}:hover,{\n      border-color: ${primaryColor};\n      background-color: ${primaryColor};\n      color: ${textHoverColor};\n      box-shadow: ${buttonStyles.hover?.boxShadow || dropdownStyles.hover?.boxShadow || \"none\"};\n    }\n\n    /* Focus state */\n    ${filterButtonSelector}:focus,\n    ${filterDropdownSelector}:focus {\n      outline: none;\n      border-color: ${primaryColor};\n      box-shadow: 0 0 0 2px ${rgbaColor};\n    }\n\n    /* Active state */\n    ${filterButtonSelector}.${activeClass} {\n      background-color: ${primaryColor};\n      border-color: ${primaryColor};\n      color: ${textHoverColor};\n      box-shadow: ${buttonStyles.active?.boxShadow || \"none\"};\n    }\n\n    /* Disabled state */\n    ${filterButtonSelector}:disabled,\n    ${filterDropdownSelector}:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n      background-color: ${backgroundColor};\n    }\n\n    /* Dropdown specific styles */\n    ${filterDropdownSelector} {\n      padding: ${dropdownPadding};\n      position: relative;\n      background-image: url(\"${arrowSvg}\");\n      background-repeat: no-repeat;\n      background-position: right 12px center;\n      text-align: left;\n    }\n\n    /* Mobile optimization */\n    @media (max-width: 768px) {\n      ${filterButtonSelector},\n      ${filterDropdownSelector} {\n        width: 100%;\n        justify-content: flex-start;\n      }\n    }\n  `;\n  }\n\n  /**\n   * Add global transition styles\n   * @private\n   */\n  addTransitionStyles() {\n    const style = document.createElement(\"style\");\n    style.textContent = `\n      .afs-transition {\n          transition: opacity 300ms ease-in-out,\n                      transform 300ms ease-in-out,\n                      filter 300ms ease-in-out !important;\n      }\n      .afs-hidden {\n          opacity: 0;\n          pointer-events: none;\n      }\n  `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Create range slider styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createRangeStyles() {\n    const styles = this.options.get(\"styles\");\n    const sliderOptions = this.options.get(\"slider\") || {};\n    const sliderStyles = styles.slider;\n    const colors = styles.colors;\n\n    const containerClass = sliderOptions.containerClass || \"afs-range-slider\";\n    const trackClass = sliderOptions.trackClass || \"afs-range-track\";\n    const thumbClass = sliderOptions.thumbClass || \"afs-range-thumb\";\n    const valueClass = sliderOptions.valueClass || \"afs-range-value\";\n    const selectedClass = sliderOptions.selectedClass || \"afs-range-selected\";\n\n    return `\n    /* Range Slider Styles */\n    .${containerClass} {\n      position: relative;\n      width: auto;\n      height: 40px;\n      margin: 10px 0;\n      padding: 0 8px;\n    }\n\n    .${trackClass} {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 100%;\n      height: 4px;\n      background: ${sliderStyles.ui.track.background || colors.background};\n      border-radius: ${sliderStyles.ui.track.radius || \"0\"};\n    }\n\n    .${thumbClass} {\n      position: absolute;\n      top: 50%;\n      width: ${sliderStyles.ui.thumb.size || \"16px\"};\n      height: ${sliderStyles.ui.thumb.size || \"16px\"};\n      background: ${sliderStyles.ui.thumb.background || colors.primary};\n      border-radius: ${sliderStyles.ui.thumb.radius || \"50%\"};\n      transform: translate(-50%, -50%);\n      cursor: pointer;\n      z-index: 2;\n    }\n\n    .${valueClass} {\n      position: absolute;\n      top: -20px;\n      transform: translateX(-50%);\n      font-size: 10px;\n      color: ${colors.text};\n    }\n\n    .${selectedClass} {\n      position: absolute;\n      height: 4px;\n      background: ${sliderStyles.ui.selected.background || colors.primary};\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    /* Histogram Styles */\n    .afs-histogram {\n      position: absolute;\n      bottom: 22px;\n      left: 8px;\n      right: 8px;\n      height: 20px;\n      display: flex;\n      align-items: flex-end;\n      gap: 1px;\n      opacity: 0.5;\n    }\n\n    .afs-histogram-bar {\n      flex: 1;\n      background-color: ${\n        sliderStyles.ui.histogram.background || colors.background\n      };\n      min-height: 4px;\n      transition: background-color 0.2s ease;\n    }\n\n    .afs-histogram-bar.active {\n      background-color: ${\n        sliderStyles.ui.histogram.bar.background || colors.primary\n      };\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createDateStyles() {\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n    .afs-date-range-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin: 10px 0;\n    }\n\n    .afs-date-input-wrapper {\n      flex: 1;\n    }\n\n    .afs-date-input-wrapper label {\n      display: block;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      margin-bottom: 0.5rem;\n    }\n\n    .afs-date-input {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid ${colors.background};\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      transition: border-color 0.2s ease;\n    }\n\n    .afs-date-input:focus {\n      outline: none;\n      border-color: ${colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createInputRangeStyles() {\n    const colors = this.options.get(\"styles\").colors;\n    return `\n        .afs-input-range-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 1rem;\n            margin: 10px 0;\n        }\n\n        .afs-input-wrapper {\n            flex: 1;\n        }\n\n        .afs-input-label {\n            display: block;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            margin-bottom: 0.5rem;\n        }\n\n        .afs-input {\n            width: 100%;\n            padding: 0.5rem;\n            border: 1px solid ${colors.background};\n            border-radius: 0.25rem;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            transition: border-color 0.2s ease;\n        }\n\n        .afs-input:focus {\n            outline: none;\n            border-color: ${colors.primary};\n        }\n    `;\n  }\n\n  /**\n   * Apply all styles\n   * @public\n   */\n  applyStyles() {\n    try {\n      const styles = `\n      \n      /* Global transition styles */\n      ${this.addTransitionStyles()}\n\n      /* Base styles */\n      ${this.createBaseStyles()}\n\n      /* Range slider styles */\n      ${this.createRangeStyles()}\n\n      /* Date filter styles */\n      ${this.createDateStyles()}\n\n      /* Pagination styles */\n      ${this.createPaginationStyles()}\n\n      /* Search styles */\n      ${this.createSearchStyles()}\n\n      /* Input range styles */\n      ${this.createInputRangeStyles()}\n    `;\n\n      if (this.styleElement) {\n        this.styleElement.textContent = styles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = styles;\n        document.head.appendChild(this.styleElement);\n      }\n    } catch (error) {\n      console.error(\"Error applying styles:\", error);\n      const fallbackStyles = this.createBaseStyles();\n      if (this.styleElement) {\n        this.styleElement.textContent = fallbackStyles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = fallbackStyles;\n        document.head.appendChild(this.styleElement);\n      }\n    }\n  }\n\n  /**\n   * Create pagination styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createPaginationStyles() {\n    const styles = this.options.get(\"styles\");\n    const paginationOptions = this.options.get(\"pagination\") || {};\n    const colors = this.options.get(\"styles\").colors;\n\n    const containerClass = paginationOptions.containerClass || \"afs-pagination\";\n    const buttonClass = paginationOptions.pageButtonClass || \"afs-page-button\";\n    const activeClass = paginationOptions.activePageClass || \"afs-page-active\";\n\n    const paginationStyles = styles.pagination;\n\n    return `\n      .${containerClass} {\n        display: flex;\n        justify-content: center;\n        gap: 8px;\n        margin-top: 20px;\n      }\n\n      .${buttonClass} {\n        padding: ${paginationStyles.ui.button.padding || \"8px 12px\"};\n        border: ${\n          paginationStyles.ui.button.border || \"1px solid \" + colors.primary\n        };\n        border-radius: ${paginationStyles.ui.button.borderRadius || \"4px\"};\n        cursor: pointer;\n        transition: all 200ms ease-out;\n        background: ${paginationStyles.ui.button.background || \"transparent\"};\n        color: ${paginationStyles.ui.button.color || colors.primary};\n      }\n\n      .${buttonClass}:hover {\n        background: ${\n          paginationStyles.ui.button.hover.background || colors.primary\n        };\n        color: ${paginationStyles.ui.button.hover.color || \"white\"};\n      }\n\n      .${buttonClass}.${activeClass} {\n        background: ${\n          paginationStyles.ui.button.active.background || colors.primary\n        };\n        color: ${paginationStyles.ui.button.active.color || \"white\"};\n      }\n\n      .${buttonClass}:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n\n  /**\n   * Create search styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createSearchStyles() {\n    const searchClass = this.options.get(\"searchInputClass\") || \"afs-search\";\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n      .${searchClass} {\n        padding: 8px;\n        border: 1px solid ${colors.background};\n        border-radius: 4px;\n        width: 100%;\n        max-width: 300px;\n        transition: border-color 200ms ease-out;\n      }\n\n      .${searchClass}:focus {\n        outline: none;\n        border-color: ${colors.primary};\n      }\n    `;\n  }\n\n  /**\n   * Update styles\n   * @public\n   * @param {Object} newOptions - New style options\n   */\n  updateStyles(newOptions) {\n    this.options = newOptions;\n    this.applyStyles();\n  }\n\n  /**\n   * Remove styles\n   * @public\n   */\n  removeStyles() {\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n}\n","/**\n * @fileoverview Event handling system for AFS\n */\n\nexport class EventEmitter {\n  constructor() {\n    this.events = new Map();\n    this.onceEvents = new Map();\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventName, callback) {\n    if (!this.events.has(eventName)) {\n      this.events.set(eventName, new Set());\n    }\n\n    this.events.get(eventName).add(callback);\n\n    // Return unsubscribe function\n    return () => this.off(eventName, callback);\n  }\n\n  /**\n   * Subscribe to an event once\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventName, callback) {\n    const onceWrapper = (...args) => {\n      this.off(eventName, onceWrapper);\n      callback.apply(this, args);\n    };\n\n    if (!this.onceEvents.has(eventName)) {\n      this.onceEvents.set(eventName, new Map());\n    }\n\n    this.onceEvents.get(eventName).set(callback, onceWrapper);\n    return this.on(eventName, onceWrapper);\n  }\n\n  /**\n   * Unsubscribe from an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   */\n  off(eventName, callback) {\n    // Remove from regular events\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).delete(callback);\n\n      // Cleanup if no more listeners\n      if (this.events.get(eventName).size === 0) {\n        this.events.delete(eventName);\n      }\n    }\n\n    // Remove from once events\n    if (this.onceEvents.has(eventName)) {\n      const onceWrapper = this.onceEvents.get(eventName).get(callback);\n      if (onceWrapper) {\n        this.events.get(eventName)?.delete(onceWrapper);\n        this.onceEvents.get(eventName).delete(callback);\n      }\n\n      // Cleanup if no more once listeners\n      if (this.onceEvents.get(eventName).size === 0) {\n        this.onceEvents.delete(eventName);\n      }\n    }\n  }\n\n  /**\n   * Emit an event\n   * @param {string} eventName - Name of the event\n   * @param {...any} args - Arguments to pass to callbacks\n   */\n  emit(eventName, ...args) {\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all event listeners\n   * @param {string} [eventName] - Optional event name to clear specific event\n   */\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n      this.onceEvents.delete(eventName);\n    } else {\n      this.events.clear();\n      this.onceEvents.clear();\n    }\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event\n   * @returns {number} Number of listeners\n   */\n  listenerCount(eventName) {\n    return (this.events.get(eventName)?.size || 0) + \n           (this.onceEvents.get(eventName)?.size || 0);\n  }\n}","/**\n * @fileoverview Animation management for AFS\n */\n\nexport class Animation {\n  constructor(afs) {\n    this.afs = afs;\n    this.options = this.afs.options;\n    this.animations = {\n      fade: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.95)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      slide: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(20px)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n      },\n      scale: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.8)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      rotate: {\n        in: {\n          opacity: 1,\n          transform: \"rotate(0deg) scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"rotate(90deg) scale(0.9)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      flip: {\n        in: {\n          opacity: 1,\n          transform: \"rotateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"rotateY(180deg)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      zoom: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1.2)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.8)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      bounce: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          animation: \"bounce 1s cubic-bezier(0.68, -0.55, 0.27, 1.55)\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(-20px)\",\n          animation: \"bounceOut 1s ease-out\",\n        },\n      },\n      blur: {\n        in: {\n          opacity: 1,\n          filter: \"blur(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          filter: \"blur(5px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      skew: {\n        in: {\n          opacity: 1,\n          transform: \"skew(0deg)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"skew(10deg)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n      },\n      slideInLeft: {\n        in: {\n          opacity: 1,\n          transform: \"translateX(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateX(-100%)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      slideInRight: {\n        in: {\n          opacity: 1,\n          transform: \"translateX(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateX(100%)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      fadeInUp: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(10px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      fadeInDown: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(-10px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      bounceIn: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1.05)\",\n          transitionTimingFunction: \"cubic-bezier(0.68, -0.55, 0.27, 1.55)\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.9)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n    };\n  }\n\n  /**\n   * Apply show animation\n   * @param {HTMLElement} item - Item to animate\n   * @param {string} animationType - Type of animation\n   */\n  applyShowAnimation(item, animationType = \"fade\") {\n    const animation =\n      this.animations[animationType]?.in || this.animations.fade.in;\n\n    // Ensure item has transition class\n    item.classList.add(\"afs-transition\");\n\n    // Set initial state\n    item.style.display = this.afs.filter.getItemDisplayType(item);\n    item.style.visibility = \"visible\";\n    \n    // Special handling for mobile - immediately remove any blur\n    if (window.innerWidth <= 768) {\n      item.style.filter = \"none\";\n    }\n\n    // Force reflow\n    void item.offsetHeight;\n\n    // Add animation properties\n    requestAnimationFrame(() => {\n      Object.assign(item.style, {\n        opacity: \"0\",\n        transform: \"scale(0.95)\",\n        display: this.afs.filter.getItemDisplayType(item),\n      });\n\n      // Force reflow\n      void item.offsetHeight;\n\n      // Apply final state\n      requestAnimationFrame(() => {\n        Object.assign(item.style, animation);\n      });\n    });\n    \n    // Ensure cleanup after animation completes\n    const duration = this.afs.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      // Special handling for mobile - explicitly clean up all transition styles\n      if (window.innerWidth <= 768) {\n        item.style.transform = \"\";\n        item.style.opacity = \"1\";\n        item.style.filter = \"none\";\n        item.style.transition = \"\";\n      } else if (this.afs.state.getState().items.visible.has(item)) {\n        // Only clean up if item is still meant to be visible\n        Object.assign(item.style, {\n          transform: \"\",\n          opacity: \"1\",\n          filter: \"none\",\n          display: this.afs.filter.getItemDisplayType(item)\n        });\n      }\n    }, duration + 50); // Add a small buffer for animation completion\n  }\n\n  /**\n   * Apply hide animation\n   * @param {HTMLElement} item - Item to animate\n   * @param {string} animationType - Type of animation\n   */\n  applyHideAnimation(item, animationType = \"fade\") {\n    const animation =\n      this.animations[animationType]?.out || this.animations.fade.out;\n\n    // Ensure item has transition class\n    item.classList.add(\"afs-transition\");\n\n    // Set initial state\n    item.style.display = this.afs.filter.getItemDisplayType(item);\n    item.style.visibility = \"visible\";\n\n    // Force reflow\n    void item.offsetHeight;\n\n    // Add animation properties\n    requestAnimationFrame(() => {\n      Object.assign(item.style, animation);\n    });\n\n    // Ensure final state after animation\n    const duration = this.afs.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      if (!this.afs.state.getState().items.visible.has(item)) {\n        item.style.display = \"none\";\n        item.style.visibility = \"hidden\";\n        item.style.opacity = \"0\";\n        item.style.transform = \"\";\n        item.style.filter = \"none\";\n        item.style.transition = \"\";\n      }\n    }, duration + 50);\n  }\n\n  /**\n   * Update animation settings\n   * @param {Object} options - Animation options\n   */\n  updateOptions(options) {\n    const duration = options.duration || 300;\n    const timing = options.timing || \"ease-in-out\";\n\n    const style = document.querySelector(\".afs-transition\");\n    if (style) {\n      style.textContent = `\n              .afs-transition {\n                  transition: opacity ${duration}ms ${timing},\n                              transform ${duration}ms ${timing},\n                              filter ${duration}ms ${timing} !important;\n              }\n          `;\n    }\n  }\n\n  /**\n   * Set animation type\n   * @param {string} animationType - Animation type to set\n   */\n  setAnimation(animationType) {\n    if (this.animations[animationType]) {\n      this.afs.options.set(\"animation.type\", animationType);\n    }\n  }\n}\n","/**\n * @fileoverview Filter functionality for AFS\n */\n\nimport { Animation } from \"../styles/Animation.js\";\n\nexport class Filter {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.animation = new Animation(afs);\n    this.filterButtons = new Map();\n    this.activeFilters = new Set([\"*\"]);\n    this.currentFilters = new Set([\"*\"]);\n    this.filterGroups = new Map();\n    this.sortOrders = new Map();\n    this.itemDisplayTypes = new Map(); // Store original display types\n    this.exclusiveFilterTypes = new Set(); // Track filter types that should use exclusive toggle\n    this.isScrolling = false;\n    this.scrollTimeout = null;\n\n    this.setupFilters();\n  }\n\n  /**\n   * Setup filters\n   * @private\n   */\n  setupFilters() {\n    this.afs.logger.debug(\"Setting up filters\");\n    const filterSelector = this.afs.options.get(\"filterButtonSelector\");\n    if (!filterSelector) return;\n\n    // Initialize filter buttons\n    document.querySelectorAll(filterSelector).forEach((button) => {\n      const filterValue = button.dataset.filter;\n      if (!filterValue) {\n        this.afs.logger.warn(\n          \"Filter button missing data-filter attribute:\",\n          button\n        );\n        return;\n      }\n\n      this.filterButtons.set(button, filterValue);\n      this.bindFilterEvent(button);\n    });\n\n    // Initialize filter dropdowns\n    const filterDropdownSelector = this.afs.options.get(\n      \"filterDropdownSelector\"\n    );\n    if (filterDropdownSelector) {\n      document.querySelectorAll(filterDropdownSelector).forEach((dropdown) => {\n        this.bindDropdownEvent(dropdown);\n      });\n    }\n\n    // Store original display types for all items\n    this.afs.items.forEach((item) => {\n      const computedStyle = window.getComputedStyle(item);\n      this.itemDisplayTypes.set(\n        item,\n        computedStyle.display === \"none\" ? \"block\" : computedStyle.display\n      );\n    });\n\n    this.afs.logger.debug(\"Filters initialized\");\n  }\n\n  /**\n   * Set filter logic mode\n   * @public\n   * @param {string|boolean} logic - 'AND'/'OR' or true/false (true = AND, false = OR)\n   */\n  setLogic(logic) {\n    if (typeof logic === \"boolean\") {\n      // Handle boolean input (true = AND, false = OR)\n      this.afs.options.set(\"filterMode\", logic ? \"AND\" : \"OR\");\n    } else {\n      const mode = logic.toUpperCase();\n      if ([\"OR\", \"AND\"].includes(mode)) {\n        this.afs.options.set(\"filterMode\", mode);\n      } else {\n        this.afs.logger.warn(`Invalid filter mode: ${logic}`);\n        return;\n      }\n    }\n\n    this.afs.logger.debug(\n      `Filter logic set to: ${this.afs.options.get(\"filterMode\")}`\n    );\n    this.applyFilters();\n  }\n\n  /**\n   * Clear all filters and reset selects\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters and resetting selects\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Reset filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Reset filter groups\n    this.filterGroups.clear();\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Reset all select elements to their default values\n    const filterDropdownSelector =\n      this.afs.options.get(\"filterDropdownSelector\") || \".afs-filter-dropdown\";\n    document.querySelectorAll(filterDropdownSelector).forEach((select) => {\n      // Get the filter type from the select's data or ID\n      const filterType =\n        select.getAttribute(\"data-filter-type\") ||\n        select.id.replace(\"Filter\", \"\").toLowerCase();\n\n      // Find the \"all\" option for this filter type\n      const allOption = Array.from(select.options).find((option) => {\n        const value = option.value;\n        return (\n          value === \"*\" ||\n          value === `${filterType}:all` ||\n          value.endsWith(\":all\")\n        );\n      });\n\n      if (allOption) {\n        // Set value and dispatch change event\n        select.value = allOption.value;\n\n        // Create and dispatch change event\n        const event = new Event(\"change\", {\n          bubbles: true,\n          cancelable: true,\n        });\n        select.dispatchEvent(event);\n      } else {\n        // If no \"all\" option found, set to first option\n        select.selectedIndex = 0;\n\n        // Create and dispatch change event\n        const event = new Event(\"change\", {\n          bubbles: true,\n          cancelable: true,\n        });\n        select.dispatchEvent(event);\n      }\n    });\n\n    // Clear sorting\n    this.sortOrders.clear();\n\n    // Apply changes and update UI\n    this.applyFilters();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"filtersCleared\");\n\n    this.afs.logger.debug(\"All filters cleared and selects reset\");\n  }\n\n  /**\n   * Bind filter event to dropdown\n   * @private\n   * @param {HTMLSelectElement} dropdown - Filter dropdown\n   */\n  bindDropdownEvent(dropdown) {\n    this.afs.logger.debug(\"Binding filter event to dropdown:\", dropdown);\n\n    dropdown.addEventListener(\"change\", () => {\n      const selectedValue = dropdown.value;\n      const [filterType] = selectedValue.split(\":\");\n\n      // Only clear \"*\" if we're adding a specific filter\n      if (selectedValue !== \"*\" && !selectedValue.endsWith(\":all\")) {\n        this.activeFilters.delete(\"*\");\n      }\n\n      // Remove existing filters of the same type\n      this.activeFilters.forEach((existingFilter) => {\n        if (existingFilter.startsWith(`${filterType}:`)) {\n          this.activeFilters.delete(existingFilter);\n        }\n      });\n\n      // Handle filter addition\n      if (selectedValue === \"*\" || selectedValue.endsWith(\":all\")) {\n        // If selecting 'all' for a type, just remove that type's filters\n        // If no filters remain, add '*'\n        if (this.activeFilters.size === 0) {\n          this.activeFilters.add(\"*\");\n        }\n      } else {\n        // Add the new filter\n        this.activeFilters.add(selectedValue);\n      }\n\n      // If no value is selected, set to first option\n      if (!selectedValue && dropdown.options.length > 0) {\n        dropdown.selectedIndex = 0;\n        const firstValue = dropdown.options[0].value;\n        this.activeFilters.add(firstValue);\n      }\n\n      this.applyFilters();\n      this.afs.urlManager.updateURL();\n\n      // Emit event\n      this.afs.emit(\"filterChanged\", {\n        type: filterType,\n        value: selectedValue || dropdown.options[0]?.value,\n        activeFilters: Array.from(this.activeFilters),\n      });\n    });\n  }\n\n  /**\n   * Bind filter event to button\n   * @private\n   * @param {HTMLElement} button - Filter button\n   */\n  bindFilterEvent(button) {\n    this.afs.logger.debug(\"Binding filter event to button:\", button);\n    console.log(\"=== BINDING EVENT TO BUTTON ===\", button, \"with filter:\", this.filterButtons.get(button));\n\n    button.addEventListener(\"click\", () => {\n      console.log(\"=== BUTTON CLICKED ===\", button);\n      const filterValue = this.filterButtons.get(button);\n      console.log(\"=== FILTER VALUE ===\", filterValue);\n\n      if (!filterValue) {\n        console.log(\"=== NO FILTER VALUE, RETURNING ===\");\n        return;\n      }\n\n      if (filterValue === \"*\") {\n        console.log(\"=== CALLING RESET FILTERS ===\");\n        this.resetFilters();\n      } else if (filterValue.endsWith(\":*\")) {\n        console.log(\"=== CALLING CLEAR FILTER CATEGORY ===\", filterValue);\n        // Handle category-specific clear (e.g., \"brand:*\" clears all brand filters)\n        this.clearFilterCategory(filterValue);\n      } else {\n        console.log(\"=== CALLING TOGGLE FILTER ===\", filterValue, button);\n        this.toggleFilter(filterValue, button);\n      }\n\n      // Update the URL after filter change\n      this.afs.urlManager.updateURL();\n    });\n  }\n\n  /**\n   * Clear all filters for a specific category\n   * @public\n   * @param {string} categoryFilter - Category filter in format \"category:*\"\n   */\n  clearFilterCategory(categoryFilter) {\n    this.afs.logger.debug(\"Clearing filter category:\", categoryFilter);\n    \n    // Extract the category name (e.g., \"brand:*\" -> \"brand\")\n    const category = categoryFilter.replace(\":*\", \"\");\n    \n    // Find and remove all active filters of this category\n    const filtersToRemove = [];\n    this.activeFilters.forEach(filter => {\n      if (filter !== \"*\" && filter.startsWith(`${category}:`)) {\n        filtersToRemove.push(filter);\n      }\n    });\n    \n    // Remove the filters\n    filtersToRemove.forEach(filter => {\n      this.activeFilters.delete(filter);\n      \n      // Update button states\n      this.filterButtons.forEach((value, btn) => {\n        if (value === filter) {\n          btn.classList.remove(this.afs.options.get(\"activeClass\"));\n        }\n      });\n    });\n    \n    // Also deactivate the category clear button itself\n    this.filterButtons.forEach((value, btn) => {\n      if (value === categoryFilter) {\n        btn.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n    \n    // If no filters remain active, reset to show all\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n      \n      // Emit event\n      this.afs.emit(\"filterCategoryCleared\", {\n        category: category,\n        removedFilters: filtersToRemove,\n        activeFilters: Array.from(this.activeFilters)\n      });\n    }\n  }\n\n  /**\n   * Reset filters to default state\n   * @public\n   */\n  resetFilters() {\n    this.afs.logger.debug(\"Resetting filters\");\n\n    // Clear existing filters\n    this.activeFilters.clear();\n\n    // Reset button states\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Add \"*\" filter and activate \"all\" button\n    this.activeFilters.add(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear filter groups\n    this.filterGroups.clear();\n\n    // Create a promise to track animations\n    const animationPromises = [];\n\n    // Show all items with animation\n    this.afs.items.forEach((item) => {\n      const promise = new Promise((resolve) => {\n        item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(\n            item,\n            this.afs.options.get(\"animation.type\")\n          );\n          // Resolve after animation duration\n          setTimeout(\n            resolve,\n            this.afs.options.get(\"animation.duration\") || 300\n          );\n        });\n      });\n      animationPromises.push(promise);\n    });\n\n    // Update state after all items are visible\n    const visibleItems = new Set(this.afs.items);\n    this.afs.state.setState(\"items.visible\", visibleItems);\n\n    // Wait for all animations to complete\n    Promise.all(animationPromises).then(() => {\n      // Update counter\n      this.afs.updateCounter();\n\n      // Update URL\n      this.afs.urlManager.updateURL();\n\n      // Emit event\n      this.afs.emit(\"filtersReset\");\n    });\n  }\n\n  /**\n   * Find \"all\" filter button\n   * @private\n   * @returns {HTMLElement|null} All button\n   */\n  findAllButton() {\n    for (const [button, value] of this.filterButtons.entries()) {\n      if (value === \"*\") return button;\n    }\n\n    return null;\n  }\n\n  handleFilterClick(button) {\n    const filterValue = button.dataset.filter;\n    this.afs.logger.debug(\"Filter clicked:\", filterValue);\n\n    if (filterValue === \"*\") {\n      this.resetFilters();\n    } else {\n      this.toggleFilter(filterValue, button);\n    }\n\n    this.filter();\n\n    // Call updateURL to reflect the new filter state in the URL\n    this.updateURL();\n  }\n\n  /**\n   * Toggle filter state\n   * @private\n   * @param {string} filterValue - Filter value\n   * @param {HTMLElement} button - Filter button\n   */\n  toggleFilter(filterValue, button) {\n    console.log(`=== TOGGLE FILTER CALLED ===`);\n    console.log(`filterValue: \"${filterValue}\"`);\n    console.log(`button:`, button);\n    console.log(`Initial activeFilters:`, Array.from(this.activeFilters));\n    \n    this.afs.logger.debug(`=== toggleFilter called with filterValue=\"${filterValue}\", button:`, button);\n    this.afs.logger.debug(`Initial activeFilters:`, Array.from(this.activeFilters));\n    \n    // Remove \"all\" filter\n    this.activeFilters.delete(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.remove(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Check if this is a radio button\n    const isRadio =\n      button.type === \"radio\" || button.getAttribute(\"type\") === \"radio\";\n\n    if (isRadio) {\n      // For radio buttons, always activate the selected one and deactivate others in the same group\n      const radioName = button.name || button.getAttribute(\"name\");\n      if (radioName) {\n        // Deactivate other radio buttons in the same group\n        document\n          .querySelectorAll(`input[name=\"${radioName}\"]`)\n          .forEach((radio) => {\n            radio.classList.remove(this.afs.options.get(\"activeClass\"));\n            const radioValue = this.filterButtons.get(radio);\n            if (radioValue) {\n              this.activeFilters.delete(radioValue);\n            }\n          });\n      }\n\n      // Activate the selected radio button\n      button.classList.add(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.add(filterValue);\n    } else {\n      // For checkboxes/buttons, handle exclusive toggle based on logic configuration\n      const filterCategoryMode = (this.afs.options.get(\"filterCategoryMode\") || \"mixed\").toUpperCase();\n      const filterMode = this.afs.options.get(\"filterMode\") || \"OR\";\n      const filterTypeLogic = this.afs.options.get(\"filterTypeLogic\") || {};\n      \n      // Extract filter type/category from the filter value (e.g., \"category:demo\" -> \"category\")\n      const [filterType] = filterValue.split(\":\");\n      \n      // Determine the logic for this specific filter type\n      let typeLogic;\n      let allowMultiple = false; // Default to exclusive for OR mode\n      \n      if (filterCategoryMode === \"MIXED\" && filterType) {\n        // In mixed mode, check if there's a specific logic for this type\n        const typeConfig = filterTypeLogic[filterType];\n        \n        if (typeof typeConfig === 'object' && typeConfig !== null) {\n          // Extended configuration format: {mode: 'OR', multi: true}\n          const mode = typeConfig.mode || 'OR';\n          typeLogic = (typeof mode === 'string' ? mode : 'OR').toUpperCase();\n          allowMultiple = typeConfig.multi === true;\n        } else if (typeof typeConfig === 'string') {\n          // Simple string format: 'OR'\n          typeLogic = typeConfig.toUpperCase();\n          // For OR mode, default to exclusive (single selection)\n          allowMultiple = false;\n        } else {\n          // Default fallback\n          this.afs.logger.warn(`Unexpected typeConfig type for '${filterType}':`, typeof typeConfig, typeConfig);\n          typeLogic = 'OR';\n          allowMultiple = false;\n        }\n      } else {\n        // In non-mixed mode, use the global filter mode\n        typeLogic = filterMode.toUpperCase();\n        allowMultiple = false; // Default to exclusive for OR\n      }\n      \n      // Check if this filter type should use exclusive toggle\n      const isExclusiveType = this.exclusiveFilterTypes.has(filterType);\n      \n      // Apply exclusive toggle if:\n      // 1. The type is explicitly set as exclusive (for radio buttons), OR\n      // 2. The button/input type suggests exclusive behavior (radio, select with single selection), OR\n      // 3. The type logic is OR and allowMultiple is false (default behavior)\n      const isRadioInput = button.type === 'radio' || button.tagName === 'SELECT';\n      const isCheckboxInput = button.type === 'checkbox';\n      const isRegularButton = button.tagName === 'BUTTON';\n      \n      // Determine if we should use exclusive toggle\n      let shouldUseExclusiveToggle;\n      if (allowMultiple) {\n        // If explicitly set to allow multiple, never use exclusive toggle\n        shouldUseExclusiveToggle = false;\n      } else if (isRadioInput) {\n        // Radio inputs are always exclusive\n        shouldUseExclusiveToggle = true;\n      } else if (typeLogic === 'OR') {\n        // For OR logic without multi:true, use exclusive toggle for buttons (not checkboxes)\n        shouldUseExclusiveToggle = isRegularButton || !isCheckboxInput;\n      } else {\n        // AND logic defaults to allowing multiple\n        shouldUseExclusiveToggle = false;\n      }\n      \n      // Debug logging\n      console.log(`=== EXCLUSIVE TOGGLE LOGIC ===`);\n      console.log(`filterValue=${filterValue}, filterType=${filterType}, typeLogic=${typeLogic}, allowMultiple=${allowMultiple}`);\n      console.log(`button.type=${button.type}, button.tagName=${button.tagName}`);\n      console.log(`isExclusiveType=${isExclusiveType}, isRadioInput=${isRadioInput}, isCheckboxInput=${isCheckboxInput}, isRegularButton=${isRegularButton}`);\n      console.log(`shouldUseExclusiveToggle=${shouldUseExclusiveToggle}`);\n      console.log(`Final condition: ${(isExclusiveType || isRadioInput || shouldUseExclusiveToggle) && filterType && filterValue.includes(\":\")}`);\n      \n      this.afs.logger.debug(`Toggle filter debug: filterValue=${filterValue}, filterType=${filterType}, typeLogic=${typeLogic}, allowMultiple=${allowMultiple}, button.type=${button.type}, button.tagName=${button.tagName}, isExclusiveType=${isExclusiveType}, isRadioInput=${isRadioInput}, isCheckboxInput=${isCheckboxInput}, isRegularButton=${isRegularButton}, shouldUseExclusiveToggle=${shouldUseExclusiveToggle}`);\n      \n      if ((isExclusiveType || isRadioInput || shouldUseExclusiveToggle) && filterType && filterValue.includes(\":\")) {\n        console.log(`=== EXECUTING EXCLUSIVE TOGGLE ===`);\n        console.log(`Looking for other buttons with filterType: ${filterType}`);\n        console.log(`Total buttons in filterButtons Map: ${this.filterButtons.size}`);\n        console.log(`Current filterButtons Map contents:`);\n        this.filterButtons.forEach((val, btn) => {\n          console.log(`  - Button:`, btn, `Filter: ${val}, Has active class: ${btn.classList.contains(this.afs.options.get(\"activeClass\"))}`);\n        });\n        \n        let deactivatedCount = 0;\n        // Find and deactivate other buttons with the same filter type\n        this.filterButtons.forEach((value, btn) => {\n          if (value !== filterValue && value.startsWith(`${filterType}:`)) {\n            console.log(`=== DEACTIVATING BUTTON ===`, btn, `with filter: ${value}`);\n            console.log(`  Before: has active class = ${btn.classList.contains(this.afs.options.get(\"activeClass\"))}`);\n            btn.classList.remove(this.afs.options.get(\"activeClass\"));\n            this.activeFilters.delete(value);\n            console.log(`  After: has active class = ${btn.classList.contains(this.afs.options.get(\"activeClass\"))}`);\n            deactivatedCount++;\n          }\n        });\n        console.log(`=== DEACTIVATED ${deactivatedCount} BUTTONS ===`);\n        console.log(`Active filters after deactivation:`, Array.from(this.activeFilters));\n      } else {\n        console.log(`=== SKIPPING EXCLUSIVE TOGGLE ===`);\n      }\n      \n      // Toggle the current button state\n      this.afs.logger.debug(`Before toggle: button has activeClass = ${button.classList.contains(this.afs.options.get(\"activeClass\"))}, activeFilters size = ${this.activeFilters.size}`);\n      \n      if (button.classList.contains(this.afs.options.get(\"activeClass\"))) {\n        this.afs.logger.debug(`Deactivating button for ${filterValue}`);\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n        this.activeFilters.delete(filterValue);\n\n        // Reset to \"all\" if no filters active\n        if (this.activeFilters.size === 0) {\n          this.afs.logger.debug(\"No filters active, resetting to show all\");\n          this.resetFilters();\n          return;\n        }\n      } else {\n        this.afs.logger.debug(`Activating button for ${filterValue}`);\n        button.classList.add(this.afs.options.get(\"activeClass\"));\n        this.activeFilters.add(filterValue);\n      }\n      \n      this.afs.logger.debug(`After toggle: activeFilters =`, Array.from(this.activeFilters));\n    }\n\n    this.applyFilters();\n\n    // Emit event\n    this.afs.emit(\"filterToggled\", {\n      filter: filterValue,\n      activeFilters: Array.from(this.activeFilters),\n    });\n\n    this.afs.logger.debug(\"Filter toggled:\", filterValue);\n  }\n\n  /**\n   * Apply current filters\n   * @public\n   */\n  applyFilters() {\n    const activeFilters = Array.from(this.activeFilters);\n    this.afs.logger.debug(\"Active filters:\", activeFilters);\n\n    const previouslyVisible = new Set(this.afs.state.getState().items.visible);\n    const visibleItems = new Set();\n\n    // First determine visibility\n    this.afs.items.forEach((item) => {\n      if (this.activeFilters.has(\"*\") || this.itemMatchesFilters(item)) {\n        visibleItems.add(item);\n      }\n    });\n\n    // Update state before animations\n    this.afs.state.setState(\"items.visible\", visibleItems);\n\n    // Special handling for all items visible case (no filters or \"*\" filter)\n    const showingAllItems =\n      this.activeFilters.has(\"*\") || this.activeFilters.size === 0;\n\n    // Track animation promises\n    const animationPromises = [];\n\n    // Apply animations\n    this.afs.items.forEach((item) => {\n      const promise = new Promise((resolve) => {\n        if (visibleItems.has(item)) {\n          // Show item\n          item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n          item.style.display = this.getItemDisplayType(item);\n\n          requestAnimationFrame(() => {\n            this.animation.applyShowAnimation(\n              item,\n              this.afs.options.get(\"animation.type\")\n            );\n            setTimeout(\n              resolve,\n              parseFloat(this.afs.options.get(\"animation.duration\")) || 300\n            );\n          });\n        } else {\n          // Hide item\n          item.classList.add(this.afs.options.get(\"hiddenClass\"));\n          item.style.display = \"none\"; // Ensure item is hidden immediately\n          requestAnimationFrame(() => {\n            this.animation.applyHideAnimation(\n              item,\n              this.afs.options.get(\"animation.type\")\n            );\n            setTimeout(\n              resolve,\n              parseFloat(this.afs.options.get(\"animation.duration\")) || 300\n            );\n          });\n        }\n      });\n      animationPromises.push(promise);\n    });\n\n    // Handle completion\n    Promise.all(animationPromises).then(() => {\n      // Ensure visible items remain visible and hidden items stay hidden\n      this.afs.items.forEach((item) => {\n        if (visibleItems.has(item)) {\n          this.showItem(item);\n          item.style.display = this.getItemDisplayType(item);\n          item.style.opacity = \"1\";\n        } else {\n          item.style.display = \"none\";\n          item.classList.add(this.afs.options.get(\"hiddenClass\"));\n        }\n      });\n\n      // Update UI\n      this.afs.updateCounter();\n      this.afs.urlManager.updateURL();\n\n      this.afs.emit(\"filtersApplied\", {\n        activeFilters,\n        visibleItems: visibleItems.size,\n      });\n    });\n\n    // Sync checkbox states with active filters\n    this.syncCheckboxStates();\n\n    // Emit visibility change events\n    this.emitFilterEvents(previouslyVisible, visibleItems);\n  }\n\n  /**\n   * Synchronize checkbox visual states with active filters\n   * @private\n   */\n  syncCheckboxStates() {\n    // Find all checkboxes\n    const checkboxes = document.querySelectorAll(\n      `${this.afs.options.get(\"filterButtonSelector\")}[type=\"checkbox\"]`\n    );\n\n    checkboxes.forEach((checkbox) => {\n      const filterValue = checkbox.getAttribute('data-filter');\n      if (filterValue) {\n        // Check if this filter is active\n        const isActive = this.activeFilters.has(filterValue);\n        \n        // Update checkbox state\n        checkbox.checked = isActive;\n        \n        // Update visual classes\n        if (isActive) {\n          checkbox.classList.add(this.afs.options.get(\"activeClass\"));\n        } else {\n          checkbox.classList.remove(this.afs.options.get(\"activeClass\"));\n        }\n      }\n    });\n\n    this.afs.logger.debug(`Synced ${checkboxes.length} checkbox states`);\n  }\n\n  /**\n   * Check if item matches current filters\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {boolean} Whether item matches filters\n   */\n  itemMatchesFilters(item) {\n    // Show all items if only \"*\" is active\n    if (this.activeFilters.has(\"*\")) {\n      return true;\n    }\n\n    // Get item categories\n    const itemCategories = new Set(item.dataset.categories?.split(\" \") || []);\n\n    // Get filter category mode (new feature)\n    const filterCategoryMode = (this.afs.options.get(\"filterCategoryMode\") || \"mixed\").toUpperCase();\n    \n    // If using mixed mode (OR within categories, AND between categories)\n    if (filterCategoryMode === \"MIXED\") {\n      return this.itemMatchesMixedFilters(itemCategories);\n    }\n\n    // Get current filter mode for backward compatibility\n    const filterMode = this.afs.options.get(\"filterMode\") || \"OR\";\n\n    // Use appropriate matching method based on filter mode\n    return filterMode === \"AND\"\n      ? this.itemMatchesAllFilters(itemCategories)\n      : this.itemMatchesAnyFilter(itemCategories);\n  }\n\n  /**\n   * Check if item matches any active filter (OR mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches any filter\n   */\n  itemMatchesAnyFilter(itemCategories) {\n    return Array.from(this.activeFilters).some((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches all active filters (AND mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches all filters\n   */\n  itemMatchesAllFilters(itemCategories) {\n    return Array.from(this.activeFilters).every((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches filters with mixed logic (OR within categories, AND between categories)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches filters with mixed logic\n   */\n  itemMatchesMixedFilters(itemCategories) {\n    // Group active filters by their category/type\n    const filtersByType = {};\n    \n    this.activeFilters.forEach(filter => {\n      if (filter === \"*\") return;\n      \n      // Extract filter type from format \"type:value\"\n      const colonIndex = filter.indexOf(':');\n      if (colonIndex === -1) {\n        // No colon found, treat as single type\n        if (!filtersByType['_default']) {\n          filtersByType['_default'] = [];\n        }\n        filtersByType['_default'].push(filter);\n      } else {\n        const filterType = filter.substring(0, colonIndex);\n        if (!filtersByType[filterType]) {\n          filtersByType[filterType] = [];\n        }\n        filtersByType[filterType].push(filter);\n      }\n    });\n    \n    // If no filters active, show all\n    if (Object.keys(filtersByType).length === 0) {\n      return true;\n    }\n    \n    // Get custom filter type logic configuration\n    const filterTypeLogic = this.afs.options.get(\"filterTypeLogic\") || {};\n    \n    // Check each filter type\n    for (const [type, filters] of Object.entries(filtersByType)) {\n      // Determine logic for this filter type\n      // Priority: 1. Custom filterTypeLogic, 2. Default based on filterCategoryMode\n      const typeConfig = filterTypeLogic[type] || 'OR';\n      \n      // Debug logging to identify the problematic value\n      this.afs.logger.debug(`Processing type '${type}' with config:`, typeConfig, typeof typeConfig);\n      \n      // Debug logging for troubleshooting\n      if (typeof typeConfig === 'object' && typeConfig !== null && !typeConfig.mode) {\n        this.afs.logger.warn(`Filter type '${type}' has object config but missing 'mode' property:`, typeConfig);\n      }\n      \n      let typeLogic;\n      if (typeof typeConfig === 'object' && typeConfig !== null) {\n        // Extended object format: {mode: 'OR', multi: true}\n        const mode = typeConfig.mode || 'OR';\n        typeLogic = (typeof mode === 'string' ? mode : 'OR').toUpperCase();\n      } else if (typeof typeConfig === 'string') {\n        // Simple string format: 'OR' or 'AND'\n        typeLogic = typeConfig.toUpperCase();\n      } else {\n        // Fallback for any other type\n        this.afs.logger.warn(`Unexpected typeConfig type for '${type}':`, typeof typeConfig, typeConfig);\n        typeLogic = 'OR';\n      }\n      \n      let matchesType;\n      if (typeLogic === 'AND') {\n        // For AND logic: item must have ALL selected filters of this type\n        // This means if you select \"Pagani\" AND \"Ferrari\", the item must have BOTH brands\n        matchesType = filters.every(filter => itemCategories.has(filter));\n      } else {\n        // For OR logic: item must have AT LEAST ONE of the selected filters\n        // This means if you select \"Pagani\" OR \"Ferrari\", the item needs just one\n        matchesType = filters.some(filter => itemCategories.has(filter));\n      }\n      \n      // If item doesn't match the filters in this type according to its logic, it fails\n      if (!matchesType) {\n        return false;\n      }\n    }\n    \n    // Item matches filters from each active type according to their configured logic\n    return true;\n  }\n\n  /**\n   * Check if item matches filter groups\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches groups\n   */\n  itemMatchesFilterGroups(itemCategories) {\n    const groupMatches = Array.from(this.filterGroups.values()).map((group) => {\n      if (group.filters.size === 0) return true;\n\n      return group.operator === \"OR\"\n        ? Array.from(group.filters).some((filter) => itemCategories.has(filter))\n        : Array.from(group.filters).every((filter) =>\n            itemCategories.has(filter)\n          );\n    });\n\n    return this.afs.options.get(\"groupMode\") === \"OR\"\n      ? groupMatches.some((matches) => matches)\n      : groupMatches.every((matches) => matches);\n  }\n\n  /**\n   * Emit filter-related events\n   * @private\n   * @param {Set} previouslyVisible - Previously visible items\n   * @param {Set} nowVisible - Currently visible items\n   */\n  emitFilterEvents(previouslyVisible, nowVisible) {\n    // Determine added and removed items\n    const added = new Set(\n      [...nowVisible].filter((item) => !previouslyVisible.has(item))\n    );\n    const removed = new Set(\n      [...previouslyVisible].filter((item) => !nowVisible.has(item))\n    );\n\n    // Emit filter event\n    this.afs.emit(\"filter\", {\n      activeFilters: Array.from(this.activeFilters),\n      visibleItems: nowVisible.size,\n      added: added.size,\n      removed: removed.size,\n    });\n\n    // Emit specific events for added/removed items\n    if (added.size > 0) {\n      this.afs.emit(\"itemsShown\", { items: added });\n    }\n    if (removed.size > 0) {\n      this.afs.emit(\"itemsHidden\", { items: removed });\n    }\n  }\n\n  /**\n   * Add or update a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   * @param {string[]} filters - Array of filter values\n   * @param {string} [operator='OR'] - Operator within group\n   */\n  addFilterGroup(groupId, filters, operator = \"OR\") {\n    this.afs.logger.debug(`Adding filter group: ${groupId}`);\n\n    if (!Array.isArray(filters)) {\n      this.afs.logger.error(\"Filters must be an array\");\n      return;\n    }\n\n    const validOperator = operator.toUpperCase();\n    if (![\"AND\", \"OR\"].includes(validOperator)) {\n      this.afs.logger.warn(`Invalid operator: ${operator}, defaulting to OR`);\n      operator = \"OR\";\n    }\n\n    this.filterGroups.set(groupId, {\n      filters: new Set(filters),\n      operator: validOperator,\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   */\n  removeFilterGroup(groupId) {\n    if (this.filterGroups.delete(groupId)) {\n      this.afs.logger.debug(`Removed filter group: ${groupId}`);\n\n      if (this.filterGroups.size === 0) {\n        this.resetFilters();\n      } else {\n        this.applyFilters();\n      }\n    }\n  }\n\n  /**\n   * Set filter group mode\n   * @public\n   * @param {string} mode - Mode for combining groups\n   */\n  setGroupMode(mode) {\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"groupMode\", validMode);\n      this.afs.logger.debug(`Set group mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid group mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Add filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  addFilter(filter) {\n    this.afs.logger.debug(`Adding filter: ${filter}`);\n\n    if (filter === \"*\") {\n      this.resetFilters();\n      return;\n    }\n\n    // Extract filter type (e.g., 'date', 'canton')\n    const [filterType] = filter.split(\":\");\n\n    // Remove any existing filter of the same type\n    this.activeFilters.forEach((existingFilter) => {\n      if (existingFilter.startsWith(`${filterType}:`)) {\n        this.activeFilters.delete(existingFilter);\n      }\n    });\n\n    // Remove the all filter if it exists\n    this.activeFilters.delete(\"*\");\n\n    // Add the new filter\n    this.activeFilters.add(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.add(this.afs.options.get(\"activeClass\"));\n      } else if (value === \"*\") {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Emit a custom event for filter removal\n    this.afs.emit(\"filterRemoved\", { filter, activeFilters: Array.from(this.activeFilters) });\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Set filter mode\n   * @public\n   * @param {string} mode - Filter mode ('AND' or 'OR')\n   */\n  setFilterMode(mode) {\n    this.afs.logger.debug(`Setting filter mode to: ${mode}`);\n\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"filterMode\", validMode);\n      this.afs.logger.debug(`Set filter mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid filter mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Set logic for specific filter types\n   * @public\n   * @param {Object|string} typeOrConfig - Either an object mapping types to logic, or a single type name\n   * @param {string|Object} [logic] - Logic mode ('AND' or 'OR') or config object {mode: 'OR', multi: true}\n   * @example\n   * // Set multiple types at once (simple format)\n   * afs.filter.setFilterTypeLogic({ brand: 'OR', category: 'AND', powersource: 'OR' });\n   * \n   * // Set multiple types with extended format\n   * afs.filter.setFilterTypeLogic({ \n   *   brand: {mode: 'OR', multi: true},\n   *   category: 'AND',\n   *   features: {mode: 'OR', multi: false}\n   * });\n   * \n   * // Set single type (simple)\n   * afs.filter.setFilterTypeLogic('brand', 'AND');\n   * \n   * // Set single type (extended)\n   * afs.filter.setFilterTypeLogic('brand', {mode: 'OR', multi: true});\n   */\n  setFilterTypeLogic(typeOrConfig, logic) {\n    if (typeof typeOrConfig === 'object' && typeOrConfig !== null && !Array.isArray(typeOrConfig)) {\n      // Setting multiple types\n      const currentLogic = this.afs.options.get(\"filterTypeLogic\") || {};\n      const newLogic = { ...currentLogic };\n      \n      for (const [type, typeConfig] of Object.entries(typeOrConfig)) {\n        if (typeof typeConfig === 'string') {\n          // Simple string format\n          const validLogic = typeConfig.toUpperCase();\n          if ([\"AND\", \"OR\"].includes(validLogic)) {\n            newLogic[type] = validLogic;\n            this.afs.logger.debug(`Set filter type '${type}' logic to: ${validLogic}`);\n          } else {\n            this.afs.logger.warn(`Invalid logic for type '${type}': ${typeConfig}`);\n          }\n        } else if (typeof typeConfig === 'object' && typeConfig !== null) {\n          // Extended object format: {mode: 'OR', multi: true}\n          const mode = (typeConfig.mode || 'OR').toUpperCase();\n          if ([\"AND\", \"OR\"].includes(mode)) {\n            newLogic[type] = {\n              mode: mode,\n              multi: typeConfig.multi === true\n            };\n            this.afs.logger.debug(`Set filter type '${type}' to: mode=${mode}, multi=${typeConfig.multi}`);\n          } else {\n            this.afs.logger.warn(`Invalid mode for type '${type}': ${typeConfig.mode}`);\n          }\n        } else {\n          this.afs.logger.warn(`Invalid config for type '${type}':`, typeConfig);\n        }\n      }\n      \n      this.afs.options.set(\"filterTypeLogic\", newLogic);\n    } else if (typeof typeOrConfig === 'string' && logic !== undefined) {\n      // Setting single type\n      const type = typeOrConfig;\n      \n      if (typeof logic === 'string') {\n        // Simple string format\n        const validLogic = logic.toUpperCase();\n        if ([\"AND\", \"OR\"].includes(validLogic)) {\n          const currentLogic = this.afs.options.get(\"filterTypeLogic\") || {};\n          currentLogic[type] = validLogic;\n          this.afs.options.set(\"filterTypeLogic\", currentLogic);\n          this.afs.logger.debug(`Set filter type '${type}' logic to: ${validLogic}`);\n        } else {\n          this.afs.logger.warn(`Invalid filter logic: ${logic}`);\n        }\n      } else if (typeof logic === 'object' && logic !== null) {\n        // Extended object format\n        const mode = (logic.mode || 'OR').toUpperCase();\n        if ([\"AND\", \"OR\"].includes(mode)) {\n          const currentLogic = this.afs.options.get(\"filterTypeLogic\") || {};\n          currentLogic[type] = {\n            mode: mode,\n            multi: logic.multi === true\n          };\n          this.afs.options.set(\"filterTypeLogic\", currentLogic);\n          this.afs.logger.debug(`Set filter type '${type}' to: mode=${mode}, multi=${logic.multi}`);\n        } else {\n          this.afs.logger.warn(`Invalid filter mode: ${logic.mode}`);\n        }\n      } else {\n        this.afs.logger.warn(`Invalid logic for type '${type}': ${logic}`);\n      }\n    }\n    \n    // Re-apply filters with new logic\n    this.applyFilters();\n  }\n\n  /**\n   * Set a filter type to always use exclusive toggle (OR logic)\n   * @public\n   * @param {string|string[]} types - Filter type(s) to set as exclusive (e.g., 'category' or ['category', 'brand'])\n   * @param {boolean} exclusive - Whether to set as exclusive (true) or remove exclusive behavior (false)\n   */\n  setFilterTypeExclusive(types, exclusive = true) {\n    const typeArray = Array.isArray(types) ? types : [types];\n    \n    typeArray.forEach(type => {\n      if (exclusive) {\n        this.exclusiveFilterTypes.add(type);\n        this.afs.logger.debug(`Set filter type '${type}' as exclusive`);\n      } else {\n        this.exclusiveFilterTypes.delete(type);\n        this.afs.logger.debug(`Removed exclusive behavior from filter type '${type}'`);\n      }\n    });\n    \n    // Re-apply filters to ensure consistency\n    this.applyFilters();\n  }\n\n  /**\n   * Toggle a filter with exclusive behavior for its type (OR logic)\n   * This will deactivate other filters of the same type regardless of global filter mode\n   * @public\n   * @param {string} filterValue - Filter value to toggle (e.g., 'category:tech')\n   */\n  toggleFilterExclusive(filterValue) {\n    this.afs.logger.debug(`Toggling filter exclusively: ${filterValue}`);\n    \n    // Extract filter type from the filter value\n    const [filterType] = filterValue.split(\":\");\n    \n    if (!filterType || !filterValue.includes(\":\")) {\n      this.afs.logger.warn(\"Filter value must be in format 'type:value'\");\n      return;\n    }\n    \n    // Remove \"all\" filter\n    this.activeFilters.delete(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.remove(this.afs.options.get(\"activeClass\"));\n    }\n    \n    // Find the button for this filter\n    let targetButton = null;\n    this.filterButtons.forEach((value, button) => {\n      if (value === filterValue) {\n        targetButton = button;\n      }\n    });\n    \n    if (!targetButton) {\n      this.afs.logger.warn(`No button found for filter: ${filterValue}`);\n      return;\n    }\n    \n    // Check if this filter is currently active\n    const isCurrentlyActive = this.activeFilters.has(filterValue);\n    \n    // Deactivate all filters of the same type\n    this.filterButtons.forEach((value, btn) => {\n      if (value.startsWith(`${filterType}:`)) {\n        btn.classList.remove(this.afs.options.get(\"activeClass\"));\n        this.activeFilters.delete(value);\n      }\n    });\n    \n    // If the filter wasn't active, activate it\n    if (!isCurrentlyActive) {\n      targetButton.classList.add(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.add(filterValue);\n    } else {\n      // If no filters remain active, reset to \"all\"\n      if (this.activeFilters.size === 0) {\n        this.resetFilters();\n        return;\n      }\n    }\n    \n    this.applyFilters();\n    this.afs.urlManager.updateURL();\n    \n    // Emit event\n    this.afs.emit(\"filterToggledExclusive\", {\n      filter: filterValue,\n      type: filterType,\n      activeFilters: Array.from(this.activeFilters),\n    });\n  }\n\n  /**\n   * Get active filters\n   * @public\n   * @returns {Set} Active filters\n   */\n  getActiveFilters() {\n    return new Set(this.activeFilters);\n  }\n\n  /**\n   * Get filter groups\n   * @public\n   * @returns {Map} Filter groups\n   */\n  getFilterGroups() {\n    return new Map(this.filterGroups);\n  }\n\n  /**\n   * Add filter button dynamically\n   * @public\n   * @param {HTMLElement} button - Button element\n   * @param {string} filter - Filter value\n   */\n  addFilterButton(button, filter) {\n    if (!filter) {\n      this.afs.logger.warn(\"Filter value required for new filter button\");\n      return;\n    }\n\n    this.filterButtons.set(button, filter);\n    this.bindFilterEvent(button);\n    this.afs.logger.debug(`Added filter button for: ${filter}`);\n  }\n\n  /**\n   * Sort items with automatic order detection\n   * @public\n   * @param {string} key - The data attribute key to sort by\n   */\n  sortWithOrder(key) {\n    this.afs.logger.debug(`Sorting by ${key}`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Toggle sort order for the key\n      const currentOrder = this.sortOrders.get(key) || \"asc\";\n      const newOrder = currentOrder === \"asc\" ? \"desc\" : \"asc\";\n      this.sortOrders.set(key, newOrder);\n\n      // Determine sort type from first item\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, newOrder);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Emit event\n      this.afs.emit(\"sort\", { key, order: newOrder });\n\n      this.afs.logger.info(`Sorted items by ${key} in ${newOrder} order`);\n\n      return newOrder; // Return the new order for UI updates\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      // Use the existing reorderItems method to update the DOM\n      this.reorderItems(items);\n\n      // Clear any existing sort orders as we've shuffled\n      this.sortOrders.clear();\n\n      this.afs.emit(\"shuffled\", {\n        itemCount: items.length,\n      });\n\n      this.afs.logger.debug(\"Items shuffled successfully\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from item value\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @returns {string} Sort type ('number', 'date', or 'string')\n   */\n  determineSortType(item, key) {\n    this.afs.logger.debug(`Determining sort type for ${key}`);\n\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Parsed value for sorting\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value) || 0;\n      case \"date\":\n        return new Date(value).getTime() || 0;\n      default:\n        return (value || \"\").toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values for sorting\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} order - Sort order ('asc' or 'desc')\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, order) {\n    // Handle null/undefined values\n    if (a === null || a === undefined) return order === \"asc\" ? 1 : -1;\n    if (b === null || b === undefined) return order === \"asc\" ? -1 : 1;\n\n    // Compare values\n    const comparison = a < b ? -1 : a > b ? 1 : 0;\n    return order === \"asc\" ? comparison : -comparison;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const fragment = document.createDocumentFragment();\n    items.forEach((item) => fragment.appendChild(item));\n    this.afs.container.appendChild(fragment);\n  }\n\n  /**\n   * Get current sort order for key\n   * @public\n   * @param {string} key - Sort key\n   * @returns {string} Current sort order ('asc' or 'desc')\n   */\n  getCurrentSortOrder(key) {\n    return this.sortOrders.get(key) || \"asc\";\n  }\n\n  /**\n   * Clear all sort orders\n   * @public\n   */\n  clearSortOrders() {\n    this.afs.logger.debug(\"Clearing all sort orders\");\n\n    this.sortOrders.clear();\n    this.afs.emit(\"sortCleared\");\n  }\n\n  /**\n   * Clear all filters, url and search\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters and search\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Update filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear checkboxes\n    const checkboxes = document.querySelectorAll(\n      `${this.afs.options.get(\"filterButtonSelector\")}[type=\"checkbox\"]`\n    );\n    checkboxes.forEach((checkbox) => {\n      if (checkbox.classList.contains(this.afs.options.get(\"activeClass\"))) {\n        checkbox.checked = false;\n        checkbox.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Clear search\n    if (this.afs.search) {\n      this.afs.search.setValue(\"\");\n    }\n\n    // Clear filter groups and sort orders\n    this.filterGroups.clear();\n    this.sortOrders.clear();\n\n    // Apply changes and ensure counter is updated\n    this.applyFilters();\n\n    // Update URL if URLManager exists\n    if (this.afs.urlManager) {\n      this.afs.urlManager.updateURL();\n    }\n\n    // Emit event\n    this.afs.emit(\"filtersCleared\");\n\n    this.afs.logger.info(\"All filters cleared\");\n  }\n\n  /**\n   * Refresh the view\n   * @public\n   */\n  refresh() {\n    this.afs.logger.debug(\"Refreshing view\");\n\n    this.applyFilters();\n    this.afs.updateCounter();\n  }\n\n  removeFilterButton(button) {\n    this.filterButtons.delete(button);\n    button.removeEventListener(\"click\", this.handleFilterClick);\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.filterButtons.forEach((_, button) => {\n      this.removeFilterButton(button);\n    });\n    this.filterButtons.clear();\n    this.activeFilters.clear();\n    this.filterGroups.clear();\n    this.afs.logger.debug(\"Filter functionality destroyed\");\n  }\n\n  /**\n   * Get the original display type for an item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {string} Original display type or 'block' if not stored\n   */\n  getItemDisplayType(item) {\n    return this.itemDisplayTypes.get(item) || \"block\";\n  }\n\n  /**\n   * Show an item with its original display value\n   * @private\n   * @param {HTMLElement} item - DOM element to show\n   */\n  showItem(item) {\n    // Remove hidden class\n    item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n    \n    // Get the original display type and restore it\n    const originalDisplay = this.getItemDisplayType(item);\n    \n    // Only set display if it was previously hidden\n    if (item.style.display === 'none') {\n      // If we have a stored original display type, use it\n      // Otherwise, remove the inline style to let CSS take over\n      if (originalDisplay && originalDisplay !== 'none') {\n        item.style.display = originalDisplay;\n      } else {\n        item.style.display = '';\n      }\n    }\n    \n    // Reset other hiding properties\n    item.style.opacity = \"1\";\n    item.style.visibility = \"visible\";\n    item.style.filter = \"none\";\n    item.style.transform = \"\";\n  }\n}\n","/**\n * @fileoverview Utility functions for AFS\n */\n\n/**\n * Debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Delay in milliseconds\n * @param {boolean} [immediate=false] - Execute immediately\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, wait, immediate = false) => {\n    let timeout;\n    return function executedFunction(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  \n  /**\n   * Throttle function\n   * @param {Function} func - Function to throttle\n   * @param {number} limit - Time limit in milliseconds\n   * @returns {Function} Throttled function\n   */\n  export const throttle = (func, limit) => {\n    let inThrottle;\n    return function executedFunction(...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n  \n  /**\n   * Parse date string according to format\n   * @param {string} dateStr - Date string to parse\n   * @param {string} format - Date format\n   * @returns {Date|null} Parsed date object or null if invalid\n   */\n  export const parseDate = (dateStr, format) => {\n    const formats = {\n      'YYYY-MM-DD': /^\\d{4}-\\d{2}-\\d{2}$/,\n      'DD-MM-YYYY': /^\\d{2}-\\d{2}-\\d{4}$/,\n      'MM/DD/YYYY': /^\\d{2}\\/\\d{2}\\/\\d{4}$/\n    };\n  \n    try {\n      if (formats[format]?.test(dateStr)) {\n        const parts = dateStr.split(/[-\\/]/);\n        switch (format) {\n          case 'YYYY-MM-DD':\n            return new Date(parts[0], parts[1] - 1, parts[2]);\n          case 'DD-MM-YYYY':\n            return new Date(parts[2], parts[1] - 1, parts[0]);\n          case 'MM/DD/YYYY':\n            return new Date(parts[2], parts[0] - 1, parts[1]);\n        }\n      }\n      return new Date(dateStr);\n    } catch {\n      return null;\n    }\n  }\n  \n  /**\n   * Get element's computed style value\n   * @param {HTMLElement} element - Target element\n   * @param {string} property - CSS property\n   * @returns {string} Computed style value\n   */\n  export const getStyle = (element, property) => {\n    return window.getComputedStyle(element).getPropertyValue(property);\n  }\n  \n  /**\n   * Check if element matches a selector\n   * @param {HTMLElement} element - Element to check\n   * @param {string} selector - CSS selector\n   * @returns {boolean} Whether element matches selector\n   */\n  export const matches = (element, selector) => {\n    return (\n      element.matches ||\n      element.matchesSelector ||\n      element.msMatchesSelector ||\n      element.mozMatchesSelector ||\n      element.webkitMatchesSelector ||\n      element.oMatchesSelector\n    ).call(element, selector);\n  }\n  \n  /**\n   * Deep clone an object\n   * @param {Object} obj - Object to clone\n   * @returns {Object} Cloned object\n   */\n  export const deepClone = (obj) => {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj);\n    if (obj instanceof Array) return obj.map(item => deepClone(item));\n    if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item)));\n    if (obj instanceof Map) return new Map([...obj].map(([k, v]) => [deepClone(k), deepClone(v)]));\n    \n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\n    );\n  }\n  \n  /**\n   * Generate unique ID\n   * @param {string} [prefix=''] - ID prefix\n   * @returns {string} Unique ID\n   */\n  export const uniqueId = (prefix = '') => {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Check if value is plain object\n   * @param {any} value - Value to check\n   * @returns {boolean} Whether value is plain object\n   */\n  export function isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n  }\n","/**\n * @fileoverview Input range filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class InputRangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n  }\n\n  /**\n   * @typedef {Object} InputRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {number} [min] - Minimum value\n   * @property {number} [max] - Maximum value\n   * @property {number} [step] - Step value\n   * @property {string} [label] - Label for the input range\n   */\n\n  /**\n   * Add input range filter\n   * @param {InputRangeOptions} options - Input range options\n   */\n  addInputRange({ key, container, min, max, step = 1, label = '' }) {\n    this.afs.logger.debug(`Adding input range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for input range');\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Create input elements\n    const elements = this.createInputElements(label);\n    const state = this.initializeState(min, max, step);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateInputUI(key);\n\n    this.afs.logger.info(`Input range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const value = parseFloat(item.dataset[key]);\n          return isNaN(value) ? null : value;\n        })\n        .filter(value => value !== null);\n\n      if (values.length === 0) {\n        return {\n          min: 0,\n          max: 100\n        };\n      }\n\n      return {\n        min: Math.min(...values),\n        max: Math.max(...values)\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating range:', error);\n      return {\n        min: 0,\n        max: 100\n      };\n    }\n  }\n\n  /**\n   * Create input elements\n   * @private\n   */\n  /**\n * Create input elements\n * @private\n */\ncreateInputElements(label) {\n  const container = document.createElement('div');\n  container.className = 'afs-input-range-container';\n\n  if (label) {\n      const labelElement = document.createElement('div');\n      labelElement.className = 'afs-input-range-label';\n      labelElement.textContent = label;\n      container.appendChild(labelElement);\n  }\n\n  // Min input wrapper\n  const minWrapper = document.createElement('div');\n  minWrapper.className = 'afs-input-wrapper';\n  \n  const minLabel = document.createElement('label');\n  minLabel.textContent = 'Min';\n  minLabel.className = 'afs-input-label';\n  \n  const minInput = document.createElement('input');\n  minInput.type = 'number';\n  minInput.className = 'afs-input min';\n\n  minWrapper.appendChild(minLabel);\n  minWrapper.appendChild(minInput);\n\n  // Max input wrapper\n  const maxWrapper = document.createElement('div');\n  maxWrapper.className = 'afs-input-wrapper';\n  \n  const maxLabel = document.createElement('label');\n  maxLabel.textContent = 'Max';\n  maxLabel.className = 'afs-input-label';\n  \n  const maxInput = document.createElement('input');\n  maxInput.type = 'number';\n  maxInput.className = 'afs-input max';\n\n  maxWrapper.appendChild(maxLabel);\n  maxWrapper.appendChild(maxInput);\n\n  container.appendChild(minWrapper);\n  container.appendChild(maxWrapper);\n\n  return {\n      container,\n      minInput,\n      maxInput\n  };\n}\n\n  /**\n   * Initialize input range state\n   * @private\n   */\n  initializeState(min, max, step) {\n    return {\n      min,\n      max,\n      step,\n      currentMin: min,\n      currentMax: max\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minInput, maxInput } = elements;\n\n    const handleInputChange = debounce(() => {\n      const minValue = parseFloat(minInput.value);\n      const maxValue = parseFloat(maxInput.value);\n\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        state.currentMin = Math.max(state.min, Math.min(maxValue, minValue));\n        state.currentMax = Math.min(state.max, Math.max(minValue, maxValue));\n        this.updateInputUI(key);\n        this.applyFilter(key);\n      }\n    }, 300);\n\n    minInput.addEventListener('input', handleInputChange);\n    maxInput.addEventListener('input', handleInputChange);\n  }\n\n  /**\n   * Update input UI\n   * @private\n   */\n  updateInputUI(key) {\n    try {\n      const { state, elements } = this.activeRanges.get(key);\n      const { minInput, maxInput } = elements;\n\n      // Set constraints\n      minInput.min = state.min;\n      minInput.max = state.max;\n      minInput.step = state.step;\n      maxInput.min = state.min;\n      maxInput.max = state.max;\n      maxInput.step = state.step;\n\n      // Set current values\n      minInput.value = state.currentMin;\n      maxInput.value = state.currentMax;\n    } catch (error) {\n      this.afs.logger.error('Error updating input UI:', error);\n    }\n  }\n\n  /**\n   * Apply filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.info(`Applying input filter for ${key}`);\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach(item => {\n      try {\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        const itemValue = parseFloat(item.dataset[key]);\n        if (isNaN(itemValue)) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        if (itemValue >= state.currentMin && itemValue <= state.currentMax) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item:', error);\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('inputRangeFilter', {\n      key,\n      min: state.currentMin,\n      max: state.currentMax\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRange(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateInputUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove input range\n   * @param {string} key - Range key\n   */\n  removeInputRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Input range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Search functionality for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class Search {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.searchInput = null;\n    this.searchKeys = ['title']; // Default search keys\n    this.minSearchLength = 2;\n    this.highlightClass = 'afs-highlight';\n    this.setupSearch();\n  }\n\n  /**\n   * Setup search functionality\n   * @private\n   */\n  setupSearch() {\n    const searchSelector = this.afs.options.get('searchInputSelector');\n    if (!searchSelector) return;\n\n    this.searchInput = document.querySelector(searchSelector);\n    if (!this.searchInput) {\n      this.afs.logger.warn(`Search input not found: ${searchSelector}`);\n      return;\n    }\n\n    // Configure search\n    this.searchKeys = this.afs.options.get('searchKeys') || this.searchKeys;\n    this.minSearchLength = this.afs.options.get('minSearchLength') || this.minSearchLength;\n\n    // Bind events\n    this.bindSearchEvents();\n    this.afs.logger.debug('Search functionality initialized');\n  }\n\n  /**\n   * Bind search events\n   * @private\n   */\n  bindSearchEvents() {\n    if (!this.searchInput) return;\n\n    // Create debounced search function\n    const debouncedSearch = debounce((e) => {\n      this.search(e.target.value);\n    }, this.afs.options.get('debounceTime') || 300);\n\n    // Bind input event\n    this.searchInput.addEventListener('input', debouncedSearch);\n\n    // Bind clear event\n    this.searchInput.addEventListener('search', (e) => {\n      if (!e.target.value) {\n        this.clearSearch();\n      }\n    });\n\n    // Handle Enter key\n    this.searchInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.search(e.target.value);\n      }\n    });\n  }\n\n  /**\n   * Perform search\n   * @public\n   * @param {string} query - Search query\n   */\n  search(query) {\n    this.afs.logger.debug('Performing search:', query);\n    const normalizedQuery = this.normalizeQuery(query);\n\n    // Update state\n    this.afs.state.setState('search.query', normalizedQuery);\n    let matches = 0;\n\n    // Special case for empty query\n    if (!normalizedQuery) {\n      this.clearSearch();\n      return;\n    }\n\n    // Skip if query is too short\n    if (normalizedQuery.length < this.minSearchLength) {\n      this.afs.logger.debug('Search query too short');\n      return;\n    }\n\n    try {\n      // Create search regex\n      const regex = this.createSearchRegex(normalizedQuery);\n\n      // Track animation promises\n      const animationPromises = [];\n\n      // Search through items\n      this.afs.items.forEach(item => {\n        const searchText = this.getItemSearchText(item);\n        const matchesSearch = regex.test(searchText);\n\n        const promise = new Promise(resolve => {\n          if (matchesSearch) {\n            this.afs.showItem(item);\n            this.highlightMatches(item, regex);\n            matches++;\n          } else {\n            this.afs.hideItem(item);\n            this.removeHighlights(item);\n          }\n          // Resolve after animation duration\n          setTimeout(resolve, this.afs.options.get('animation.duration') || 300);\n        });\n        animationPromises.push(promise);\n      });\n\n      // Wait for all animations to complete\n      Promise.all(animationPromises).then(() => {\n        // Ensure hidden items are properly hidden with display: none\n        this.afs.items.forEach(item => {\n          const visibleItems = this.afs.state.getState().items.visible;\n          if (!visibleItems.has(item)) {\n            item.style.display = 'none';\n          } else {\n            item.style.display = '';\n            item.style.opacity = '1';\n          }\n        });\n\n        // Update URL and emit event\n        this.afs.urlManager.updateURL();\n        this.afs.emit('search', {\n          query: normalizedQuery,\n          matches,\n          total: this.afs.items.length\n        });\n\n        // Update counter\n        this.afs.updateCounter();\n        \n        this.afs.logger.info(`Search complete. Found ${matches} matches`);\n      });\n    } catch (error) {\n      this.afs.logger.error('Search error:', error);\n    }\n  }\n\n  /**\n   * Normalize search query\n   * @private\n   * @param {string} query - Raw search query\n   * @returns {string} Normalized query\n   */\n  normalizeQuery(query) {\n    return query\n      .toLowerCase()\n      .trim()\n      .replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Create search regex\n   * @private\n   * @param {string} query - Normalized search query\n   * @returns {RegExp} Search regex\n   */\n  createSearchRegex(query) {\n    // Escape special regex characters\n    const escapedQuery = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    \n    // Split into words\n    const words = escapedQuery.split(' ').filter(Boolean);\n    \n    // Create regex pattern that matches parts of words\n    // Using lookaheads to ensure all words are present somewhere in the string\n    const pattern = words\n      .map(word => `(?=.*${word})`)\n      .join('');\n    \n    return new RegExp(pattern, 'i');\n  }\n\n  /**\n   * Get searchable text from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {string} Searchable text\n   */\n  getItemSearchText(item) {\n    return this.searchKeys\n      .map(key => item.dataset[key] || '')\n      .join(' ')\n      .toLowerCase();\n  }\n\n  /**\n   * Highlight search matches\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {RegExp} regex - Search regex\n   */\n  highlightMatches(item, regex) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const text = target.textContent;\n      const words = this.afs.state.getState().search.query.split(' ');\n\n      let highlightedText = text;\n      words.forEach(word => {\n        if (!word) return;\n        // Match parts of words using more flexible pattern (no word boundary)\n        const wordRegex = new RegExp(`(${word.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n        highlightedText = highlightedText.replace(\n          wordRegex,\n          `<span class=\"${this.highlightClass}\">$1</span>`\n        );\n      });\n\n      target.innerHTML = highlightedText;\n    });\n  }\n\n  /**\n   * Remove highlights\n   * @private\n   * @param {HTMLElement} item - DOM element\n   */\n  removeHighlights(item) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const highlights = target.querySelectorAll(`.${this.highlightClass}`);\n      highlights.forEach(highlight => {\n        const text = highlight.textContent;\n        highlight.replaceWith(text);\n      });\n    });\n  }\n\n  /**\n   * Clear search\n   * @public\n   */\n  clearSearch() {\n    this.afs.logger.debug('Clearing search');\n\n    // Clear input\n    if (this.searchInput) {\n      this.searchInput.value = '';\n    }\n\n    // Clear state\n    this.afs.state.setState('search.query', '');\n\n    // Track animation promises\n    const animationPromises = [];\n\n    // Show all items with animation\n    this.afs.items.forEach(item => {\n      const promise = new Promise(resolve => {\n        this.afs.showItem(item);\n        this.removeHighlights(item);\n        // Resolve after animation duration\n        setTimeout(resolve, this.afs.options.get('animation.duration') || 300);\n      });\n      animationPromises.push(promise);\n    });\n\n    // Wait for all animations to complete\n    Promise.all(animationPromises).then(() => {\n      // Ensure all items are visible\n      this.afs.items.forEach(item => {\n        item.style.display = '';\n        item.style.opacity = '1';\n      });\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit('searchCleared');\n\n      // Update counter\n      this.afs.updateCounter();\n    });\n  }\n\n  /**\n   * Set search value\n   * @public\n   * @param {string} value - Search value\n   */\n  setValue(value) {\n    if (this.searchInput) {\n      this.searchInput.value = value;\n    }\n    this.search(value);\n  }\n\n  /**\n   * Get current search value\n   * @public\n   * @returns {string} Current search value\n   */\n  getValue() {\n    return this.afs.state.getState().search.query;\n  }\n\n  /**\n   * Update search configuration\n   * @public\n   * @param {Object} config - Search configuration\n   */\n  updateConfig({\n    searchKeys,\n    minSearchLength,\n    highlightClass,\n    debounceTime\n  } = {}) {\n    if (searchKeys) this.searchKeys = searchKeys;\n    if (minSearchLength) this.minSearchLength = minSearchLength;\n    if (highlightClass) this.highlightClass = highlightClass;\n    if (debounceTime) {\n      this.bindSearchEvents(); // Rebind with new debounce time\n    }\n  }\n\n  /**\n   * Destroy search functionality\n   * @public\n   */\n  destroy() {\n    if (this.searchInput) {\n      this.searchInput.removeEventListener('input', this.debouncedSearch);\n      this.searchInput.removeEventListener('search', this.handleClear);\n      this.searchInput.removeEventListener('keypress', this.handleEnter);\n    }\n    this.clearSearch();\n  }\n}","/**\n * @fileoverview Sort functionality for AFS\n */\n\nexport class Sort {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.sortButtons = new Map();\n    this.setupSort();\n  }\n\n  /**\n   * Setup sort functionality\n   * @private\n   */\n  setupSort() {\n    const sortSelector = this.afs.options.get(\"sortButtonSelector\");\n    if (!sortSelector) return;\n\n    // Find and setup sort buttons\n    const buttons = document.querySelectorAll(sortSelector);\n    \n    if (buttons.length === 0) {\n      this.afs.logger.warn(\"No sort buttons found with selector:\", sortSelector);\n      return;\n    }\n    \n    buttons.forEach((button) => {\n      const key = button.dataset.sortKey;\n      if (!key) {\n        this.afs.logger.warn(\n          \"Sort button missing data-sort-key attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.sortButtons.set(button, {\n        key,\n        direction: button.dataset.sortDirection || \"asc\",\n      });\n\n      this.bindSortEvent(button);\n    });\n\n    this.afs.logger.debug(\"Sort functionality initialized\");\n  }\n\n  /**\n   * Bind sort event to button\n   * @private\n   * @param {HTMLElement} button - Sort button\n   */\n  bindSortEvent(button) {\n    this.afs.logger.debug(\"Binding sort event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const sortData = this.sortButtons.get(button);\n      if (!sortData) return;\n\n      // Toggle direction\n      sortData.direction = sortData.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.sortButtons.set(button, sortData);\n\n      // Update button state\n      this.updateSortButtonState(button, sortData);\n\n      // Perform sort\n      this.sort(sortData.key, sortData.direction);\n    });\n  }\n\n  /**\n   * Update sort button visual state\n   * @private\n   * @param {HTMLElement} button - Sort button\n   * @param {Object} sortData - Sort data\n   */\n  updateSortButtonState(button, sortData) {\n    // Remove active class from all buttons\n    this.sortButtons.forEach((_, btn) => {\n      btn.classList.remove(this.afs.options.get(\"activeSortClass\"));\n    });\n\n    // Add active class to current button\n    button.classList.add(this.afs.options.get(\"activeSortClass\"));\n\n    // Update direction indicator\n    const indicator = button.querySelector(\".sort-direction\");\n    if (indicator) {\n      indicator.textContent = sortData.direction === \"asc\" ? \"↑\" : \"↓\";\n    }\n  }\n\n  /**\n   * Sort items\n   * @public\n   * @param {string} key - Sort key\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   * @returns {boolean} Success status\n   */\n  sort(key, direction = \"asc\") {\n    this.afs.logger.debug(`Sorting by ${key} in ${direction} order`);\n\n    try {\n      if (!key) {\n        throw new Error(\"Sort key is required\");\n      }\n      \n      if (![\"asc\", \"desc\"].includes(direction.toLowerCase())) {\n        this.afs.logger.warn(`Invalid sort direction: ${direction}, defaulting to \"asc\"`);\n        direction = \"asc\";\n      }\n\n      // Update state\n      this.afs.state.setState(\"sort.current\", { key, direction });\n\n      // Get all items as array\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      // Determine sort type\n      const sortType = this.determineSortType(items[0], key);\n      this.afs.logger.debug(`Determined sort type for key \"${key}\": ${sortType}`);\n\n      // Sort items\n      items.sort((a, b) => {\n        try {\n          const valueA = this.getSortValue(a, key, sortType);\n          const valueB = this.getSortValue(b, key, sortType);\n          return this.compareValues(valueA, valueB, direction);\n        } catch (error) {\n          this.afs.logger.error(\"Error during sort comparison:\", error);\n          return 0; // Keep original order for failed comparisons\n        }\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sort\", { key, direction, sortType, itemCount: items.length });\n\n      this.afs.logger.info(`Sorted ${items.length} items by ${key} ${direction} (${sortType})`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Determine sort type from item\n   * @private\n   * @param {HTMLElement} item - First item\n   * @param {string} key - Sort key\n   * @returns {string} Sort type\n   */\n  determineSortType(item, key) {\n    // Guard against empty items array\n    if (!item) {\n      this.afs.logger.warn(`Cannot determine sort type: No items available for key ${key}`);\n      return \"string\"; // Default to string sorting\n    }\n\n    // Check if dataset exists and has the key\n    if (!item.dataset || !(key in item.dataset)) {\n      this.afs.logger.warn(`Item missing dataset key: ${key}`, item);\n      return \"string\";\n    }\n\n    const value = item.dataset[key];\n    \n    // Empty value check\n    if (value === undefined || value === null || value === \"\") {\n      return \"string\";\n    }\n\n    // Type detection with more robust checks\n    if (!isNaN(parseFloat(value)) && isFinite(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) {\n      // Validate it's actually a valid date\n      const date = new Date(value);\n      return !isNaN(date.getTime()) ? \"date\" : \"string\";\n    }\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Sort value\n   */\n  getSortValue(item, key, type) {\n    // Handle undefined or null item\n    if (!item) {\n      this.afs.logger.warn(\"Undefined item in getSortValue\");\n      return null;\n    }\n\n    // Handle undefined dataset or key\n    if (!item.dataset || !Object.prototype.hasOwnProperty.call(item.dataset, key)) {\n      this.afs.logger.warn(`Missing data attribute: ${key} on item`, item);\n      return type === \"number\" ? 0 : type === \"date\" ? 0 : \"\";\n    }\n\n    const value = item.dataset[key];\n    \n    // Handle empty values\n    if (value === undefined || value === null || value === \"\") {\n      return type === \"number\" ? 0 : type === \"date\" ? 0 : \"\";\n    }\n\n    switch (type) {\n      case \"number\":\n        const num = parseFloat(value);\n        return isNaN(num) ? 0 : num;\n      case \"date\":\n        const date = new Date(value).getTime();\n        return isNaN(date) ? 0 : date;\n      default:\n        return String(value).toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} direction - Sort direction\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, direction) {\n    const modifier = direction === \"asc\" ? 1 : -1;\n\n    if (a === b) return 0;\n    if (a === undefined || a === null) return 1;\n    if (b === undefined || b === null) return -1;\n\n    return a > b ? modifier : -modifier;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const containerSelector = this.afs.options.get(\"containerSelector\");\n    const container = document.querySelector(containerSelector);\n    \n    if (!container) {\n      this.afs.logger.error(\"Container not found:\", containerSelector);\n      return;\n    }\n    \n    // Performance optimization: only move elements if needed\n    // Use document position to determine if reordering is necessary\n    let needsReordering = false;\n    \n    // Check if any items are out of order\n    for (let i = 0; i < items.length - 1; i++) {\n      if (!(items[i].compareDocumentPosition(items[i + 1]) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        needsReordering = true;\n        break;\n      }\n    }\n    \n    if (!needsReordering) {\n      this.afs.logger.debug(\"Items already in correct order, skipping DOM operations\");\n      return;\n    }\n    \n    // Batch reordering with document fragment for better performance\n    const fragment = document.createDocumentFragment();\n    items.forEach(item => fragment.appendChild(item));\n    container.appendChild(fragment);\n    \n    this.afs.logger.debug(`Reordered ${items.length} items`);\n  }\n\n  /**\n   * Sort with multiple criteria\n   * @public\n   * @param {Array<{key: string, direction: string}>} criteria - Sort criteria\n   * @returns {boolean} Success status\n   */\n  sortMultiple(criteria) {\n    this.afs.logger.debug(\"Sorting by multiple criteria:\", criteria);\n\n    try {\n      // Validate criteria\n      if (!Array.isArray(criteria) || criteria.length === 0) {\n        throw new Error(\"Sort criteria must be a non-empty array\");\n      }\n      \n      // Validate each criterion\n      criteria.forEach((criterion, index) => {\n        if (!criterion.key) {\n          throw new Error(`Sort criterion at index ${index} missing key property`);\n        }\n        \n        if (criterion.direction && ![\"asc\", \"desc\"].includes(criterion.direction.toLowerCase())) {\n          this.afs.logger.warn(`Invalid sort direction in criterion ${index}: ${criterion.direction}, defaulting to \"asc\"`);\n          criterion.direction = \"asc\";\n        }\n      });\n\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      // Cache sort types for performance\n      const sortTypes = {};\n      criteria.forEach(criterion => {\n        if (!sortTypes[criterion.key]) {\n          sortTypes[criterion.key] = this.determineSortType(items[0], criterion.key);\n        }\n      });\n\n      items.sort((a, b) => {\n        for (const { key, direction = \"asc\" } of criteria) {\n          try {\n            const type = sortTypes[key] || \"string\";\n            const valueA = this.getSortValue(a, key, type);\n            const valueB = this.getSortValue(b, key, type);\n\n            const comparison = this.compareValues(valueA, valueB, direction);\n            if (comparison !== 0) return comparison;\n          } catch (error) {\n            this.afs.logger.error(`Error comparing values for key ${key}:`, error);\n            // Continue to next criterion\n          }\n        }\n        return 0;\n      });\n\n      this.reorderItems(items);\n\n      // Update state with primary sort\n      if (criteria.length > 0) {\n        this.afs.state.setState(\"sort.current\", criteria[0]);\n      }\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"multiSort\", { \n        criteria, \n        itemCount: items.length,\n        sortTypes \n      });\n      \n      this.afs.logger.info(`Multi-sorted ${items.length} items with ${criteria.length} criteria`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Multiple sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Sort with custom comparator\n   * @public\n   * @param {string} key - Sort key\n   * @param {Function} comparator - Custom comparison function\n   * @returns {boolean} Success status\n   */\n  sortWithComparator(key, comparator) {\n    this.afs.logger.debug(`Sorting by ${key} with custom comparator`);\n\n    try {\n      // Validate parameters\n      if (!key) {\n        throw new Error(\"Sort key is required\");\n      }\n      \n      if (typeof comparator !== \"function\") {\n        throw new Error(\"Comparator must be a function\");\n      }\n\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      items.sort((a, b) => {\n        try {\n          // Check if the items have the necessary data attribute\n          if (!a.dataset || !b.dataset || !(key in a.dataset) || !(key in b.dataset)) {\n            this.afs.logger.warn(`Missing data attribute ${key} in one or both items being compared`);\n            return 0;\n          }\n          \n          const valueA = a.dataset[key];\n          const valueB = b.dataset[key];\n          return comparator(valueA, valueB);\n        } catch (error) {\n          this.afs.logger.error(\"Error in custom comparator:\", error);\n          return 0; // Keep original order for failed comparisons\n        }\n      });\n\n      this.reorderItems(items);\n      \n      // Don't update state with custom sort since it's not easily serializable\n      \n      this.afs.emit(\"customSort\", { \n        key, \n        comparatorName: comparator.name || \"anonymous\", \n        itemCount: items.length \n      });\n      \n      this.afs.logger.info(`Custom sorted ${items.length} items by ${key}`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Custom sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   * @returns {boolean} Success status\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to shuffle\");\n        return true;\n      }\n      \n      if (items.length === 1) {\n        this.afs.logger.info(\"Only one item to shuffle, no change needed\");\n        return true;\n      }\n\n      this.afs.logger.debug(`Shuffling ${items.length} items`);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      this.reorderItems(items);\n\n      // Clear current sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Update UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"shuffle\", { itemCount: items.length });\n      \n      this.afs.logger.info(`Shuffled ${items.length} items`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Reset sort to default state\n   * @public\n   * @returns {boolean} Success status\n   */\n  reset() {\n    this.afs.logger.debug(\"Resetting sort\");\n\n    try {\n      // Clear sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Reset UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      // Reset sort data\n      let buttonCount = 0;\n      this.sortButtons.forEach((data, button) => {\n        data.direction = \"asc\";\n        this.sortButtons.set(button, data);\n        buttonCount++;\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sortReset\", { buttonCount });\n      \n      this.afs.logger.info(`Sort reset: ${buttonCount} sort buttons reset to default state`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Sort reset error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current sort state\n   * @public\n   * @returns {Object|null} Current sort state\n   */\n  getCurrentSort() {\n    return this.afs.state.getState().sort.current;\n  }\n\n  /**\n   * Add sort button dynamically\n   * @public\n   * @param {HTMLElement} button - Sort button element\n   * @param {string} key - Sort key\n   * @param {string} [direction='asc'] - Initial sort direction\n   */\n  addSortButton(button, key, direction = \"asc\") {\n    if (!key) {\n      this.afs.logger.warn(\"Sort key required for new sort button\");\n      return;\n    }\n\n    this.sortButtons.set(button, { key, direction });\n    this.bindSortEvent(button);\n    this.afs.logger.debug(`Added sort button for ${key}`);\n  }\n\n  /**\n   * Remove sort button\n   * @public\n   * @param {HTMLElement} button - Sort button to remove\n   */\n  removeSortButton(button) {\n    if (this.sortButtons.has(button)) {\n      button.removeEventListener(\"click\", this.bindSortEvent);\n      this.sortButtons.delete(button);\n      this.afs.logger.debug(\"Removed sort button\");\n    }\n  }\n\n  /**\n   * Destroy sort functionality\n   * @public\n   */\n  destroy() {\n    this.sortButtons.forEach((_, button) => {\n      this.removeSortButton(button);\n    });\n    this.sortButtons.clear();\n    this.afs.logger.debug(\"Sort functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Pagination functionality for AFS\n */\nimport { Animation } from \"../styles/Animation.js\";\n\nexport class Pagination {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.container = null;\n    this.animation = new Animation(afs);\n    this.options = this.afs.options.get(\"pagination\");\n    this.setupPagination();\n  }\n\n  /**\n   * Setup pagination\n   * @private\n   */\n  setupPagination() {\n    this.afs.logger.debug(\"Setting up pagination\");\n    if (!this.afs.options.get(\"pagination.enabled\")) {\n      // Make sure we initialize the state even if pagination is disabled\n      this.afs.state.setState(\"pagination\", {\n        currentPage: 1,\n        itemsPerPage: this.options.itemsPerPage || 10,\n        totalPages: 1,\n      });\n      return;\n    }\n\n    this.container = document.createElement(\"div\");\n    this.container.className = this.options.containerClass;\n\n    const itemsContainer = document.querySelector(\n      this.afs.options.get(\"pagination.container\")\n    );\n    if (!itemsContainer) {\n      this.afs.logger.error(\"Items container not found.\");\n      return;\n    }\n    itemsContainer.appendChild(this.container);\n\n    // Initialize pagination state with defaults\n    this.afs.state.setState(\"pagination\", {\n      currentPage: 1,\n      itemsPerPage: this.options.itemsPerPage,\n      totalPages: 0,\n    });\n\n    this.bindEvents();\n    this.update();\n    this.afs.logger.debug(\"Pagination initialized\");\n  }\n\n  /**\n   * Bind pagination events\n   * @private\n   */\n  bindEvents() {\n    // Only bind events if pagination is enabled\n    if (!this.afs.options.get(\"pagination.enabled\") || !this.container) return;\n\n    this.afs.on(\"filter\", () => this.update());\n    this.afs.on(\"search\", () => this.update());\n    this.afs.on(\"sort\", () => this.update());\n\n    this.container.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button\");\n      if (!button) return;\n\n      const page = button.dataset.page;\n      if (page) {\n        this.goToPage(parseInt(page, 10));\n      }\n    });\n  }\n\n  /**\n   * Update pagination\n   * @public\n   */\n  update() {\n    // If pagination is not enabled, make all items visible and return\n    if (!this.afs.options.get(\"pagination.enabled\")) {\n      this.showAllItems();\n      return;\n    }\n\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    const itemsPerPage = this.afs.state.getState().pagination.itemsPerPage;\n    const totalPages = Math.max(\n      1,\n      Math.ceil(visibleItems.length / itemsPerPage)\n    );\n\n    // Update state\n    const currentState = this.afs.state.getState().pagination;\n    let currentPage = currentState.currentPage;\n\n    // Adjust current page if it's beyond the total pages\n    if (currentPage > totalPages) {\n      currentPage = totalPages;\n    }\n\n    // Update pagination state\n    this.afs.state.setState(\"pagination\", {\n      ...currentState,\n      currentPage,\n      totalPages,\n    });\n\n    // Update visibility before rendering pagination controls\n    this.updateVisibility(visibleItems);\n\n    // Only render pagination if container exists\n    if (this.container) {\n      this.renderPagination();\n    }\n\n    this.afs.urlManager.updateURL();\n\n    this.afs.emit(\"pagination\", {\n      currentPage,\n      totalPages,\n      itemsPerPage,\n      visibleItems: visibleItems.length,\n    });\n  }\n\n  /**\n   * Update items visibility based on current page\n   * @private\n   */\n  updateVisibility(visibleItems) {\n    // If pagination is not enabled, show all items\n    if (!this.afs.options.get(\"pagination.enabled\")) {\n      this.showAllItems();\n      return;\n    }\n\n    const { currentPage, itemsPerPage } = this.afs.state.getState().pagination;\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n\n    // First hide all items\n    this.afs.items.forEach((item) => {\n      item.style.display = \"none\";\n      item.classList.add(this.afs.options.get(\"hiddenClass\"));\n    });\n\n    // Then show only the items for the current page\n    const itemsToShow = visibleItems.slice(startIndex, endIndex);\n\n    // Ensure we're not trying to display non-existent items\n    if (itemsToShow.length === 0 && visibleItems.length > 0) {\n      // If we have no items to show but we do have visible items,\n      // we're probably on an invalid page - go to page 1\n      this.goToPage(1);\n      return;\n    }\n\n    // Show items with animation\n    requestAnimationFrame(() => {\n      itemsToShow.forEach((item) => {\n        // Remove hidden class and restore display\n        item.style.display = \"\";\n        item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n        // Apply show animation in the next frame\n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(\n            item,\n            this.options.animationType || \"fade\"\n          );\n        });\n      });\n    });\n  }\n\n  /**\n   * Render pagination controls\n   * @private\n   */\n  renderPagination() {\n    // Safety check: don't render if container doesn't exist or pagination is disabled\n    if (!this.container || !this.afs.options.get(\"pagination.enabled\")) {\n      return;\n    }\n\n    const { currentPage, totalPages } = this.afs.state.getState().pagination;\n\n    this.container.innerHTML = \"\";\n\n    if (totalPages <= 1) {\n      this.container.style.display = \"none\";\n      return;\n    }\n\n    this.container.style.display = \"flex\";\n    const controls = this.createPaginationControls(currentPage, totalPages);\n    this.container.appendChild(controls);\n  }\n\n  /**\n   * Create pagination controls\n   * @private\n   * @param {number} currentPage - Current page\n   * @param {number} totalPages - Total pages\n   * @returns {DocumentFragment} Pagination controls\n   */\n  createPaginationControls(currentPage, totalPages) {\n    const fragment = document.createDocumentFragment();\n\n    if (this.options.showPrevNext) {\n      const prevButton = this.createPageButton(\"‹\", currentPage - 1, {\n        disabled: currentPage === 1,\n        class: \"afs-pagination-prev\",\n      });\n      fragment.appendChild(prevButton);\n    }\n\n    fragment.appendChild(\n      this.createPageButton(\"1\", 1, { active: currentPage === 1 })\n    );\n\n    const range = this.calculatePageRange(currentPage, totalPages);\n\n    if (range.start > 2) fragment.appendChild(this.createEllipsis());\n\n    for (let i = range.start; i <= range.end; i++) {\n      if (i === 1 || i === totalPages) continue;\n      fragment.appendChild(\n        this.createPageButton(i.toString(), i, { active: currentPage === i })\n      );\n    }\n\n    if (range.end < totalPages - 1) fragment.appendChild(this.createEllipsis());\n\n    if (totalPages > 1)\n      fragment.appendChild(\n        this.createPageButton(totalPages.toString(), totalPages, {\n          active: currentPage === totalPages,\n        })\n      );\n\n    if (this.options.showPrevNext) {\n      const nextButton = this.createPageButton(\"›\", currentPage + 1, {\n        disabled: currentPage === totalPages,\n        class: \"afs-pagination-next\",\n      });\n      fragment.appendChild(nextButton);\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Create page button\n   * @private\n   */\n  createPageButton(\n    text,\n    page,\n    { active = false, disabled = false, class: className = \"\" } = {}\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = text;\n    button.dataset.page = page;\n    button.classList.add(this.options.pageButtonClass || \"afs-page-button\");\n\n    if (className) button.classList.add(className);\n    if (active)\n      button.classList.add(this.options.activePageClass || \"afs-page-active\");\n    if (disabled) button.disabled = true;\n\n    return button;\n  }\n\n  createEllipsis() {\n    const span = document.createElement(\"span\");\n    span.textContent = \"...\";\n    span.classList.add(\"afs-pagination-ellipsis\");\n    return span;\n  }\n\n  calculatePageRange(currentPage, totalPages) {\n    const maxButtons = this.options.maxButtons || 7;\n    const sideButtons = Math.floor((maxButtons - 3) / 2);\n\n    let start = Math.max(2, currentPage - sideButtons);\n    let end = Math.min(totalPages - 1, start + maxButtons - 3);\n\n    if (end - start < maxButtons - 3)\n      start = Math.max(2, end - (maxButtons - 3));\n\n    return { start, end };\n  }\n\n  /**\n   * Go to specific page\n   * @public\n   */\n  goToPage(page) {\n    const state = this.afs.state.getState().pagination;\n    const targetPage = Math.max(1, Math.min(page, state.totalPages));\n\n    if (targetPage === state.currentPage) return;\n\n    // Update state\n    this.afs.state.setState(\"pagination.currentPage\", targetPage);\n\n    // Force a reflow before updating\n    this.afs.container.offsetHeight;\n\n    // Update visibility and controls\n    this.update();\n\n    // Scroll to top if enabled\n    if (this.options.scrollToTop && window.innerWidth > 768) {\n      //fixed this part where condition to disable scrollTop on mobile is that the innerWidth > 768\n      setTimeout(() => this.scrollToTop(), 100);\n    }\n\n    // Emit page change event\n    this.afs.emit(\"pageChanged\", {\n      previousPage: state.currentPage,\n      currentPage: targetPage,\n      totalPages: state.totalPages,\n    });\n  }\n\n  scrollToTop() {\n    const container = document.querySelector(\n      this.afs.options.get(\"pagination.container\")\n    );\n    if (!container) {\n      this.afs.logger.warn(\"Scroll container not found.\");\n      return;\n    }\n\n    window.scrollTo({\n      top: container.offsetTop - this.options.scrollOffset,\n      behavior: \"smooth\",\n    });\n  }\n\n  /**\n   * Set pagination mode\n   * @public\n   */\n  setPaginationMode(enabled) {\n    this.afs.logger.debug(`Setting pagination mode to: ${enabled}`);\n\n    // Update options\n    this.afs.options.set(\"pagination.enabled\", enabled);\n\n    if (enabled) {\n      // Enable pagination\n      this.setupPagination();\n    } else {\n      // Disable pagination and show all items\n      this.container.remove();\n      this.showAllItems();\n    }\n\n    // Emit event\n    this.afs.emit(\"paginationModeChanged\", { enabled });\n  }\n\n  /**\n   * Show all items (for infinite scroll mode or when pagination is disabled)\n   * @private\n   */\n  showAllItems() {\n    try {\n      const visibleItems = Array.from(this.afs.state.getState().items.visible);\n\n      // Check if we're on a mobile device\n      const isMobile = window.innerWidth <= 768;\n\n      requestAnimationFrame(() => {\n        visibleItems.forEach((item) => {\n          item.style.display = \"\";\n          item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n          // For mobile, skip animation to improve performance and prevent blur issues\n          if (isMobile) {\n            item.style.opacity = \"1\";\n            item.style.transform = \"\";\n            item.style.filter = \"none\";\n          } else {\n            requestAnimationFrame(() => {\n              this.animation.applyShowAnimation(\n                item,\n                this.options?.animationType || \"fade\"\n              );\n            });\n          }\n        });\n\n        // Extra cleanup for mobile devices to ensure no blur filters remain\n        if (isMobile) {\n          setTimeout(() => {\n            visibleItems.forEach((item) => {\n              item.style.opacity = \"1\";\n              item.style.transform = \"\";\n              item.style.filter = \"none\";\n            });\n          }, 50);\n        }\n      });\n    } catch (error) {\n      this.afs.logger.error(\"Error in showAllItems:\", error);\n      // Fallback: make sure items are visible even if there's an error\n      this.afs.items.forEach((item) => {\n        if (this.afs.state.getState().items.visible.has(item)) {\n          item.style.display = \"\";\n          item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n          item.style.opacity = \"1\";\n          item.style.filter = \"none\";\n        }\n      });\n    }\n  }\n}\n","/**\n * @fileoverview URL state management for AFS\n */\n\nexport class URLManager {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.defaultParams = new URLSearchParams();\n    this.setupPopStateHandler();\n  }\n\n  /**\n   * Initialize URL state\n   * @public\n   */\n  initialize() {\n    // Load URL state after all features are initialized\n    this.loadFromURL();\n  }\n\n  /**\n   * Setup history popstate handler\n   * @private\n   */\n  setupPopStateHandler() {\n    window.addEventListener('popstate', () => {\n      this.loadFromURL();\n    });\n  }\n\n  /**\n   * Update URL with current filter state\n   * @public\n   */\n  /**\n * Update URL with current filter state\n * @public\n */\nupdateURL() {\n  this.afs.logger.debug(\"Updating URL state\");\n  const params = new URLSearchParams();\n  const state = this.afs.state.getState();  // Get current state of filters\n\n  // Get active filters directly from the Filter instance\n  const activeFilters = this.afs.filter.getActiveFilters();\n\n  // Update the state object with the active filters\n  state.filters.current = activeFilters;\n\n  // Add filters to URL\n  this.addFiltersToURL(params, state);\n  \n  // Add ranges (if applicable) to URL\n  this.addRangesToURL(params, state);\n  \n  // Add search query to URL\n  this.addSearchToURL(params, state);\n  \n  // Add sort state to URL\n  this.addSortToURL(params, state);\n  \n  // Add pagination to URL\n  this.addPaginationToURL(params, state);\n  \n  // Push the updated URL\n  this.pushState(params);  // Push the new URL state to the browser\n}\n\n  /**\n   * Add filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addFiltersToURL(params, state) {\n    const filters = state.filters;\n\n    // Skip if only default filter is active\n    if (filters.current.size === 0 || \n        (filters.current.size === 1 && filters.current.has('*'))) {\n      return;\n    }\n\n    // Group filters by type\n    const filtersByType = {};\n    for (const filter of filters.current) {\n      if (filter !== '*') {\n        const [type, value] = filter.split(':');\n        if (!filtersByType[type]) {\n          filtersByType[type] = new Set();\n        }\n        filtersByType[type].add(value);\n      }\n    }\n\n    // Add filters to params\n    Object.entries(filtersByType).forEach(([type, values]) => {\n      params.set(type, Array.from(values).join(','));\n    });\n\n    // Add filter mode if not default\n    if (filters.mode !== 'OR') {\n      params.set('filterMode', filters.mode.toLowerCase());\n    }\n\n    // Add group mode if groups exist and mode isn't default\n    if (filters.groups.size > 0 && filters.groupMode !== 'OR') {\n      params.set('groupMode', filters.groupMode.toLowerCase());\n    }\n\n    // Add filter groups if they exist\n    filters.groups.forEach((group, groupId) => {\n      params.set(`group_${groupId}`, Array.from(group.filters).join(','));\n      if (group.operator !== 'OR') {\n        params.set(`groupOp_${groupId}`, group.operator.toLowerCase());\n      }\n    });\n  }\n\n  /**\n   * Add range filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addRangesToURL(params, state) {\n    // Handle numeric ranges\n    state.filters.ranges.forEach((range, key) => {\n      const { currentMin, currentMax } = range;\n      if (currentMin !== range.min || currentMax !== range.max) {\n        params.set(`range_${key}`, `${currentMin},${currentMax}`);\n      }\n    });\n\n    // Handle date ranges\n    state.filters.dateRanges.forEach((range, key) => {\n      const { start, end } = range;\n      params.set(`dateRange_${key}`, `${start.toISOString()},${end.toISOString()}`);\n    });\n  }\n\n  /**\n   * Add search parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSearchToURL(params, state) {\n    if (state.search.query) {\n      params.set('search', state.search.query);\n    }\n  }\n\n  /**\n   * Add sort parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSortToURL(params, state) {\n    if (state.sort.current) {\n      const { key, direction } = state.sort.current;\n      params.set('sort', `${key},${direction}`);\n    }\n  }\n\n  /**\n   * Add pagination parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addPaginationToURL(params, state) {\n    const { currentPage, itemsPerPage } = state.pagination;\n\n    if (!this.afs.options.get('pagination.enabled')) {\n      return;\n    }\n\n    if (currentPage > 1) {\n      params.set('page', currentPage.toString());\n    }\n    if (itemsPerPage !== this.afs.options.get('pagination.itemsPerPage')) {\n      params.set('perPage', itemsPerPage.toString());\n    }\n  }\n\n  /**\n   * Update browser URL\n   * @private\n   * @param {URLSearchParams} params\n   */\n  pushState(params) {\n    const queryString = params.toString();\n    const newURL = `${window.location.pathname}${queryString ? '?' + queryString : ''}`;\n    \n    // Only update if URL actually changed\n    if (newURL !== window.location.href) {\n      window.history.pushState({}, '', newURL);\n      this.afs.logger.debug('URL updated:', newURL);\n    }\n  }\n\n  /**\n * Load filter state from URL\n * @public\n */\n  loadFromURL() {\n    this.afs.logger.debug('Loading state from URL');\n    const params = new URLSearchParams(window.location.search);\n  \n    try {\n      // Clear existing filters first\n      if (this.afs.filter) {\n        this.afs.filter.clearAllFilters();\n      }\n  \n      // Process filter mode first\n      const filterMode = params.get('filterMode');\n      if (filterMode && this.afs.filter) {\n        this.afs.filter.setFilterMode(filterMode.toUpperCase());\n      }\n  \n      // Get all parameters that are not special parameters\n      const filterParams = Array.from(params.entries()).filter(([key]) => \n        this.isRegularFilter(key)\n      );\n  \n      if (filterParams.length > 0 && this.afs.filter) {\n        // Remove default '*' filter\n        this.afs.filter.activeFilters.clear();\n  \n        // Process each filter parameter\n        filterParams.forEach(([type, value]) => {\n          if (value) {\n            // Handle comma-separated values if present\n            const values = value.split(',');\n            values.forEach(val => {\n              const filter = `${type}:${val}`;\n              this.afs.filter.addFilter(filter);\n            });\n          }\n        });\n      }\n  \n      // Apply filters before processing other parameters\n      if (this.afs.filter) {\n        this.afs.filter.applyFilters();\n      }\n  \n      // Process other parameters...\n      this.processSearchFromURL(params);\n      this.processSortFromURL(params);\n      this.processPaginationFromURL(params);\n  \n      this.afs.emit('urlStateLoaded', { params: Object.fromEntries(params) });\n      this.afs.logger.info('State loaded from URL');\n    } catch (error) {\n      this.afs.logger.error('Error loading state from URL:', error);\n      // Reset to default state on error\n      if (this.afs.filter) {\n        this.afs.filter.clearAllFilters();\n      }\n    }\n  }\n  \n  /**\n   * Process filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processFiltersFromURL(params) {\n    const state = this.afs.state.getState();\n    let hasFilters = false;\n\n    // Process filter mode\n    const filterMode = params.get('filterMode');\n    if (filterMode) {\n      state.filters.mode = filterMode.toUpperCase();\n    }\n\n    // Process group mode\n    const groupMode = params.get('groupMode');\n    if (groupMode) {\n      state.filters.groupMode = groupMode.toUpperCase();\n    }\n\n    // Process regular filters\n    for (const [type, values] of params.entries()) {\n      if (this.isRegularFilter(type)) {\n        values.split(',').filter(Boolean).forEach(value => {\n          hasFilters = true;\n          state.filters.current.add(`${type}:${value}`);\n        });\n      }\n    }\n\n    // Process filter groups\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('group_')) {\n        const groupId = key.replace('group_', '');\n        const operator = params.get(`groupOp_${groupId}`)?.toUpperCase() || 'OR';\n        state.filters.groups.set(groupId, {\n          filters: new Set(value.split(',')),\n          operator\n        });\n      }\n    }\n\n    // Set default if no filters\n    if (!hasFilters && state.filters.groups.size === 0) {\n      state.filters.current.add('*');\n    }\n  }\n\n  /**\n   * Process range filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processRangesFromURL(params) {\n    const state = this.afs.state.getState();\n\n    // Process numeric ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('range_')) {\n        const rangeKey = key.replace('range_', '');\n        const [min, max] = value.split(',').map(Number);\n        state.filters.ranges.set(rangeKey, { currentMin: min, currentMax: max });\n      }\n    }\n\n    // Process date ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('dateRange_')) {\n        const rangeKey = key.replace('dateRange_', '');\n        const [start, end] = value.split(',').map(str => new Date(str));\n        state.filters.dateRanges.set(rangeKey, { start, end });\n      }\n    }\n  }\n\n  /**\n   * Process search from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSearchFromURL(params) {\n    const searchQuery = params.get('search') || '';\n    this.afs.state.setState('search.query', searchQuery);\n    \n    if (this.afs.options.get('searchInput')) {\n      this.afs.options.get('searchInput').value = searchQuery;\n    }\n  }\n\n  /**\n   * Process sort from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSortFromURL(params) {\n    const sortParam = params.get('sort');\n    if (sortParam) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.state.setState('sort.current', { key, direction });\n    }\n  }\n\n  /**\n   * Process pagination from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processPaginationFromURL(params) {\n    const page = parseInt(params.get('page')) || 1;\n    const perPage = parseInt(params.get('perPage')) || \n                   this.afs.options.get('pagination.itemsPerPage');\n\n    this.afs.state.setState('pagination', {\n      currentPage: page,\n      itemsPerPage: perPage\n    });\n  }\n\n  /**\n   * Check if parameter is a regular filter\n   * @private\n   * @param {string} param - Parameter name\n   * @returns {boolean}\n   */\n  isRegularFilter(param) {\n    const excludedParams = [\n      'search', 'sort', 'page', 'perPage', 'filterMode', 'groupMode'\n    ];\n    return !excludedParams.includes(param) && \n           !param.startsWith('group_') && \n           !param.startsWith('groupOp_') && \n           !param.startsWith('range_') && \n           !param.startsWith('dateRange_');\n  }\n\n  /**\n   * Clear URL parameters\n   * @public\n   */\n  clearURL() {\n    window.history.pushState({}, '', window.location.pathname);\n    this.afs.state.reset();\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n\n  /**\n   * Get current URL parameters\n   * @public\n   * @returns {URLSearchParams}\n   */\n  getURLParams() {\n    return new URLSearchParams(window.location.search);\n  }\n\n  /**\n   * Check if URL has parameters\n   * @public\n   * @returns {boolean}\n   */\n  hasParams() {\n    return window.location.search.length > 1;\n  }\n\n  /**\n   * Get parameter value\n   * @public\n   * @param {string} param - Parameter name\n   * @returns {string|null}\n   */\n  getParam(param) {\n    return new URLSearchParams(window.location.search).get(param);\n  }\n}","/**\n * @fileoverview Range filter implementation for AFS\n */\n\nimport { debounce } from \"../utils\";\nimport { StyleManager } from \"../styles/StyleManager\";\n\nexport class RangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n    this.options = this.afs.options.get(\"slider\");\n    if (!this.afs.styleManager) {\n      this.afs.styleManager = new StyleManager(this.afs.options);\n    }\n\n    // Apply styles immediately\n    this.afs.styleManager.applyStyles();\n  }\n\n  /**\n   * @typedef {Object} RangeOptions\n   * @property {string} key - Data attribute key\n   * @property {string} type - Type of range ('number' or 'date')\n   * @property {HTMLElement} container - Container element\n   * @property {number|string} [min] - Minimum value\n   * @property {number|string} [max] - Maximum value\n   * @property {number} [step] - Step value\n   */\n\n  /**\n   * Add range slider\n   * @param {RangeOptions} options - Range slider options\n   */\n  addRangeSlider({ key, type, container, min, max, step = 1, ui }) {\n    this.afs.logger.debug(`Adding range slider for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error(\"Container element required for range slider\");\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key, type);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Get global UI options and merge with slider-specific options\n    const globalUiOptions = this.afs.options.get(\"styles.slider.ui\") || {\n      showHistogram: false,\n      bins: 10,\n    };\n    const sliderUiOptions = {\n      ...globalUiOptions,\n      ...ui, // Override with slider-specific options if provided\n    };\n\n    // Only calculate histogram data if enabled\n    const histogramData = sliderUiOptions.showHistogram\n      ? this.calculateHistogramData(key, sliderUiOptions.bins)\n      : { counts: [], binEdges: [], max: 0 };\n\n    // Create slider elements\n    const elements = this.createSliderElements(histogramData, sliderUiOptions);\n    const state = this.initializeState(min, max, step, type);\n\n    // Store histogram data and UI options in state\n    state.ui = sliderUiOptions;\n    if (sliderUiOptions.showHistogram) {\n      state.histogram = histogramData;\n    }\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateSliderUI(key);\n\n    // Setup histogram highlight updates only if enabled\n    if (sliderUiOptions.showHistogram) {\n      this.setupHistogramHighlight(elements, state, histogramData.binEdges);\n    }\n\n    this.afs.logger.info(`Range slider added for ${key}`);\n  }\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key, type) {\n    const values = Array.from(this.afs.items)\n      .map((item) => {\n        const value = item.dataset[key];\n        return type === \"date\" ? new Date(value).getTime() : parseFloat(value);\n      })\n      .filter((value) => !isNaN(value));\n\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n    };\n  }\n\n  /**\n   * Create slider DOM elements\n   * @private\n   * @param {Object} histogramData - Histogram data\n   * @param {Object} sliderUiOptions - UI options for this slider\n   */\n  createSliderElements(histogramData, sliderUiOptions) {\n    const styles =\n      this.afs.options.get(\"styles\") || this.afs.styleManager.defaultStyles;\n    const colors = styles.colors || this.afs.styleManager.defaultStyles.colors;\n    const sliderOptions = this.afs.options.get(\"slider\") || {};\n\n    const container = document.createElement(\"div\");\n    container.className = \"afs-range-container\";\n\n    const slider = document.createElement(\"div\");\n    slider.className = sliderOptions.containerClass;\n\n    const track = document.createElement(\"div\");\n    track.className = sliderOptions.trackClass;\n\n    // Only add histogram if enabled in the slider-specific options\n    if (sliderUiOptions?.showHistogram && histogramData?.counts?.length > 0) {\n      const histogram = this.createHistogramBars(histogramData, colors);\n      slider.appendChild(histogram);\n    }\n\n    const selectedRange = document.createElement(\"div\");\n    selectedRange.className = sliderOptions.selectedClass;\n\n    const minThumb = document.createElement(\"div\");\n    minThumb.className = sliderOptions.thumbClass;\n\n    const maxThumb = document.createElement(\"div\");\n    maxThumb.className = sliderOptions.thumbClass;\n\n    const minValue = document.createElement(\"div\");\n    minValue.className = sliderOptions.valueClass;\n\n    const maxValue = document.createElement(\"div\");\n    maxValue.className = sliderOptions.valueClass;\n\n    // Build the slider\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n\n    container.appendChild(slider);\n\n    return {\n      container,\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    };\n  }\n\n  // Add helper method for creating histogram\n  createHistogram(data, colors) {\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    // Create histogram bars\n    data.forEach((value, index) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${value}%`;\n      bar.style.backgroundColor = colors.histogram;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Calculate histogram data from items\n   * @private\n   * @param {string} key - Data attribute key (e.g., 'price')\n   * @param {number} [bins=10] - Number of bins for histogram\n   * @returns {Object} Histogram data and metadata\n   */\n  calculateHistogramData(key, bins = 10) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map((item) => parseFloat(item.dataset[key]))\n        .filter((value) => !isNaN(value));\n\n      if (values.length === 0) {\n        return { counts: [], binEdges: [], max: 0 };\n      }\n\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const binWidth = (max - min) / bins;\n\n      const counts = new Array(bins).fill(0);\n      const binEdges = new Array(bins + 1);\n\n      // Calculate bin edges\n      for (let i = 0; i <= bins; i++) {\n        binEdges[i] = min + i * binWidth;\n      }\n\n      // Count values in each bin\n      values.forEach((value) => {\n        if (value === max) {\n          counts[counts.length - 1]++;\n          return;\n        }\n\n        const binIndex = Math.floor((value - min) / binWidth);\n        counts[binIndex]++;\n      });\n\n      // Normalize heights to be more subtle\n      const maxCount = Math.max(...counts);\n      const normalizedCounts = counts.map(\n        (count) => Math.max(20, Math.round((count / maxCount) * 100)), // Minimum height of 20%\n      );\n\n      return {\n        counts: normalizedCounts,\n        binEdges,\n        max: maxCount,\n        min,\n        max,\n      };\n    } catch (error) {\n      this.afs.logger.error(\"Error calculating histogram:\", error);\n      return { counts: [], binEdges: [], max: 0 };\n    }\n  }\n\n  /**\n   * Setup histogram highlight on range changes\n   * @private\n   */\n  setupHistogramHighlight(elements, state, binEdges) {\n    const bars = elements.slider.querySelectorAll(\".afs-histogram-bar\");\n\n    const updateHistogram = () => {\n      const minVal = state.currentMin;\n      const maxVal = state.currentMax;\n\n      bars.forEach((bar, index) => {\n        const binStart = binEdges[index];\n        const binEnd = binEdges[index + 1];\n\n        // Highlight bars within the selected range\n        if (binStart >= minVal && binEnd <= maxVal) {\n          bar.classList.add(\"active\");\n        } else {\n          bar.classList.remove(\"active\");\n        }\n      });\n    };\n\n    // Update histogram on range changes using AFS instance\n    this.afs.on(\"rangeFilter\", () => updateHistogram());\n\n    // Initial update\n    updateHistogram();\n  }\n\n  /**\n   * Create histogram bars\n   * @private\n   */\n  createHistogramBars(histogramData, colors) {\n    const { counts } = histogramData;\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    counts.forEach((height) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${height}%`;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Initialize slider state\n   * @private\n   */\n  initializeState(min, max, step, type) {\n    return {\n      min,\n      max,\n      currentMin: min,\n      currentMax: max,\n      step,\n      type,\n      isDragging: false,\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    const {\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    } = elements;\n\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n    container.appendChild(slider);\n  }\n\n  /**\n   * Setup event handlers for slider\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minThumb, maxThumb } = elements;\n\n    const handleStart = (isMin) => (e) => {\n      e.preventDefault(); // Prevent scrolling while dragging on mobile\n      state.isDragging = true;\n      \n      // Get the correct event coordinates whether mouse or touch\n      const getEventXY = (event) => {\n        return event.touches ? event.touches[0] : event;\n      };\n\n      const moveHandler = (moveEvent) => {\n        const evt = getEventXY(moveEvent);\n        this.createMoveHandler(elements, state, key, isMin)(evt);\n      };\n\n      const stopHandler = () => {\n        state.isDragging = false;\n        \n        // Remove both mouse and touch event listeners\n        window.removeEventListener('mousemove', moveHandler);\n        window.removeEventListener('mouseup', stopHandler);\n        window.removeEventListener('touchmove', moveHandler);\n        window.removeEventListener('touchend', stopHandler);\n        window.removeEventListener('touchcancel', stopHandler);\n        \n        this.applyFilter(key);\n      };\n\n      // Add both mouse and touch event listeners\n      window.addEventListener('mousemove', moveHandler);\n      window.addEventListener('mouseup', stopHandler);\n      window.addEventListener('touchmove', moveHandler, { passive: false });\n      window.addEventListener('touchend', stopHandler);\n      window.addEventListener('touchcancel', stopHandler);\n    };\n\n    // Add both mouse and touch event listeners to thumbs\n    minThumb.addEventListener('mousedown', handleStart(true));\n    minThumb.addEventListener('touchstart', handleStart(true), { passive: false });\n    maxThumb.addEventListener('mousedown', handleStart(false));\n    maxThumb.addEventListener('touchstart', handleStart(false), { passive: false });\n  }\n\n  /**\n   * Update slider UI\n   * @private\n   */\n  updateSliderUI(key) {\n    const { state, elements } = this.activeRanges.get(key);\n    const { minThumb, maxThumb, selectedRange, minValue, maxValue } = elements;\n\n    // Calculate positions with padding consideration\n    const range = state.max - state.min;\n    const minPos = ((state.currentMin - state.min) / range) * 100;\n    const maxPos = ((state.currentMax - state.min) / range) * 100;\n\n    // Ensure thumbs stay within bounds\n    const clampedMinPos = Math.max(0, Math.min(minPos, 100));\n    const clampedMaxPos = Math.max(0, Math.min(maxPos, 100));\n\n    // Position thumbs\n    minThumb.style.left = `${clampedMinPos}%`;\n    maxThumb.style.left = `${clampedMaxPos}%`;\n\n    // Position selected range\n    selectedRange.style.left = `${clampedMinPos}%`;\n    selectedRange.style.width = `${clampedMaxPos - clampedMinPos}%`;\n\n    // Format values\n    const formatValue =\n      state.type === \"date\"\n        ? (value) => new Date(value).toLocaleDateString()\n        : (value) => value.toFixed(2);\n\n    // Update value labels\n    minValue.textContent = formatValue(state.currentMin);\n    maxValue.textContent = formatValue(state.currentMax);\n\n    // Position value labels considering bounds\n    minValue.style.left = `${clampedMinPos}%`;\n    maxValue.style.left = `${clampedMaxPos}%`;\n\n    // Handle edge cases for value label positioning\n    if (clampedMinPos < 5) {\n      minValue.style.transform = \"translateX(0)\";\n    } else if (clampedMinPos > 95) {\n      minValue.style.transform = \"translateX(-100%)\";\n    } else {\n      minValue.style.transform = \"translateX(-50%)\";\n    }\n\n    if (clampedMaxPos < 5) {\n      maxValue.style.transform = \"translateX(0)\";\n    } else if (clampedMaxPos > 95) {\n      maxValue.style.transform = \"translateX(-100%)\";\n    } else {\n      maxValue.style.transform = \"translateX(-50%)\";\n    }\n  }\n\n  // Also update the createMoveHandler to respect the padding\n  createMoveHandler(elements, state, key, isMin) {\n    this.afs.logger.debug(`Creating move handler for ${key}`);\n\n    const { track } = elements;\n    const PADDING = 5;\n\n    return debounce((e) => {\n      const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n      const rect = track.getBoundingClientRect();\n      const totalWidth = rect.width;\n      const paddingPixels = (PADDING / 100) * totalWidth;\n\n      // Calculate percent with padding consideration\n      const rawPercent =\n        (clientX - rect.left - paddingPixels) /\n        (totalWidth - 2 * paddingPixels);\n      const percent = Math.min(Math.max(0, rawPercent), 1);\n\n      // Calculate value considering the full range\n      const value = state.min + (state.max - state.min) * percent;\n      const stepped = Math.round(value / state.step) * state.step;\n\n      if (isMin) {\n        state.currentMin = Math.min(stepped, state.currentMax);\n      } else {\n        state.currentMax = Math.max(stepped, state.currentMin);\n      }\n\n      this.updateSliderUI(key);\n    }, 16); // ~60fps\n  }\n\n  /**\n   * Apply range filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.debug(`Applying range filter for ${key}`);\n\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach((item) => {\n      const value =\n        state.type === \"date\"\n          ? new Date(item.dataset[key]).getTime()\n          : parseFloat(item.dataset[key]);\n\n      if (value >= state.currentMin && value <= state.currentMax) {\n        this.afs.showItem(item);\n      } else {\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"rangeFilter\", {\n      key,\n      min: state.currentMin,\n      max: state.currentMax,\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRangeValues(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax,\n      type: range.state.type,\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRangeValues(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateSliderUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove range slider\n   * @param {string} key - Range key\n   */\n  removeRangeSlider(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.slider.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Range slider removed for ${key}`);\n  }\n}\n","/**\n * @fileoverview Date filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class DateFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeDateRanges = new Map();\n    this.defaultFormat = this.afs.options.get('dateFormat') || 'YYYY-MM-DD';\n  }\n\n  /**\n   * @typedef {Object} DateRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {Date} [minDate] - Minimum date\n   * @property {Date} [maxDate] - Maximum date\n   * @property {string} [format] - Date format (default: YYYY-MM-DD)\n   */\n\n  /**\n   * Add date range filter\n   * @param {DateRangeOptions} options - Date range options\n   */\n  addDateRange({ key, container, minDate, maxDate, format = this.defaultFormat }) {\n    this.afs.logger.debug(`Adding date range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for date range');\n      return;\n    }\n\n    // Calculate min/max dates if not provided\n    const dates = this.calculateMinMaxDates(key);\n    minDate = minDate ?? dates.min;\n    maxDate = maxDate ?? dates.max;\n\n    // Create date picker elements\n    const elements = this.createDateElements();\n    const state = this.initializeState(minDate, maxDate, format);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeDateRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateDateUI(key);\n\n    this.afs.logger.info(`Date range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max dates from items\n   * @private\n   */\n  calculateMinMaxDates(key) {\n    try {\n      const validDates = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const date = new Date(item.dataset[key]);\n          return isNaN(date.getTime()) ? null : date;\n        })\n        .filter(date => date !== null);\n  \n      if (validDates.length === 0) {\n        // Return default date range if no valid dates found\n        const today = new Date();\n        return {\n          min: new Date(today.getFullYear(), 0, 1), // January 1st of current year\n          max: new Date(today.getFullYear(), 11, 31) // December 31st of current year\n        };\n      }\n  \n      return {\n        min: new Date(Math.min(...validDates)),\n        max: new Date(Math.max(...validDates))\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating date range:', error);\n      // Return default date range on error\n      const today = new Date();\n      return {\n        min: new Date(today.getFullYear(), 0, 1),\n        max: new Date(today.getFullYear(), 11, 31)\n      };\n    }\n  }\n\n  /**\n   * Create date picker elements\n   * @private\n   */\n  createDateElements() {\n    this.afs.logger.debug('Creating date picker elements');\n\n    const container = document.createElement('div');\n    container.className = 'afs-date-range-container';\n\n    const startContainer = document.createElement('div');\n    startContainer.className = 'afs-date-input-wrapper';\n    \n    const startLabel = document.createElement('label');\n    startLabel.textContent = 'Start Date';\n    \n    const startInput = document.createElement('input');\n    startInput.type = 'date';\n    startInput.className = 'afs-date-input start-date';\n\n    const endContainer = document.createElement('div');\n    endContainer.className = 'afs-date-input-wrapper';\n    \n    const endLabel = document.createElement('label');\n    endLabel.textContent = 'End Date';\n    \n    const endInput = document.createElement('input');\n    endInput.type = 'date';\n    endInput.className = 'afs-date-input end-date';\n\n    startContainer.appendChild(startLabel);\n    startContainer.appendChild(startInput);\n    endContainer.appendChild(endLabel);\n    endContainer.appendChild(endInput);\n\n    container.appendChild(startContainer);\n    container.appendChild(endContainer);\n\n    return {\n      container,\n      startInput,\n      endInput\n    };\n  }\n\n  /**\n   * Initialize date filter state\n   * @private\n   */\n  initializeState(minDate, maxDate, format) {\n    return {\n      minDate,\n      maxDate,\n      currentStartDate: minDate,\n      currentEndDate: maxDate,\n      format\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    this.afs.logger.debug(`Setting up event handlers for date range ${key}`);\n\n    const { startInput, endInput } = elements;\n\n    const handleDateChange = debounce(() => {\n      const startDate = new Date(startInput.value);\n      const endDate = new Date(endInput.value);\n\n      if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n        state.currentStartDate = startDate;\n        state.currentEndDate = endDate;\n        this.applyDateFilter(key);\n      }\n    }, 300);\n\n    startInput.addEventListener('change', handleDateChange);\n    endInput.addEventListener('change', handleDateChange);\n  }\n\n  /**\n   * Update date picker UI\n   * @private\n   */\n  updateDateUI(key) {\n    try {\n      const { state, elements } = this.activeDateRanges.get(key);\n      const { startInput, endInput } = elements;\n  \n      // Format dates for input\n      const formatDate = date => {\n        try {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) {\n            throw new Error('Invalid date');\n          }\n          return d.toISOString().split('T')[0];\n        } catch (error) {\n          this.afs.logger.error('Error formatting date:', error);\n          return '';\n        }\n      };\n  \n      // Set min/max constraints\n      startInput.min = formatDate(state.minDate);\n      startInput.max = formatDate(state.maxDate);\n      endInput.min = formatDate(state.minDate);\n      endInput.max = formatDate(state.maxDate);\n  \n      // Set current values\n      startInput.value = formatDate(state.currentStartDate);\n      endInput.value = formatDate(state.currentEndDate);\n    } catch (error) {\n      this.afs.logger.error('Error updating date UI:', error);\n    }\n  }\n\n  /**\n   * Apply date filter\n   * @private\n   */\n  applyDateFilter(key) {\n    this.afs.logger.info(`Applying date filter for ${key}`);\n    const { state } = this.activeDateRanges.get(key);\n  \n    this.afs.items.forEach(item => {\n      try {\n        // Check if item and dataset exist\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        const itemDate = new Date(item.dataset[key]);\n        \n        // Check if date is valid\n        if (isNaN(itemDate.getTime())) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        // Set time to midnight for consistent comparison\n        const startDate = new Date(state.currentStartDate);\n        startDate.setHours(0, 0, 0, 0);\n        \n        const endDate = new Date(state.currentEndDate);\n        endDate.setHours(23, 59, 59, 999);\n        \n        const compareDate = new Date(itemDate);\n        compareDate.setHours(0, 0, 0, 0);\n  \n        if (compareDate >= startDate && compareDate <= endDate) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item by date:', error);\n        this.afs.hideItem(item);\n      }\n    });\n  \n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('dateFilter', {\n      key,\n      startDate: state.currentStartDate,\n      endDate: state.currentEndDate\n    });\n  }\n\n  /**\n   * Get current date range\n   * @param {string} key - Date range key\n   * @returns {Object} Current date range\n   */\n  getDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return null;\n\n    return {\n      startDate: range.state.currentStartDate,\n      endDate: range.state.currentEndDate\n    };\n  }\n\n  /**\n   * Set date range\n   * @param {string} key - Date range key\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   */\n  setDateRange(key, startDate, endDate) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.state.currentStartDate = startDate;\n    range.state.currentEndDate = endDate;\n    this.updateDateUI(key);\n    this.applyDateFilter(key);\n  }\n\n  /**\n   * Remove date range\n   * @param {string} key - Date range key\n   */\n  removeDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeDateRanges.delete(key);\n    this.afs.logger.info(`Date range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Advanced Filter System - Main Class\n */\nimport { Logger } from \"./core/Logger\";\nimport { Options } from \"./core/Options\";\nimport { State } from \"./core/State\";\nimport { StyleManager } from \"./styles/StyleManager\";\nimport { EventEmitter } from \"./core/EventEmitter\";\n\nimport { Filter } from \"./features/Filter\";\nimport { InputRangeFilter } from \"./features/InputRangeFilter\";\nimport { Search } from \"./features/Search\";\nimport { Sort } from \"./features/Sort\";\nimport { Pagination } from \"./features/Pagination\";\nimport { URLManager } from \"./features/URLManager\";\nimport { RangeFilter } from \"./features/RangeFilter\";\nimport { DateFilter } from \"./features/DateFilter\";\n\nimport { debounce } from \"./utils\";\n\n// Version\nexport const VERSION = \"1.5.0\";\n\nexport class AFS extends EventEmitter {\n  /**\n   * @param {Object} options - Configuration options\n   */\n  constructor(options = {}) {\n    super();\n    this.initializeCore(options);\n  }\n\n  /**\n   * Initialize core components\n   * @private\n   */\n  initializeCore(options) {\n    try {\n      this.options = new Options(options);\n\n      // Setup logger with options\n      const debug = this.options.get(\"debug\");\n      const logLevel = this.options.get(\"logLevel\");\n      this.logger = new Logger(debug, logLevel);\n      this.logger.debug(\n        \"Logger initialized with debug:\",\n        debug,\n        \"level:\",\n        logLevel\n      );\n\n      this.state = new State();\n      this.styleManager = new StyleManager(this.options);\n\n      this.initializeDOM();\n      this.initializeFeatures();\n      this.setupLifecycle();\n    } catch (error) {\n      console.error(\"AFS initialization error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize DOM elements\n   * @private\n   */\n  initializeDOM() {\n    this.logger.debug(\"Initializing DOM elements\");\n\n    this.container = document.querySelector(\n      this.options.get(\"containerSelector\")\n    );\n    if (!this.container) {\n      throw new Error(\n        `Container not found: ${this.options.get(\"containerSelector\")}`\n      );\n    }\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\")\n    );\n    if (this.items.length === 0) {\n      this.logger.warn(\"No items found in container\");\n    }\n\n    this.state.setState(\"items.total\", this.items.length);\n    this.state.setState(\"items.visible\", new Set(this.items));\n  }\n\n  /**\n   * Initialize features\n   * @private\n   */\n  initializeFeatures() {\n    this.logger.debug(\"Initializing features\");\n\n    // Initialize all features first\n    this.filter = new Filter(this);\n    this.search = new Search(this);\n    this.sort = new Sort(this);\n    this.rangeFilter = new RangeFilter(this);\n    this.urlManager = new URLManager(this);\n    this.dateFilter = new DateFilter(this);\n    this.pagination = new Pagination(this);\n    this.inputRangeFilter = new InputRangeFilter(this);\n\n    // Apply styles\n    this.styleManager.applyStyles();\n\n    // Initialize URL state after all features are ready\n    this.urlManager.initialize();\n  }\n\n  /**\n   * Setup lifecycle events\n   * @private\n   */\n  setupLifecycle() {\n    if (this.options.get(\"responsive\")) {\n      window.addEventListener(\"resize\", this.handleResize.bind(this));\n    }\n\n    if (this.options.get(\"preserveState\")) {\n      document.addEventListener(\n        \"visibilitychange\",\n        this.handleVisibilityChange.bind(this)\n      );\n    }\n\n    if (this.options.get(\"observeDOM\")) {\n      this.setupMutationObserver();\n    }\n\n    this.emit(\"initialized\", {\n      itemCount: this.items.length,\n      options: this.options.export(),\n    });\n  }\n\n  // Item Management Methods\n  /**\n   * Show item with animation\n   * @public\n   * @param {HTMLElement} item - Item to show\n   */\n  showItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.add(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Remove hidden class but keep opacity 0 initially\n    item.classList.remove(this.options.get(\"hiddenClass\"));\n\n    // Set initial animation state\n    item.style.opacity = \"0\";\n    item.style.transform = \"scale(0.95)\";\n    item.style.display = \"\"; // Ensure item is not display: none\n\n    // Force reflow before starting animation\n    item.offsetHeight;\n\n    // Add transition class if not present\n    const transitionClass = this.options.get(\"transitionClass\");\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start animation in next frame\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        // Double RAF for reliable animation\n        item.style.opacity = \"1\";\n        item.style.transform = \"scale(1)\";\n      });\n    });\n\n    // Clean up after animation\n    const duration = this.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      // Only clean up if item is still meant to be visible\n      if (visibleItems.has(item)) {\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Hide item with animation\n   * @public\n   * @param {HTMLElement} item - Item to hide\n   */\n  hideItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.delete(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Add transition class if not present\n    const transitionClass = this.options.get(\"transitionClass\");\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start hide animation\n    requestAnimationFrame(() => {\n      item.style.opacity = \"0\";\n      item.style.transform = \"scale(0.95)\";\n    });\n\n    // Add hidden class and clean up after animation\n    const duration = this.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      // Only hide if the item is still meant to be hidden\n      if (!visibleItems.has(item)) {\n        item.classList.add(this.options.get(\"hiddenClass\"));\n        // Clean up styles\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Add new items\n   * @public\n   */\n  addItems(newItems) {\n    const items = Array.isArray(newItems) ? newItems : [newItems];\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => {\n      fragment.appendChild(item);\n      this.state.getState().items.visible.add(item);\n    });\n\n    this.container.appendChild(fragment);\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\")\n    );\n    this.filter.applyFilters();\n  }\n\n  /**\n   * Remove items\n   * @public\n   */\n  removeItems(itemsToRemove) {\n    const items = Array.isArray(itemsToRemove)\n      ? itemsToRemove\n      : [itemsToRemove];\n    const visibleItems = this.state.getState().items.visible;\n\n    items.forEach((item) => {\n      visibleItems.delete(item);\n      item.remove();\n    });\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\")\n    );\n    this.updateCounter();\n  }\n\n  // State Management Methods\n  /**\n   * Save current state\n   * @public\n   */\n  saveState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    const state = {\n      filters: Array.from(this.filter.getActiveFilters()),\n      search: this.search.getValue(),\n      sort: this.sort.getCurrentSort(),\n      pagination: this.pagination.getPageInfo(),\n      timestamp: Date.now(),\n    };\n\n    sessionStorage.setItem(\"afs_state\", JSON.stringify(state));\n    this.logger.debug(\"State saved\");\n  }\n\n  /**\n   * Restore saved state\n   * @public\n   */\n  restoreState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    try {\n      const saved = sessionStorage.getItem(\"afs_state\");\n      if (!saved) return;\n\n      const state = JSON.parse(saved);\n      if (Date.now() - state.timestamp > this.options.get(\"stateExpiry\")) {\n        localStorage.removeItem(\"afs_state\");\n        return;\n      }\n\n      this.setState(state);\n      this.logger.debug(\"State restored\");\n    } catch (error) {\n      this.logger.error(\"Error restoring state:\", error);\n    }\n  }\n\n  /**\n   * Get current state\n   * @public\n   */\n  getState() {\n    return this.state.export();\n  }\n\n  /**\n   * Set new state\n   * @public\n   */\n  setState(newState) {\n    this.state.import(newState);\n    this.refresh();\n  }\n\n  // Update Methods\n  /**\n   * Update counter display\n   * @public\n   */\n  updateCounter() {\n    // Get counter element\n    const counterElement = document.querySelector(\n      this.options.get(\"counterSelector\")\n    );\n    if (!counterElement) return;\n\n    try {\n      // Get count values\n      const total = this.items.length;\n      const visible = this.state.getState().items.visible.size;\n      const filtered = total - visible;\n\n      // Get counter options with defaults\n      const counterOpts =\n        this.options.get(\"counter\") || Options.defaults.counter;\n      const template = counterOpts.template || \"Showing {visible} of {total}\";\n      const formatter =\n        counterOpts.formatter || ((num) => num.toLocaleString());\n\n      // Format numbers\n      const formattedVisible = formatter(visible);\n      const formattedTotal = formatter(total);\n      const formattedFiltered = formatter(filtered);\n\n      // Build counter text\n      let counterText = template\n        .replace(\"{visible}\", formattedVisible)\n        .replace(\"{total}\", formattedTotal)\n        .replace(\"{filtered}\", formattedFiltered);\n\n      // Add filtered count if enabled\n      if (filtered > 0 && counterOpts.showFiltered) {\n        const filteredTemplate =\n          counterOpts.filteredTemplate || \"({filtered} filtered)\";\n        counterText +=\n          \" \" + filteredTemplate.replace(\"{filtered}\", formattedFiltered);\n      }\n\n      // Show no results message if applicable\n      if (visible === 0 && counterOpts.noResultsTemplate) {\n        counterText = counterOpts.noResultsTemplate;\n      }\n\n      // Update counter element\n      counterElement.textContent = counterText;\n\n      // Emit event\n      this.emit(\"counterUpdated\", {\n        total,\n        visible,\n        filtered,\n        formattedTotal,\n        formattedVisible,\n        formattedFiltered,\n      });\n    } catch (error) {\n      // Fallback to basic counter if anything fails\n      this.logger.error(\"Error updating counter:\", error);\n      counterElement.textContent = `${\n        this.state.getState().items.visible.size\n      }/${this.items.length}`;\n    }\n  }\n\n  /**\n   * Update options\n   * @public\n   */\n  updateOptions(newOptions) {\n    this.options.update(newOptions);\n    this.styleManager.updateStyles(newOptions);\n    this.refresh();\n  }\n\n  /**\n   * Refresh system\n   * @public\n   */\n  refresh() {\n    this.logger.debug(\"Refreshing AFS\");\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\")\n    );\n    this.state.setState(\"items.total\", this.items.length);\n\n    this.filter.applyFilters();\n    this.search.search(this.search.getValue());\n\n    // Only update pagination if it's enabled\n    if (this.options.get(\"pagination.enabled\")) {\n      this.pagination.update();\n    }\n\n    this.emit(\"refreshed\", { itemCount: this.items.length });\n  }\n\n  // Event Handlers\n  /**\n   * Handle resize\n   * @private\n   */\n  handleResize = debounce(() => {\n    this.emit(\"resize\");\n    // Do not call this.refresh() here to prevent filter resets on mobile/orientation change\n    // If you need to update layout, do it here without resetting filter state\n  }, 250);\n\n  /**\n   * Handle visibility change\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.emit(\"hidden\");\n      this.saveState();\n    } else {\n      this.emit(\"visible\");\n      this.restoreState();\n    }\n  }\n\n  /**\n   * Setup mutation observer\n   * @private\n   */\n  setupMutationObserver() {\n    const observer = new MutationObserver((mutations) => {\n      if (mutations.some((mutation) => mutation.type === \"childList\")) {\n        this.refresh();\n      }\n    });\n\n    observer.observe(this.container, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  // Utility Methods\n  /**\n   * Get version\n   * @public\n   */\n  getVersion() {\n    return VERSION;\n  }\n\n  /**\n   * Check feature support\n   * @public\n   */\n  isFeatureSupported(feature) {\n    const supportedFeatures = {\n      search: !!this.search,\n      pagination: true,\n      animation:\n        typeof document.createElement(\"div\").style.transition !== \"undefined\",\n      urlState: typeof window.history.pushState === \"function\",\n      localStorage: (() => {\n        try {\n          localStorage.setItem(\"test\", \"test\");\n          localStorage.removeItem(\"test\");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      })(),\n    };\n\n    return !!supportedFeatures[feature];\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.logger.debug(\"Destroying AFS instance\");\n\n    // Remove event listeners\n    window.removeEventListener(\"resize\", this.handleResize);\n    document.removeEventListener(\n      \"visibilitychange\",\n      this.handleVisibilityChange\n    );\n\n    // Destroy features\n    this.filter.destroy();\n    this.search.destroy();\n    this.sort.destroy();\n    this.pagination.destroy();\n    this.rangeFilter.destroy();\n\n    // Cleanup\n    this.styleManager.removeStyles();\n    this.state.reset();\n    sessionStorage.removeItem(\"afs_state\");\n\n    // Reset items\n    this.items.forEach((item) => {\n      item.style = \"\";\n      item.classList.remove(\n        this.options.get(\"hiddenClass\"),\n        this.options.get(\"activeClass\")\n      );\n    });\n\n    this.emit(\"destroyed\");\n  }\n}\n"],"names":["Logger","constructor","debug","logLevel","this","enabled","level","levels","error","warn","info","_log","args","timestamp","Date","toLocaleTimeString","prefix","toUpperCase","console","log","apply","setDebugMode","previousState","hasOwnProperty","getState","Options","static","containerSelector","itemSelector","filterButtonSelector","filterDropdownSelector","searchInputSelector","counterSelector","sortButtonSelector","activeClass","hiddenClass","activeSortClass","transitionClass","filterMode","groupMode","filterCategoryMode","filterTypeLogic","searchKeys","debounceTime","responsive","preserveState","stateExpiry","observeDOM","dateFormat","counter","template","showFiltered","filteredTemplate","noResultsTemplate","formatter","num","toLocaleString","styles","slider","ui","showHistogram","bins","track","radius","background","selected","thumb","size","histogram","bar","pagination","button","border","borderRadius","padding","color","active","hover","colors","primary","text","textHover","containerClass","trackClass","thumbClass","valueClass","selectedClass","itemsPerPage","container","pageButtonClass","activePageClass","scrollToTop","scrollOffset","scrollBehavior","animation","type","duration","easing","inClass","outClass","userOptions","options","mergeOptions","defaults","initializeStyles","validate","defaultStyles","currentStyles","target","source","result","key","Array","isArray","undefined","requiredSelectors","selector","Error","includes","length","get","path","split","reduce","obj","set","value","parts","last","pop","update","updates","reset","export","State","state","filters","current","Set","groups","Map","ranges","dateRanges","mode","search","query","keys","sort","orders","items","visible","total","currentPage","totalPages","setState","i","from","entries","import","importedState","StyleManager","styleElement","createBaseStyles","animationDuration","animationEasing","primaryColor","backgroundColor","textColor","textHoverColor","buttonStyles","dropdownStyles","checkboxStyles","radioStyles","buttonPadding","dropdownPadding","buttonBorder","dropdownBorder","buttonBorderRadius","dropdownBorderRadius","buttonFontSize","fontSize","dropdownFontSize","buttonFontFamily","fontFamily","dropdownFontFamily","buttonFontWeight","fontWeight","dropdownFontWeight","buttonLineHeight","lineHeight","dropdownLineHeight","buttonLetterSpacing","letterSpacing","dropdownLetterSpacing","buttonTextTransform","textTransform","dropdownTextTransform","buttonBoxShadow","boxShadow","dropdownBoxShadow","buttonBackgroundColor","dropdownBackgroundColor","buttonTextColor","dropdownTextColor","checkboxBorder","checkboxBorderRadius","checkboxBackgroundColor","checkboxTextColor","checkboxPadding","checkboxHeight","height","checkboxWidth","width","checkboxActiveBorder","activeBorder","radioBorder","radioBorderRadius","radioBackgroundColor","radioTextColor","radioPadding","radioHeight","radioWidth","radioActiveBorder","rgbValues","match","rgbaColor","parseInt","arrowSvg","encodeURIComponent","addTransitionStyles","style","document","createElement","textContent","head","appendChild","createRangeStyles","sliderOptions","sliderStyles","createDateStyles","createInputRangeStyles","applyStyles","createPaginationStyles","createSearchStyles","fallbackStyles","paginationOptions","buttonClass","paginationStyles","searchClass","updateStyles","newOptions","removeStyles","remove","EventEmitter","events","onceEvents","on","eventName","callback","has","add","off","once","onceWrapper","delete","emit","forEach","removeAllListeners","clear","listenerCount","Animation","afs","animations","fade","in","opacity","transform","transitionTimingFunction","out","slide","scale","rotate","flip","zoom","bounce","blur","filter","skew","slideInLeft","slideInRight","fadeInUp","fadeInDown","bounceIn","applyShowAnimation","item","animationType","classList","display","getItemDisplayType","visibility","window","innerWidth","requestAnimationFrame","Object","assign","setTimeout","transition","applyHideAnimation","updateOptions","timing","querySelector","setAnimation","Filter","filterButtons","activeFilters","currentFilters","filterGroups","sortOrders","itemDisplayTypes","exclusiveFilterTypes","isScrolling","scrollTimeout","setupFilters","logger","filterSelector","querySelectorAll","filterValue","dataset","bindFilterEvent","dropdown","bindDropdownEvent","computedStyle","getComputedStyle","setLogic","logic","applyFilters","clearAllFilters","_","allButton","findAllButton","select","filterType","getAttribute","id","replace","toLowerCase","allOption","find","option","endsWith","event","Event","bubbles","cancelable","dispatchEvent","selectedIndex","urlManager","updateURL","addEventListener","selectedValue","existingFilter","startsWith","resetFilters","clearFilterCategory","toggleFilter","categoryFilter","category","filtersToRemove","push","btn","removedFilters","animationPromises","promise","Promise","resolve","visibleItems","all","then","updateCounter","handleFilterClick","radioName","name","radio","radioValue","typeLogic","allowMultiple","typeConfig","multi","isExclusiveType","isRadioInput","tagName","isCheckboxInput","isRegularButton","shouldUseExclusiveToggle","val","contains","previouslyVisible","itemMatchesFilters","parseFloat","showItem","syncCheckboxStates","emitFilterEvents","checkboxes","checkbox","isActive","checked","itemCategories","categories","itemMatchesMixedFilters","itemMatchesAllFilters","itemMatchesAnyFilter","some","every","filtersByType","colonIndex","indexOf","substring","matchesType","itemMatchesFilterGroups","groupMatches","values","map","group","operator","matches","nowVisible","added","removed","addFilterGroup","groupId","validOperator","removeFilterGroup","setGroupMode","validMode","addFilter","removeFilter","setFilterMode","setFilterTypeLogic","typeOrConfig","validLogic","currentLogic","newLogic","setFilterTypeExclusive","types","exclusive","toggleFilterExclusive","targetButton","isCurrentlyActive","getActiveFilters","getFilterGroups","addFilterButton","sortWithOrder","newOrder","sortType","determineSortType","a","b","valueA","getSortValue","valueB","compareValues","reorderItems","order","shuffle","j","Math","floor","random","itemCount","isNaN","test","getTime","comparison","fragment","createDocumentFragment","getCurrentSortOrder","clearSortOrders","setValue","refresh","removeFilterButton","removeEventListener","destroy","originalDisplay","debounce","func","wait","immediate","timeout","context","callNow","clearTimeout","later","InputRangeFilter","activeRanges","addInputRange","min","max","step","label","calculateMinMax","elements","createInputElements","initializeState","appendElements","setupEventHandlers","updateInputUI","className","labelElement","minWrapper","minLabel","minInput","maxWrapper","maxLabel","maxInput","currentMin","currentMax","handleInputChange","minValue","maxValue","applyFilter","hideItem","itemValue","getRange","range","setRange","removeInputRange","Search","searchInput","minSearchLength","highlightClass","setupSearch","searchSelector","bindSearchEvents","debouncedSearch","e","clearSearch","preventDefault","normalizedQuery","normalizeQuery","regex","createSearchRegex","searchText","getItemSearchText","matchesSearch","highlightMatches","removeHighlights","trim","pattern","Boolean","word","join","RegExp","words","highlightedText","wordRegex","innerHTML","highlight","replaceWith","getValue","updateConfig","handleClear","handleEnter","Sort","sortButtons","setupSort","sortSelector","buttons","sortKey","direction","sortDirection","bindSortEvent","sortData","updateSortButtonState","indicator","isFinite","prototype","call","date","String","modifier","needsReordering","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","sortMultiple","criteria","criterion","index","sortTypes","sortWithComparator","comparator","comparatorName","buttonCount","data","getCurrentSort","addSortButton","removeSortButton","Pagination","setupPagination","itemsContainer","bindEvents","closest","page","goToPage","showAllItems","ceil","currentState","updateVisibility","renderPagination","startIndex","endIndex","itemsToShow","slice","controls","createPaginationControls","showPrevNext","prevButton","createPageButton","disabled","class","calculatePageRange","start","createEllipsis","end","nextButton","span","maxButtons","targetPage","previousPage","scrollTo","top","offsetTop","behavior","setPaginationMode","isMobile","URLManager","defaultParams","URLSearchParams","setupPopStateHandler","initialize","loadFromURL","params","addFiltersToURL","addRangesToURL","addSearchToURL","addSortToURL","addPaginationToURL","pushState","toISOString","queryString","newURL","location","pathname","href","history","filterParams","isRegularFilter","processSearchFromURL","processSortFromURL","processPaginationFromURL","fromEntries","processFiltersFromURL","hasFilters","processRangesFromURL","rangeKey","Number","str","searchQuery","sortParam","perPage","param","clearURL","getURLParams","hasParams","getParam","RangeFilter","styleManager","addRangeSlider","sliderUiOptions","histogramData","calculateHistogramData","counts","binEdges","createSliderElements","updateSliderUI","setupHistogramHighlight","createHistogramBars","selectedRange","minThumb","maxThumb","createHistogram","binWidth","fill","maxCount","count","round","bars","updateHistogram","minVal","maxVal","isDragging","handleStart","isMin","moveHandler","moveEvent","evt","touches","createMoveHandler","stopHandler","passive","maxPos","clampedMinPos","clampedMaxPos","left","formatValue","toLocaleDateString","toFixed","clientX","rect","getBoundingClientRect","totalWidth","paddingPixels","PADDING","stepped","getRangeValues","setRangeValues","removeRangeSlider","DateFilter","activeDateRanges","defaultFormat","addDateRange","minDate","maxDate","format","dates","calculateMinMaxDates","createDateElements","updateDateUI","validDates","today","getFullYear","startContainer","startLabel","startInput","endContainer","endLabel","endInput","currentStartDate","currentEndDate","handleDateChange","startDate","endDate","applyDateFilter","formatDate","d","itemDate","setHours","compareDate","getDateRange","setDateRange","removeDateRange","VERSION","AFS","super","initializeCore","initializeDOM","initializeFeatures","setupLifecycle","rangeFilter","dateFilter","inputRangeFilter","handleResize","bind","handleVisibilityChange","setupMutationObserver","addItems","newItems","removeItems","itemsToRemove","saveState","getPageInfo","now","sessionStorage","setItem","JSON","stringify","restoreState","saved","getItem","parse","localStorage","removeItem","newState","counterElement","filtered","counterOpts","formattedVisible","formattedTotal","formattedFiltered","counterText","hidden","MutationObserver","mutations","mutation","observe","childList","subtree","getVersion","isFeatureSupported","feature","urlState"],"mappings":"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"}