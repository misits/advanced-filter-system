{"version":3,"file":"AFS.min.js","sources":["../src/core/Logger.js","../src/core/Options.js","../src/core/State.js","../src/styles/StyleManager.js","../src/core/EventEmitter.js","../src/styles/Animation.js","../src/features/Filter.js","../src/utils/index.js","../src/features/Search.js","../src/features/Sort.js","../src/features/Pagination.js","../src/features/URLManager.js","../src/features/RangeFilter.js","../src/features/DateFilter.js","../src/AFS.js"],"sourcesContent":["/**\n * @fileoverview Logging system for AFS\n */\n\nexport class Logger {\n  /**\n   * @param {boolean} [debug=false] - Enable debug mode\n   * @param {string} [logLevel='info'] - Logging level\n   */\n  constructor(debug = false, logLevel = 'info') {\n    this.enabled = debug;\n    this.level = logLevel;\n    this.levels = {\n      error: 0,\n      warn: 1,\n      info: 2,\n      debug: 3\n    };\n  }\n\n  /**\n   * Internal log method\n   * @private\n   */\n  _log(level, ...args) {\n    if (!this.enabled) return;\n\n    const currentLevelValue = this.levels[this.level];\n    const messageLevel = this.levels[level];\n\n    if (messageLevel <= currentLevelValue) {\n      const timestamp = new Date().toISOString();\n      const prefix = `[AFS ${level.toUpperCase()}] ${timestamp}`;\n\n      switch (level) {\n        case 'error':\n          console.error(prefix, ...args);\n          break;\n        case 'warn':\n          console.warn(prefix, ...args);\n          break;\n        case 'info':\n          console.info(prefix, ...args);\n          break;\n        case 'debug':\n          console.debug(prefix, ...args);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Log error message\n   * @public\n   */\n  error(...args) {\n    this._log('error', ...args);\n  }\n\n  /**\n   * Log warning message\n   * @public\n   */\n  warn(...args) {\n    this._log('warn', ...args);\n  }\n\n  /**\n   * Log info message\n   * @public\n   */\n  info(...args) {\n    this._log('info', ...args);\n  }\n\n  /**\n   * Log debug message\n   * @public\n   */\n  debug(...args) {\n    this._log('debug', ...args);\n  }\n\n  /**\n   * Enable or disable debug mode\n   * @public\n   */\n  setDebugMode(enabled, level = 'info') {\n    this.enabled = enabled;\n    if (this.levels.hasOwnProperty(level)) {\n      this.level = level;\n    }\n    this._log('info', `Debug mode ${enabled ? 'enabled' : 'disabled'} with level: ${level}`);\n  }\n}","/**\n * @fileoverview Configuration management for AFS\n */\n\nexport class Options {\n  /**\n   * @typedef {Object} AFSOptions\n   * @property {string} containerSelector - Main container selector\n   * @property {string} itemSelector - Items to filter selector\n   * @property {string} filterButtonSelector - Filter buttons selector\n   * @property {string} searchInputSelector - Search input selector\n   * @property {string} counterSelector - Results counter selector\n   * @property {string} activeClass - Active state class\n   * @property {string} hiddenClass - Hidden state class\n   * @property {number} animationDuration - Animation duration in ms\n   * @property {string} filterMode - Filter mode ('OR' or 'AND')\n   * @property {string[]} searchKeys - Data attributes to search in\n   * @property {number} debounceTime - Search debounce delay in ms\n   * @property {boolean} debug - Enable debug mode\n   * @property {string} logLevel - Log level\n   * @property {string} dateFormat - Date format\n   * @property {Object} counter - Counter-related options\n   * @property {Object} styles - Style-related options\n   */\n\n  /**\n   * @type {AFSOptions}\n   */\n  static defaults = {\n    // Selectors\n    containerSelector: '.afs-filter-container',\n    itemSelector: '.afs-filter-item',\n    filterButtonSelector: '.afs-btn-filter',\n    searchInputSelector: '.afs-filter-search',\n    counterSelector: '.afs-filter-counter',\n\n    // Classes\n    activeClass: 'active',\n    hiddenClass: 'hidden',\n\n    // Animation\n    animationDuration: 300,\n    animationType: 'fade',\n    animationEasing: 'ease-out',\n\n    // Filtering\n    filterMode: 'OR',\n    searchKeys: ['title'],\n    debounceTime: 300,\n\n    // Debug\n    debug: false,\n    logLevel: 'info',\n\n    // Date handling\n    dateFormat: 'YYYY-MM-DD',\n\n    counter: {\n      template: 'Showing {visible} of {total}',\n      showFiltered: true,\n      filteredTemplate: '({filtered} filtered)',\n      noResultsTemplate: 'No items found',\n      formatter: (num) => num.toLocaleString()\n    },\n\n    // Styles\n    styles: {\n      slider: {\n        // Add new UI options\n        ui: {\n          showHistogram: false,\n          bins: 10, // Number of bins for histogram\n          track: {\n            radius: '2px', // Button radius\n            background: '#e5e7eb', // Track color\n          },\n          thumb: {\n            radius: '50%', // Button radius\n            size: '16px', // Button size\n            background: '#000', // Button color\n          },\n          histogram: {\n            background: '#e5e7eb', // Histogram background\n            bar: {\n              background: '#000', // Bar color\n            }\n          }\n        }\n      },\n      pagination: {\n        ui: {\n          button: {\n            background: 'transparent',\n            border: '1px solid #000',\n            borderRadius: '4px',\n            padding: '8px 12px',\n            color: '#000',\n            active: {\n              background: '#000',\n              color: '#fff',\n            },\n            hover: {\n              background: '#000',\n              color: '#fff',\n            }\n          }\n        },\n      },\n      colors: {\n        primary: '#000',\n        background: '#e5e7eb',\n        text: '#000',\n      }\n    },\n\n    // Slider\n    slider: {\n      containerClass: 'afs-range-slider',\n      trackClass: 'afs-range-track',\n      thumbClass: 'afs-range-thumb',\n      valueClass: 'afs-range-value',\n      selectedClass: 'afs-range-selected',\n    },\n\n    // Pagination\n    pagination: {\n      enabled: false,\n      itemsPerPage: 10,\n      container: '.afs-pagination-container',\n      pageButtonClass: 'afs-page-button',\n      activePageClass: 'afs-page-active',\n      containerClass: 'afs-pagination',\n      scrollToTop: false,\n      scrollOffset: 50,\n      scrollBehavior: 'smooth', // or 'auto' for instant scroll\n    }\n  }\n\n  constructor(userOptions = {}) {\n    this.options = this.mergeOptions(Options.defaults, userOptions);\n    this.initializeStyles();\n    this.validate();\n  }\n\n  /**\n   * Initialize styles with defaults\n   * @private\n   */\n  initializeStyles() {\n    const defaultStyles = Options.defaults.styles;\n    const currentStyles = this.options.styles || {};\n\n    this.options.styles = this.mergeOptions(defaultStyles, currentStyles);\n\n    // Ensure colors object exists and has all required properties\n    this.options.styles.colors = {\n      ...defaultStyles.colors,\n      ...(currentStyles.colors || {})\n    };\n}\n\n  /**\n   * Deep merge options\n   * @private\n   * @param {Object} target - Target object\n   * @param {Object} source - Source object\n   * @returns {Object} Merged options\n   */\n  mergeOptions(target, source) {\n    const result = { ...target };\n  \n    for (const key in source) {\n      if (source[key] !== null && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        // If the key doesn't exist in target or isn't an object, create/override it\n        if (!target[key] || typeof target[key] !== 'object') {\n          result[key] = {};\n        }\n        // Recursively merge nested objects\n        result[key] = this.mergeOptions(result[key], source[key]);\n      } else if (source[key] !== undefined) {\n        // Only override if the source value is defined\n        result[key] = source[key];\n      }\n    }\n  \n    return result;\n  }\n\n  /**\n   * Validate options\n   * @private\n   * @throws {Error} If options are invalid\n   */\n  validate() {\n    // Required selectors\n    const requiredSelectors = ['containerSelector', 'itemSelector'];\n    for (const selector of requiredSelectors) {\n      if (typeof this.options[selector] !== 'string') {\n        throw new Error(`${selector} must be a string`);\n      }\n    }\n\n    // Animation duration\n    if (typeof this.options.animationDuration !== 'number' || this.options.animationDuration < 0) {\n      throw new Error('animationDuration must be a positive number');\n    }\n\n    // Filter mode\n    if (!['OR', 'AND'].includes(this.options.filterMode.toUpperCase())) {\n      throw new Error('filterMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Search keys\n    if (!Array.isArray(this.options.searchKeys) || this.options.searchKeys.length === 0) {\n      throw new Error('searchKeys must be a non-empty array');\n    }\n\n    // Counter validation\n    if (this.options.counter) {\n      if (typeof this.options.counter.template !== 'string') {\n        throw new Error('counter.template must be a string');\n      }\n      if (typeof this.options.counter.showFiltered !== 'boolean') {\n        this.options.counter.showFiltered = true; // Set default\n      }\n      if (typeof this.options.counter.formatter !== 'function') {\n        this.options.counter.formatter = (num) => num.toLocaleString(); // Set default\n      }\n    } else {\n      this.options.counter = { ...Options.defaults.counter }; // Set defaults if missing\n    }\n  }\n\n  /**\n   * Get option value\n   * @param {string} path - Dot notation path to option\n   * @returns {any} Option value\n   */\n  get(path) {\n    return path.split('.').reduce((obj, key) => obj?.[key], this.options);\n  }\n\n  /**\n   * Set option value\n   * @param {string} path - Dot notation path to option\n   * @param {any} value - New value\n   */\n  set(path, value) {\n    const parts = path.split('.');\n    const last = parts.pop();\n    const target = parts.reduce((obj, key) => {\n      if (!(key in obj)) obj[key] = {};\n      return obj[key];\n    }, this.options);\n\n    target[last] = value;\n    this.validate();\n  }\n\n  /**\n   * Update multiple options\n   * @param {Object} updates - Options to update\n   */\n  update(updates) {\n    this.options = this.mergeOptions(this.options, updates);\n    this.validate();\n  }\n\n  /**\n   * Reset options to defaults\n   */\n  reset() {\n    this.options = { ...Options.defaults };\n  }\n\n  /**\n   * Export options\n   * @returns {Object} Current options\n   */\n  export() {\n    return { ...this.options };\n  }\n}","/**\n * @fileoverview State management for AFS\n */\n\nexport class State {\n  constructor() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n\n  /**\n   * Get current state\n   * @returns {Object} Current state\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Update state\n   * @param {string} path - Dot notation path to update\n   * @param {any} value - New value\n   */\n  setState(path, value) {\n    const parts = path.split('.');\n    let current = this.state;\n    \n    for (let i = 0; i < parts.length - 1; i++) {\n      if (!(parts[i] in current)) {\n        current[parts[i]] = {};\n      }\n      current = current[parts[i]];\n    }\n    \n    current[parts[parts.length - 1]] = value;\n  }\n\n  /**\n   * Export state\n   * @returns {Object} Exportable state\n   */\n  export() {\n    return {\n      filters: {\n        current: Array.from(this.state.filters.current),\n        groups: Array.from(this.state.filters.groups.entries()),\n        ranges: Array.from(this.state.filters.ranges.entries()),\n        dateRanges: Array.from(this.state.filters.dateRanges.entries()),\n        mode: this.state.filters.mode,\n        groupMode: this.state.filters.groupMode\n      },\n      search: { ...this.state.search },\n      sort: { ...this.state.sort },\n      pagination: { ...this.state.pagination }\n    };\n  }\n\n  /**\n   * Import state\n   * @param {Object} importedState - State to import\n   */\n  import(importedState) {\n    if (importedState.filters) {\n      this.state.filters.current = new Set(importedState.filters.current);\n      this.state.filters.groups = new Map(importedState.filters.groups);\n      this.state.filters.ranges = new Map(importedState.filters.ranges);\n      this.state.filters.dateRanges = new Map(importedState.filters.dateRanges);\n      this.state.filters.mode = importedState.filters.mode;\n      this.state.filters.groupMode = importedState.filters.groupMode;\n    }\n\n    if (importedState.search) {\n      this.state.search = { ...importedState.search };\n    }\n\n    if (importedState.sort) {\n      this.state.sort = { ...importedState.sort };\n    }\n\n    if (importedState.pagination) {\n      this.state.pagination = { ...importedState.pagination };\n    }\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  reset() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n}","/**\n * @fileoverview Style management for AFS\n */\n\nexport class StyleManager {\n  /**\n   * @param {import('../core/Options').Options} options - Options instance\n   */\n  constructor(options) {\n    this.options = options;\n    this.styleElement = null;\n  }\n\n  /**\n   * Create base styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createBaseStyles() {\n    const hiddenClass = this.options.get(\"hiddenClass\") || \"hidden\";\n    const itemSelector = this.options.get(\"itemSelector\") || \".afs-filter-item\";\n    const filterButtonSelector = this.options.get(\"filterButtonSelector\") || \".afs-btn-filter\";\n    const activeClass = this.options.get(\"activeClass\") || \"active\";\n    const animationDuration = this.options.get(\"animationDuration\") || '300ms';\n    const animationEasing = this.options.get(\"animationEasing\") || 'ease-out';\n    \n    return `\n      .${hiddenClass} {\n        display: none !important;\n      }\n\n      ${itemSelector} {\n        opacity: 1;\n        transform: scale(1);\n        filter: blur(0);\n        transition: opacity ${animationDuration} ${animationEasing},\n                    transform ${animationDuration} ${animationEasing},\n                    filter ${animationDuration} ${animationEasing};\n      }\n\n      ${itemSelector}.${hiddenClass} {\n        opacity: 0;\n        transform: scale(0.95);\n        filter: blur(5px);\n      }\n\n      ${filterButtonSelector} {\n        opacity: 0.5;\n        transition: opacity ${animationDuration} ${animationEasing};\n      }\n\n      ${filterButtonSelector}.${activeClass} {\n        opacity: 1;\n      }\n    `;\n}\n\n  /**\n   * Create range slider styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createRangeStyles() {\n    const styles = this.options.get(\"styles\");\n    const sliderOptions = this.options.get(\"slider\") || {};\n    const sliderStyles = styles.slider;\n    const colors = styles.colors;\n\n    const containerClass = sliderOptions.containerClass || \"afs-range-slider\";\n    const trackClass = sliderOptions.trackClass || \"afs-range-track\";\n    const thumbClass = sliderOptions.thumbClass || \"afs-range-thumb\";\n    const valueClass = sliderOptions.valueClass || \"afs-range-value\";\n    const selectedClass = sliderOptions.selectedClass || \"afs-range-selected\";\n\n    return `\n    /* Range Slider Styles */\n    .${containerClass} {\n      position: relative;\n      width: auto;\n      height: 40px;\n      margin: 10px 0;\n      padding: 0 8px;\n    }\n\n    .${trackClass} {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 100%;\n      height: 4px;\n      background: ${sliderStyles.ui.thumb.background || colors.background};\n      border-radius: ${sliderStyles.ui.track.radius || \"2px\"};\n    }\n\n    .${thumbClass} {\n      position: absolute;\n      top: 50%;\n      width: ${sliderStyles.ui.thumb.size || \"16px\"};\n      height: ${sliderStyles.ui.thumb.size || \"16px\"};\n      background: ${sliderStyles.ui.thumb.background || colors.primary};\n      border-radius: ${sliderStyles.ui.thumb.radius || \"50%\"};\n      transform: translate(-50%, -50%);\n      cursor: pointer;\n      z-index: 2;\n    }\n\n    .${valueClass} {\n      position: absolute;\n      top: -20px;\n      transform: translateX(-50%);\n      font-size: 10px;\n      color: ${colors.text};\n    }\n\n    .${selectedClass} {\n      position: absolute;\n      height: 4px;\n      background: ${colors.primary};\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    /* Histogram Styles */\n    .afs-histogram {\n      position: absolute;\n      bottom: 22px;\n      left: 8px;\n      right: 8px;\n      height: 20px;\n      display: flex;\n      align-items: flex-end;\n      gap: 1px;\n      opacity: 0.5;\n    }\n\n    .afs-histogram-bar {\n      flex: 1;\n      background-color: ${sliderStyles.ui.histogram.background ||colors.background};\n      min-height: 4px;\n      transition: background-color 0.2s ease;\n    }\n\n    .afs-histogram-bar.active {\n      background-color: ${sliderStyles.ui.histogram.bar.background || colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createDateStyles() {\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n    .afs-date-range-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin: 10px 0;\n    }\n\n    .afs-date-input-wrapper {\n      flex: 1;\n    }\n\n    .afs-date-input-wrapper label {\n      display: block;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      margin-bottom: 0.5rem;\n    }\n\n    .afs-date-input {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid ${colors.background};\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      transition: border-color 0.2s ease;\n    }\n\n    .afs-date-input:focus {\n      outline: none;\n      border-color: ${colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Apply all styles\n   * @public\n   */\n  applyStyles() {\n    try {\n      const styles = `\n      /* Base styles */\n      ${this.createBaseStyles()}\n\n      /* Range slider styles */\n      ${this.createRangeStyles()}\n\n      /* Date filter styles */\n      ${this.createDateStyles()}\n\n      /* Pagination styles */\n      ${this.createPaginationStyles()}\n\n      /* Search styles */\n      ${this.createSearchStyles()}\n    `;\n\n      if (this.styleElement) {\n        this.styleElement.textContent = styles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = styles;\n        document.head.appendChild(this.styleElement);\n      }\n    } catch (error) {\n      console.error(\"Error applying styles:\", error);\n      const fallbackStyles = this.createBaseStyles();\n      if (this.styleElement) {\n        this.styleElement.textContent = fallbackStyles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = fallbackStyles;\n        document.head.appendChild(this.styleElement);\n      }\n    }\n  }\n\n  /**\n   * Create pagination styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createPaginationStyles() {\n    const styles = this.options.get(\"styles\");\n    const paginationOptions = this.options.get(\"pagination\") || {};\n    const colors = this.options.get(\"styles\").colors;\n\n    const containerClass = paginationOptions.containerClass || \"afs-pagination\";\n    const buttonClass = paginationOptions.pageButtonClass || \"afs-page-button\";\n    const activeClass = paginationOptions.activePageClass || \"afs-page-active\";\n\n    const paginationStyles = styles.pagination;\n\n    return `\n      .${containerClass} {\n        display: flex;\n        justify-content: center;\n        gap: 8px;\n        margin-top: 20px;\n      }\n\n      .${buttonClass} {\n        padding: ${paginationStyles.ui.button.padding || '8px 12px'};\n        border: ${paginationStyles.ui.button.border || '1px solid ' + colors.primary};\n        border-radius: ${paginationStyles.ui.button.borderRadius || '4px'};\n        cursor: pointer;\n        transition: all 200ms ease-out;\n        background: ${paginationStyles.ui.button.background || 'transparent' };\n        color: ${paginationStyles.ui.button.color || colors.primary};\n      }\n\n      .${buttonClass}:hover {\n        background: ${paginationStyles.ui.button.hover.background || colors.primary};\n        color: ${paginationStyles.ui.button.hover.color || 'white'};\n      }\n\n      .${buttonClass}.${activeClass} {\n        background: ${paginationStyles.ui.button.active.background || colors.primary};\n        color: ${paginationStyles.ui.button.active.color || 'white'};\n      }\n\n      .${buttonClass}:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n\n  /**\n   * Create search styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createSearchStyles() {\n    const searchClass = this.options.get(\"searchInputClass\") || \"afs-search\";\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n      .${searchClass} {\n        padding: 8px;\n        border: 1px solid ${colors.background};\n        border-radius: 4px;\n        width: 100%;\n        max-width: 300px;\n        transition: border-color 200ms ease-out;\n      }\n\n      .${searchClass}:focus {\n        outline: none;\n        border-color: ${colors.primary};\n      }\n    `;\n  }\n\n  /**\n   * Update styles\n   * @public\n   * @param {Object} newOptions - New style options\n   */\n  updateStyles(newOptions) {\n    this.options = newOptions;\n    this.applyStyles();\n  }\n\n  /**\n   * Remove styles\n   * @public\n   */\n  removeStyles() {\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n}\n","/**\n * @fileoverview Event handling system for AFS\n */\n\nexport class EventEmitter {\n  constructor() {\n    this.events = new Map();\n    this.onceEvents = new Map();\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventName, callback) {\n    if (!this.events.has(eventName)) {\n      this.events.set(eventName, new Set());\n    }\n\n    this.events.get(eventName).add(callback);\n\n    // Return unsubscribe function\n    return () => this.off(eventName, callback);\n  }\n\n  /**\n   * Subscribe to an event once\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventName, callback) {\n    const onceWrapper = (...args) => {\n      this.off(eventName, onceWrapper);\n      callback.apply(this, args);\n    };\n\n    if (!this.onceEvents.has(eventName)) {\n      this.onceEvents.set(eventName, new Map());\n    }\n\n    this.onceEvents.get(eventName).set(callback, onceWrapper);\n    return this.on(eventName, onceWrapper);\n  }\n\n  /**\n   * Unsubscribe from an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   */\n  off(eventName, callback) {\n    // Remove from regular events\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).delete(callback);\n\n      // Cleanup if no more listeners\n      if (this.events.get(eventName).size === 0) {\n        this.events.delete(eventName);\n      }\n    }\n\n    // Remove from once events\n    if (this.onceEvents.has(eventName)) {\n      const onceWrapper = this.onceEvents.get(eventName).get(callback);\n      if (onceWrapper) {\n        this.events.get(eventName)?.delete(onceWrapper);\n        this.onceEvents.get(eventName).delete(callback);\n      }\n\n      // Cleanup if no more once listeners\n      if (this.onceEvents.get(eventName).size === 0) {\n        this.onceEvents.delete(eventName);\n      }\n    }\n  }\n\n  /**\n   * Emit an event\n   * @param {string} eventName - Name of the event\n   * @param {...any} args - Arguments to pass to callbacks\n   */\n  emit(eventName, ...args) {\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all event listeners\n   * @param {string} [eventName] - Optional event name to clear specific event\n   */\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n      this.onceEvents.delete(eventName);\n    } else {\n      this.events.clear();\n      this.onceEvents.clear();\n    }\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event\n   * @returns {number} Number of listeners\n   */\n  listenerCount(eventName) {\n    return (this.events.get(eventName)?.size || 0) + \n           (this.onceEvents.get(eventName)?.size || 0);\n  }\n}","/**\n * @fileoverview Animation management for AFS\n */\n\nexport class Animation {\n    constructor(afs) {\n        this.afs = afs;\n        this.options = this.afs.options;\n        this.animations = {\n          fade: {\n            in: { opacity: 1, transform: 'scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.95)', transitionTimingFunction: 'ease-out' },\n          },\n          slide: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in-out' },\n            out: { opacity: 0, transform: 'translateY(20px)', transitionTimingFunction: 'ease-in-out' },\n          },\n          scale: {\n            in: { opacity: 1, transform: 'scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.8)', transitionTimingFunction: 'ease-out' },\n          },\n          rotate: {\n            in: { opacity: 1, transform: 'rotate(0deg) scale(1)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'rotate(90deg) scale(0.9)', transitionTimingFunction: 'ease-out' },\n          },\n          flip: {\n            in: { opacity: 1, transform: 'rotateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'rotateY(180deg)', transitionTimingFunction: 'ease-out' },\n          },\n          zoom: {\n            in: { opacity: 1, transform: 'scale(1.2)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'scale(0.8)', transitionTimingFunction: 'ease-out' },\n          },\n          bounce: {\n            in: { opacity: 1, transform: 'translateY(0)', animation: 'bounce 1s cubic-bezier(0.68, -0.55, 0.27, 1.55)' },\n            out: { opacity: 0, transform: 'translateY(-20px)', animation: 'bounceOut 1s ease-out' },\n          },\n          blur: {\n            in: { opacity: 1, filter: 'blur(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, filter: 'blur(5px)', transitionTimingFunction: 'ease-out' },\n          },\n          skew: {\n            in: { opacity: 1, transform: 'skew(0deg)', transitionTimingFunction: 'ease-in-out' },\n            out: { opacity: 0, transform: 'skew(10deg)', transitionTimingFunction: 'ease-in-out' },\n          },\n          slideInLeft: {\n            in: { opacity: 1, transform: 'translateX(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateX(-100%)', transitionTimingFunction: 'ease-out' },\n          },\n          slideInRight: {\n            in: { opacity: 1, transform: 'translateX(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateX(100%)', transitionTimingFunction: 'ease-out' },\n          },\n          fadeInUp: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateY(10px)', transitionTimingFunction: 'ease-out' },\n          },\n          fadeInDown: {\n            in: { opacity: 1, transform: 'translateY(0)', transitionTimingFunction: 'ease-in' },\n            out: { opacity: 0, transform: 'translateY(-10px)', transitionTimingFunction: 'ease-out' },\n          },\n          bounceIn: {\n            in: { opacity: 1, transform: 'scale(1.05)', transitionTimingFunction: 'cubic-bezier(0.68, -0.55, 0.27, 1.55)' },\n            out: { opacity: 0, transform: 'scale(0.9)', transitionTimingFunction: 'ease-out' },\n          },\n        };\n      }\n      \n    applyShowAnimation(item, animationType = 'fade') {\n      const duration = this.options.get('animationDuration') || '300ms';\n      const animation = this.animations[animationType]?.in || this.animations.fade.in;\n      \n      item.style.display = 'block';\n      requestAnimationFrame(() => {\n        Object.assign(item.style, animation, {\n          transition: `opacity ${duration} ${animation.transitionTimingFunction}, transform ${duration} ${animation.transitionTimingFunction}`,\n        });\n      });\n    }\n  \n    applyHideAnimation(item, animationType = 'fade') {\n      const duration = this.options.get('animationDuration') || '300ms';\n      const animation = this.animations[animationType]?.out || this.animations.fade.out;\n      \n      Object.assign(item.style, animation, {\n        transition: `opacity ${duration} ${animation.transitionTimingFunction}, transform ${duration} ${animation.transitionTimingFunction}`,\n      });\n\n      const handleTransitionEnd = () => {\n        item.style.display = 'none';\n        item.removeEventListener('transitionend', handleTransitionEnd);\n      };\n      item.addEventListener('transitionend', handleTransitionEnd);\n    }\n\n    setAnimation(animationType) {\n      this.afs.options.set('animationType', animationType);\n    }\n}","/**\n * @fileoverview Filter functionality for AFS\n */\n\nimport { Animation } from '../styles/Animation.js';\n\nexport class Filter {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.animation = new Animation(afs);\n    this.filterButtons = new Map();\n    this.activeFilters = new Set([\"*\"]);\n    this.currentFilters = new Set([\"*\"]);\n    this.filterGroups = new Map();\n    this.sortOrders = new Map();\n    this.setupFilters();\n  }\n\n  /**\n   * Setup filters\n   * @private\n   */\n  setupFilters() {\n    this.afs.logger.debug(\"Setting up filters\");\n    const filterSelector = this.afs.options.get(\"filterButtonSelector\");\n    if (!filterSelector) return;\n\n    // Initialize filter buttons\n    document.querySelectorAll(filterSelector).forEach((button) => {\n      const filterValue = button.dataset.filter;\n      if (!filterValue) {\n        this.afs.logger.warn(\n          \"Filter button missing data-filter attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.filterButtons.set(button, filterValue);\n      this.bindFilterEvent(button);\n    });\n\n    this.afs.logger.debug(\"Filters initialized\");\n  }\n\n  /**\n   * Set filter logic mode\n   * @public\n   * @param {string|boolean} logic - 'AND'/'OR' or true/false (true = AND, false = OR)\n   */\n  setLogic(logic) {\n    if (typeof logic === \"boolean\") {\n      // Handle boolean input (true = AND, false = OR)\n      this.afs.options.set(\"filterMode\", logic ? \"AND\" : \"OR\");\n    } else {\n      const mode = logic.toUpperCase();\n      if ([\"OR\", \"AND\"].includes(mode)) {\n        this.afs.options.set(\"filterMode\", mode);\n      } else {\n        this.afs.logger.warn(`Invalid filter mode: ${logic}`);\n        return;\n      }\n    }\n\n    this.afs.logger.debug(\n      `Filter logic set to: ${this.afs.options.get(\"filterMode\")}`,\n    );\n    this.applyFilters();\n  }\n\n  /**\n   * Clear all filters\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Reset filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Reset filter groups\n    this.filterGroups.clear();\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear sorting\n    this.sortOrders.clear();\n\n    // Apply changes and update UI\n    this.applyFilters();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"filtersCleared\");\n  }\n\n  /**\n   * Bind filter event to button\n   * @private\n   * @param {HTMLElement} button - Filter button\n   */\n  bindFilterEvent(button) {\n    this.afs.logger.debug(\"Binding filter event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const filterValue = this.filterButtons.get(button);\n\n      if (!filterValue) return;\n\n      if (filterValue === \"*\") {\n        this.resetFilters();\n      } else {\n        this.toggleFilter(filterValue, button);\n      }\n\n      // Update the URL after filter change\n      this.afs.urlManager.updateURL();\n    });\n  }\n\n  /**\n   * Reset filters to default state\n   * @public\n   */\n  resetFilters() {\n    this.afs.logger.debug(\"Resetting filters\");\n  \n    // Clear existing filters\n    this.activeFilters.clear();\n    \n    // Reset button states\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n  \n    // Add \"*\" filter and activate \"all\" button\n    this.activeFilters.add(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n  \n    // Clear filter groups\n    this.filterGroups.clear();\n  \n    // Force all items to be visible first\n    const visibleItems = new Set(this.afs.items);\n    this.afs.state.setState(\"items.visible\", visibleItems);\n  \n    // Show all items with animation\n    this.afs.items.forEach(item => {\n      item.classList.remove(this.afs.options.get('hiddenClass'));\n      requestAnimationFrame(() => {\n        this.animation.applyShowAnimation(item, this.afs.options.get(\"animationType\"));\n      });\n    });\n  \n    // Update counter after reset\n    this.afs.updateCounter();\n  \n    // Update URL after reset\n    this.afs.urlManager.updateURL();\n\n    // Emit event\n    this.afs.emit(\"filtersReset\");\n  }\n\n  /**\n   * Find \"all\" filter button\n   * @private\n   * @returns {HTMLElement|null} All button\n   */\n  findAllButton() {\n    for (const [button, value] of this.filterButtons.entries()) {\n      if (value === \"*\") return button;\n    }\n\n    return null;\n  }\n\n  handleFilterClick(button) {\n    const filterValue = button.dataset.filter;\n    this.afs.logger.debug(\"Filter clicked:\", filterValue);\n\n    if (filterValue === \"*\") {\n      this.resetFilters();\n    } else {\n      this.toggleFilter(filterValue, button);\n    }\n\n    this.filter();\n\n    // Call updateURL to reflect the new filter state in the URL\n    this.updateURL();\n  }\n\n  /**\n   * Toggle filter state\n   * @private\n   * @param {string} filterValue - Filter value\n   * @param {HTMLElement} button - Filter button\n   */\n  toggleFilter(filterValue, button) {\n    // Remove \"all\" filter\n    this.activeFilters.delete(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.remove(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Toggle filter\n    if (button.classList.contains(this.afs.options.get(\"activeClass\"))) {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.delete(filterValue);\n\n      // Reset to \"all\" if no filters active\n      if (this.activeFilters.size === 0) {\n        this.resetFilters();\n        return;\n      }\n    } else {\n      button.classList.add(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.add(filterValue);\n    }\n\n    this.applyFilters();\n\n    // Emit event\n    this.afs.emit(\"filterToggled\", {\n      filter: filterValue,\n      activeFilters: Array.from(this.activeFilters),\n    });\n\n    this.afs.logger.debug(\"Filter toggled:\", filterValue);\n  }\n\n /**\n * Apply current filters\n * @public\n */\n applyFilters() {\n  // Log active filters\n  const activeFilters = Array.from(this.activeFilters);\n  this.afs.logger.debug(\"Active filters:\", activeFilters);\n  this.afs.logger.debug(\"Applying filters\");\n\n  const previouslyVisible = new Set(this.afs.state.getState().items.visible);\n  const visibleItems = new Set();\n\n  // First pass: determine which items should be visible\n  this.afs.items.forEach(item => {\n    if (this.activeFilters.has(\"*\") || this.itemMatchesFilters(item)) {\n      visibleItems.add(item);\n    }\n  });\n\n  // Update state with determined visible items\n  this.afs.state.setState(\"items.visible\", visibleItems);\n\n  // Second pass: apply animations based on visibility changes\n  this.afs.items.forEach(item => {\n    if (visibleItems.has(item)) {\n      // Remove hidden class first\n      item.classList.remove(this.afs.options.get('hiddenClass'));\n      // Then apply show animation in next frame\n      requestAnimationFrame(() => {\n        this.animation.applyShowAnimation(item, this.afs.options.get(\"animationType\"));\n      });\n    } else {\n      // Apply hide animation\n      requestAnimationFrame(() => {\n        this.animation.applyHideAnimation(item, this.afs.options.get(\"animationType\"));\n      });\n    }\n  });\n\n  // Emit events and update UI\n  this.emitFilterEvents(previouslyVisible, visibleItems);\n\n  // Schedule UI updates\n  requestAnimationFrame(() => {\n    // Force reflow to ensure animations play\n    this.afs.container.offsetHeight;\n\n    // Update counter - this needs to happen after filter changes\n    this.afs.updateCounter();\n    \n    // Update URL\n    this.afs.urlManager.updateURL();\n\n    // Emit final event\n    this.afs.emit(\"filtersApplied\", {\n      activeFilters,\n      visibleItems: visibleItems.size,\n    });\n  });\n}\n\n  /**\n   * Check if item matches current filters\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {boolean} Whether item matches filters\n   */\n  itemMatchesFilters(item) {\n    // Show all items if \"*\" is active\n    if (this.activeFilters.has(\"*\")) {\n      return true;\n    }\n  \n    // Regular filter matching\n    const itemCategories = new Set(item.dataset.categories?.split(\" \") || []);\n  \n    // If using filter groups\n    if (this.filterGroups.size > 0) {\n      return this.itemMatchesFilterGroups(itemCategories);\n    }\n  \n    // Regular filtering\n    return this.afs.options.get(\"filterMode\") === \"OR\"\n      ? this.itemMatchesAnyFilter(itemCategories)\n      : this.itemMatchesAllFilters(itemCategories);\n  }\n\n  /**\n   * Check if item matches any active filter (OR mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches any filter\n   */\n  itemMatchesAnyFilter(itemCategories) {\n    return Array.from(this.activeFilters).some((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches all active filters (AND mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches all filters\n   */\n  itemMatchesAllFilters(itemCategories) {\n    return Array.from(this.activeFilters).every((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches filter groups\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches groups\n   */\n  itemMatchesFilterGroups(itemCategories) {\n    const groupMatches = Array.from(this.filterGroups.values()).map((group) => {\n      if (group.filters.size === 0) return true;\n\n      return group.operator === \"OR\"\n        ? Array.from(group.filters).some((filter) => itemCategories.has(filter))\n        : Array.from(group.filters).every((filter) =>\n            itemCategories.has(filter),\n          );\n    });\n\n    return this.afs.options.get(\"groupMode\") === \"OR\"\n      ? groupMatches.some((matches) => matches)\n      : groupMatches.every((matches) => matches);\n  }\n\n  /**\n   * Emit filter-related events\n   * @private\n   * @param {Set} previouslyVisible - Previously visible items\n   * @param {Set} nowVisible - Currently visible items\n   */\n  emitFilterEvents(previouslyVisible, nowVisible) {\n    // Determine added and removed items\n    const added = new Set(\n      [...nowVisible].filter((item) => !previouslyVisible.has(item)),\n    );\n    const removed = new Set(\n      [...previouslyVisible].filter((item) => !nowVisible.has(item)),\n    );\n\n    // Emit filter event\n    this.afs.emit(\"filter\", {\n      activeFilters: Array.from(this.activeFilters),\n      visibleItems: nowVisible.size,\n      added: added.size,\n      removed: removed.size,\n    });\n\n    // Emit specific events for added/removed items\n    if (added.size > 0) {\n      this.afs.emit(\"itemsShown\", { items: added });\n    }\n    if (removed.size > 0) {\n      this.afs.emit(\"itemsHidden\", { items: removed });\n    }\n  }\n\n  /**\n   * Add or update a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   * @param {string[]} filters - Array of filter values\n   * @param {string} [operator='OR'] - Operator within group\n   */\n  addFilterGroup(groupId, filters, operator = \"OR\") {\n    this.afs.logger.debug(`Adding filter group: ${groupId}`);\n\n    if (!Array.isArray(filters)) {\n      this.afs.logger.error(\"Filters must be an array\");\n      return;\n    }\n\n    const validOperator = operator.toUpperCase();\n    if (![\"AND\", \"OR\"].includes(validOperator)) {\n      this.afs.logger.warn(`Invalid operator: ${operator}, defaulting to OR`);\n      operator = \"OR\";\n    }\n\n    this.filterGroups.set(groupId, {\n      filters: new Set(filters),\n      operator: validOperator,\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   */\n  removeFilterGroup(groupId) {\n    if (this.filterGroups.delete(groupId)) {\n      this.afs.logger.debug(`Removed filter group: ${groupId}`);\n\n      if (this.filterGroups.size === 0) {\n        this.resetFilters();\n      } else {\n        this.applyFilters();\n      }\n    }\n  }\n\n  /**\n   * Set filter group mode\n   * @public\n   * @param {string} mode - Mode for combining groups\n   */\n  setGroupMode(mode) {\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"groupMode\", validMode);\n      this.afs.logger.debug(`Set group mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid group mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Add filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  addFilter(filter) {\n    this.afs.logger.debug(`Adding filter: ${filter}`);\n\n    if (filter === \"*\") {\n      this.resetFilters();\n      return;\n    }\n\n    this.activeFilters.delete(\"*\");\n    this.activeFilters.add(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.add(this.afs.options.get(\"activeClass\"));\n      } else if (value === \"*\") {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Set filter mode\n   * @public\n   * @param {string} mode - Filter mode ('AND' or 'OR')\n   */\n  setFilterMode(mode) {\n    this.afs.logger.debug(`Setting filter mode to: ${mode}`);\n\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"filterMode\", validMode);\n      this.afs.logger.debug(`Set filter mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid filter mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Get active filters\n   * @public\n   * @returns {Set} Active filters\n   */\n  getActiveFilters() {\n    return new Set(this.activeFilters);\n  }\n\n  /**\n   * Get filter groups\n   * @public\n   * @returns {Map} Filter groups\n   */\n  getFilterGroups() {\n    return new Map(this.filterGroups);\n  }\n\n  /**\n   * Add filter button dynamically\n   * @public\n   * @param {HTMLElement} button - Button element\n   * @param {string} filter - Filter value\n   */\n  addFilterButton(button, filter) {\n    if (!filter) {\n      this.afs.logger.warn(\"Filter value required for new filter button\");\n      return;\n    }\n\n    this.filterButtons.set(button, filter);\n    this.bindFilterEvent(button);\n    this.afs.logger.debug(`Added filter button for: ${filter}`);\n  }\n\n  /**\n   * Remove filter button\n   * @public\n   * @param {HTMLElement} button - Button to remove\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Sort items with automatic order detection\n   * @public\n   * @param {string} key - The data attribute key to sort by\n   */\n  sortWithOrder(key) {\n    this.afs.logger.debug(`Sorting by ${key}`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Toggle sort order for the key\n      const currentOrder = this.sortOrders.get(key) || \"asc\";\n      const newOrder = currentOrder === \"asc\" ? \"desc\" : \"asc\";\n      this.sortOrders.set(key, newOrder);\n\n      // Determine sort type from first item\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, newOrder);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Emit event\n      this.afs.emit(\"sort\", { key, order: newOrder });\n\n      this.afs.logger.info(`Sorted items by ${key} in ${newOrder} order`);\n\n      return newOrder; // Return the new order for UI updates\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      // Use the existing reorderItems method to update the DOM\n      this.reorderItems(items);\n\n      // Clear any existing sort orders as we've shuffled\n      this.sortOrders.clear();\n\n      this.afs.emit(\"shuffled\", {\n        itemCount: items.length,\n      });\n\n      this.afs.logger.debug(\"Items shuffled successfully\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from item value\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @returns {string} Sort type ('number', 'date', or 'string')\n   */\n  determineSortType(item, key) {\n    this.afs.logger.debug(`Determining sort type for ${key}`);\n\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Parsed value for sorting\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value) || 0;\n      case \"date\":\n        return new Date(value).getTime() || 0;\n      default:\n        return (value || \"\").toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values for sorting\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} order - Sort order ('asc' or 'desc')\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, order) {\n    // Handle null/undefined values\n    if (a === null || a === undefined) return order === \"asc\" ? 1 : -1;\n    if (b === null || b === undefined) return order === \"asc\" ? -1 : 1;\n\n    // Compare values\n    const comparison = a < b ? -1 : a > b ? 1 : 0;\n    return order === \"asc\" ? comparison : -comparison;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const fragment = document.createDocumentFragment();\n    items.forEach((item) => fragment.appendChild(item));\n    this.afs.container.appendChild(fragment);\n  }\n\n  /**\n   * Get current sort order for key\n   * @public\n   * @param {string} key - Sort key\n   * @returns {string} Current sort order ('asc' or 'desc')\n   */\n  getCurrentSortOrder(key) {\n    return this.sortOrders.get(key) || \"asc\";\n  }\n\n  /**\n   * Clear all sort orders\n   * @public\n   */\n  clearSortOrders() {\n    this.afs.logger.debug(\"Clearing all sort orders\");\n\n    this.sortOrders.clear();\n    this.afs.emit(\"sortCleared\");\n  }\n\n  /**\n   * Clear all filters, url and search\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters and search\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Update filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear checkboxes\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach((checkbox) => {\n      if (checkbox.classList.contains(this.afs.options.get(\"activeClass\"))) {\n        checkbox.checked = false;\n        checkbox.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Clear search\n    if (this.afs.search) {\n      this.afs.search.setValue(\"\");\n    }\n\n    // Clear filter groups and sort orders\n    this.filterGroups.clear();\n    this.sortOrders.clear();\n\n    // Apply changes and ensure counter is updated\n    this.applyFilters();\n    \n    // Update URL if URLManager exists\n    if (this.afs.urlManager) {\n      this.afs.urlManager.updateURL();\n    }\n\n    // Emit event\n    this.afs.emit(\"filtersCleared\");\n\n    this.afs.logger.info(\"All filters cleared\");\n  }\n\n  /**\n   * Refresh the view\n   * @public\n   */\n  refresh() {\n    this.afs.logger.debug(\"Refreshing view\");\n\n    this.applyFilters();\n    this.afs.updateCounter();\n  }\n\n  removeFilterButton(button) {\n    this.filterButtons.delete(button);\n    button.removeEventListener(\"click\", this.handleFilterClick);\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.filterButtons.forEach((_, button) => {\n      this.removeFilterButton(button);\n    });\n    this.filterButtons.clear();\n    this.activeFilters.clear();\n    this.filterGroups.clear();\n    this.afs.logger.debug(\"Filter functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Utility functions for AFS\n */\n\n/**\n * Debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Delay in milliseconds\n * @param {boolean} [immediate=false] - Execute immediately\n * @returns {Function} Debounced function\n */\nexport function debounce(func, wait, immediate = false) {\n    let timeout;\n    return function executedFunction(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  \n  /**\n   * Throttle function\n   * @param {Function} func - Function to throttle\n   * @param {number} limit - Time limit in milliseconds\n   * @returns {Function} Throttled function\n   */\n  export function throttle(func, limit) {\n    let inThrottle;\n    return function executedFunction(...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n  \n  /**\n   * Parse date string according to format\n   * @param {string} dateStr - Date string to parse\n   * @param {string} format - Date format\n   * @returns {Date|null} Parsed date object or null if invalid\n   */\n  export function parseDate(dateStr, format) {\n    const formats = {\n      'YYYY-MM-DD': /^\\d{4}-\\d{2}-\\d{2}$/,\n      'DD-MM-YYYY': /^\\d{2}-\\d{2}-\\d{4}$/,\n      'MM/DD/YYYY': /^\\d{2}\\/\\d{2}\\/\\d{4}$/\n    };\n  \n    try {\n      if (formats[format]?.test(dateStr)) {\n        const parts = dateStr.split(/[-\\/]/);\n        switch (format) {\n          case 'YYYY-MM-DD':\n            return new Date(parts[0], parts[1] - 1, parts[2]);\n          case 'DD-MM-YYYY':\n            return new Date(parts[2], parts[1] - 1, parts[0]);\n          case 'MM/DD/YYYY':\n            return new Date(parts[2], parts[0] - 1, parts[1]);\n        }\n      }\n      return new Date(dateStr);\n    } catch {\n      return null;\n    }\n  }\n  \n  /**\n   * Get element's computed style value\n   * @param {HTMLElement} element - Target element\n   * @param {string} property - CSS property\n   * @returns {string} Computed style value\n   */\n  export function getStyle(element, property) {\n    return window.getComputedStyle(element).getPropertyValue(property);\n  }\n  \n  /**\n   * Check if element matches a selector\n   * @param {HTMLElement} element - Element to check\n   * @param {string} selector - CSS selector\n   * @returns {boolean} Whether element matches selector\n   */\n  export function matches(element, selector) {\n    return (\n      element.matches ||\n      element.matchesSelector ||\n      element.msMatchesSelector ||\n      element.mozMatchesSelector ||\n      element.webkitMatchesSelector ||\n      element.oMatchesSelector\n    ).call(element, selector);\n  }\n  \n  /**\n   * Deep clone an object\n   * @param {Object} obj - Object to clone\n   * @returns {Object} Cloned object\n   */\n  export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj);\n    if (obj instanceof Array) return obj.map(item => deepClone(item));\n    if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item)));\n    if (obj instanceof Map) return new Map([...obj].map(([k, v]) => [deepClone(k), deepClone(v)]));\n    \n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\n    );\n  }\n  \n  /**\n   * Generate unique ID\n   * @param {string} [prefix=''] - ID prefix\n   * @returns {string} Unique ID\n   */\n  export function uniqueId(prefix = '') {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Check if value is plain object\n   * @param {any} value - Value to check\n   * @returns {boolean} Whether value is plain object\n   */\n  export function isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n  }","/**\n * @fileoverview Search functionality for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class Search {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.searchInput = null;\n    this.searchKeys = ['title']; // Default search keys\n    this.minSearchLength = 2;\n    this.highlightClass = 'afs-highlight';\n    this.setupSearch();\n  }\n\n  /**\n   * Setup search functionality\n   * @private\n   */\n  setupSearch() {\n    const searchSelector = this.afs.options.get('searchInputSelector');\n    if (!searchSelector) return;\n\n    this.searchInput = document.querySelector(searchSelector);\n    if (!this.searchInput) {\n      this.afs.logger.warn(`Search input not found: ${searchSelector}`);\n      return;\n    }\n\n    // Configure search\n    this.searchKeys = this.afs.options.get('searchKeys') || this.searchKeys;\n    this.minSearchLength = this.afs.options.get('minSearchLength') || this.minSearchLength;\n\n    // Bind events\n    this.bindSearchEvents();\n    this.afs.logger.debug('Search functionality initialized');\n  }\n\n  /**\n   * Bind search events\n   * @private\n   */\n  bindSearchEvents() {\n    if (!this.searchInput) return;\n\n    // Create debounced search function\n    const debouncedSearch = debounce((e) => {\n      this.search(e.target.value);\n    }, this.afs.options.get('debounceTime') || 300);\n\n    // Bind input event\n    this.searchInput.addEventListener('input', debouncedSearch);\n\n    // Bind clear event\n    this.searchInput.addEventListener('search', (e) => {\n      if (!e.target.value) {\n        this.clearSearch();\n      }\n    });\n\n    // Handle Enter key\n    this.searchInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.search(e.target.value);\n      }\n    });\n  }\n\n  /**\n   * Perform search\n   * @public\n   * @param {string} query - Search query\n   */\n  search(query) {\n    this.afs.logger.debug('Performing search:', query);\n    const normalizedQuery = this.normalizeQuery(query);\n\n    // Update state\n    this.afs.state.setState('search.query', normalizedQuery);\n    let matches = 0;\n\n    // Special case for empty query\n    if (!normalizedQuery) {\n      this.clearSearch();\n      return;\n    }\n\n    // Skip if query is too short\n    if (normalizedQuery.length < this.minSearchLength) {\n      this.afs.logger.debug('Search query too short');\n      return;\n    }\n\n    try {\n      // Create search regex\n      const regex = this.createSearchRegex(normalizedQuery);\n\n      // Search through items\n      this.afs.items.forEach(item => {\n        const searchText = this.getItemSearchText(item);\n        const matchesSearch = regex.test(searchText);\n\n        if (matchesSearch) {\n          this.afs.showItem(item);\n          this.highlightMatches(item, regex);\n          matches++;\n        } else {\n          this.afs.hideItem(item);\n          this.removeHighlights(item);\n        }\n      });\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit('search', {\n        query: normalizedQuery,\n        matches,\n        total: this.afs.items.length\n      });\n\n      this.afs.logger.info(`Search complete. Found ${matches} matches`);\n    } catch (error) {\n      this.afs.logger.error('Search error:', error);\n    }\n\n    // Update counter after animation\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Normalize search query\n   * @private\n   * @param {string} query - Raw search query\n   * @returns {string} Normalized query\n   */\n  normalizeQuery(query) {\n    return query\n      .toLowerCase()\n      .trim()\n      .replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Create search regex\n   * @private\n   * @param {string} query - Normalized search query\n   * @returns {RegExp} Search regex\n   */\n  createSearchRegex(query) {\n    // Escape special regex characters\n    const escapedQuery = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    \n    // Split into words for whole word matching\n    const words = escapedQuery.split(' ').filter(Boolean);\n    \n    // Create regex pattern\n    const pattern = words\n      .map(word => `(?=.*\\\\b${word})`)\n      .join('');\n    \n    return new RegExp(pattern, 'i');\n  }\n\n  /**\n   * Get searchable text from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {string} Searchable text\n   */\n  getItemSearchText(item) {\n    return this.searchKeys\n      .map(key => item.dataset[key] || '')\n      .join(' ')\n      .toLowerCase();\n  }\n\n  /**\n   * Highlight search matches\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {RegExp} regex - Search regex\n   */\n  highlightMatches(item, regex) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const text = target.textContent;\n      const words = this.afs.state.getState().search.query.split(' ');\n\n      let highlightedText = text;\n      words.forEach(word => {\n        if (!word) return;\n        const wordRegex = new RegExp(`(${word})`, 'gi');\n        highlightedText = highlightedText.replace(\n          wordRegex,\n          `<span class=\"${this.highlightClass}\">$1</span>`\n        );\n      });\n\n      target.innerHTML = highlightedText;\n    });\n  }\n\n  /**\n   * Remove highlights\n   * @private\n   * @param {HTMLElement} item - DOM element\n   */\n  removeHighlights(item) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const highlights = target.querySelectorAll(`.${this.highlightClass}`);\n      highlights.forEach(highlight => {\n        const text = highlight.textContent;\n        highlight.replaceWith(text);\n      });\n    });\n  }\n\n  /**\n   * Clear search\n   * @public\n   */\n  clearSearch() {\n    this.afs.logger.debug('Clearing search');\n\n    // Clear input\n    if (this.searchInput) {\n      this.searchInput.value = '';\n    }\n\n    // Clear state\n    this.afs.state.setState('search.query', '');\n\n    // Show all items\n    this.afs.items.forEach(item => {\n      this.afs.showItem(item);\n      this.removeHighlights(item);\n    });\n\n    // Update URL and emit event\n    this.afs.urlManager.updateURL();\n    this.afs.emit('searchCleared');\n\n    // Update counter\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Set search value\n   * @public\n   * @param {string} value - Search value\n   */\n  setValue(value) {\n    if (this.searchInput) {\n      this.searchInput.value = value;\n    }\n    this.search(value);\n  }\n\n  /**\n   * Get current search value\n   * @public\n   * @returns {string} Current search value\n   */\n  getValue() {\n    return this.afs.state.getState().search.query;\n  }\n\n  /**\n   * Update search configuration\n   * @public\n   * @param {Object} config - Search configuration\n   */\n  updateConfig({\n    searchKeys,\n    minSearchLength,\n    highlightClass,\n    debounceTime\n  } = {}) {\n    if (searchKeys) this.searchKeys = searchKeys;\n    if (minSearchLength) this.minSearchLength = minSearchLength;\n    if (highlightClass) this.highlightClass = highlightClass;\n    if (debounceTime) {\n      this.bindSearchEvents(); // Rebind with new debounce time\n    }\n  }\n\n  /**\n   * Destroy search functionality\n   * @public\n   */\n  destroy() {\n    if (this.searchInput) {\n      this.searchInput.removeEventListener('input', this.debouncedSearch);\n      this.searchInput.removeEventListener('search', this.handleClear);\n      this.searchInput.removeEventListener('keypress', this.handleEnter);\n    }\n    this.clearSearch();\n  }\n}","/**\n * @fileoverview Sort functionality for AFS\n */\n\nexport class Sort {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.sortButtons = new Map();\n    this.setupSort();\n  }\n\n  /**\n   * Setup sort functionality\n   * @private\n   */\n  setupSort() {\n    const sortSelector = this.afs.options.get(\"sortButtonSelector\");\n    if (!sortSelector) return;\n\n    // Find and setup sort buttons\n    document.querySelectorAll(sortSelector).forEach((button) => {\n      const key = button.dataset.sortKey;\n      if (!key) {\n        this.afs.logger.warn(\n          \"Sort button missing data-sort-key attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.sortButtons.set(button, {\n        key,\n        direction: button.dataset.sortDirection || \"asc\",\n      });\n\n      this.bindSortEvent(button);\n    });\n\n    this.afs.logger.debug(\"Sort functionality initialized\");\n  }\n\n  /**\n   * Bind sort event to button\n   * @private\n   * @param {HTMLElement} button - Sort button\n   */\n  bindSortEvent(button) {\n    this.afs.logger.debug(\"Binding sort event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const sortData = this.sortButtons.get(button);\n      if (!sortData) return;\n\n      // Toggle direction\n      sortData.direction = sortData.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.sortButtons.set(button, sortData);\n\n      // Update button state\n      this.updateSortButtonState(button, sortData);\n\n      // Perform sort\n      this.sort(sortData.key, sortData.direction);\n    });\n  }\n\n  /**\n   * Update sort button visual state\n   * @private\n   * @param {HTMLElement} button - Sort button\n   * @param {Object} sortData - Sort data\n   */\n  updateSortButtonState(button, sortData) {\n    // Remove active class from all buttons\n    this.sortButtons.forEach((_, btn) => {\n      btn.classList.remove(this.afs.options.get(\"activeSortClass\"));\n    });\n\n    // Add active class to current button\n    button.classList.add(this.afs.options.get(\"activeSortClass\"));\n\n    // Update direction indicator\n    const indicator = button.querySelector(\".sort-direction\");\n    if (indicator) {\n      indicator.textContent = sortData.direction === \"asc\" ? \"↑\" : \"↓\";\n    }\n  }\n\n  /**\n   * Sort items\n   * @public\n   * @param {string} key - Sort key\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   */\n  sort(key, direction = \"asc\") {\n    this.afs.logger.debug(`Sorting by ${key} in ${direction} order`);\n\n    try {\n      // Update state\n      this.afs.state.setState(\"sort.current\", { key, direction });\n\n      // Get all items as array\n      const items = Array.from(this.afs.items);\n\n      // Determine sort type\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, direction);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sort\", { key, direction });\n\n      this.afs.logger.info(`Sorted items by ${key} ${direction}`);\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from first item\n   * @private\n   * @param {HTMLElement} item - First item\n   * @param {string} key - Sort key\n   * @returns {string} Sort type\n   */\n  determineSortType(item, key) {\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Sort value\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value);\n      case \"date\":\n        return new Date(value).getTime();\n      default:\n        return value.toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} direction - Sort direction\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, direction) {\n    const modifier = direction === \"asc\" ? 1 : -1;\n\n    if (a === b) return 0;\n    if (a === undefined || a === null) return 1;\n    if (b === undefined || b === null) return -1;\n\n    return a > b ? modifier : -modifier;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const container = this.afs.options.get(\"container\");\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => fragment.appendChild(item));\n    container.appendChild(fragment);\n  }\n  /**\n   * Sort with multiple criteria\n   * @public\n   * @param {Array<{key: string, direction: string}>} criteria - Sort criteria\n   */\n  sortMultiple(criteria) {\n    this.afs.logger.debug(\"Sorting by multiple criteria:\", criteria);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      items.sort((a, b) => {\n        for (const { key, direction } of criteria) {\n          const type = this.determineSortType(items[0], key);\n          const valueA = this.getSortValue(a, key, type);\n          const valueB = this.getSortValue(b, key, type);\n\n          const comparison = this.compareValues(valueA, valueB, direction);\n          if (comparison !== 0) return comparison;\n        }\n        return 0;\n      });\n\n      this.reorderItems(items);\n\n      // Update state with primary sort\n      if (criteria.length > 0) {\n        this.afs.state.setState(\"sort.current\", criteria[0]);\n      }\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"multiSort\", { criteria });\n    } catch (error) {\n      this.afs.logger.error(\"Multiple sort error:\", error);\n    }\n  }\n\n  /**\n   * Sort with custom comparator\n   * @public\n   * @param {string} key - Sort key\n   * @param {Function} comparator - Custom comparison function\n   */\n  sortWithComparator(key, comparator) {\n    this.afs.logger.debug(`Sorting by ${key} with custom comparator`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      items.sort((a, b) => {\n        const valueA = a.dataset[key];\n        const valueB = b.dataset[key];\n        return comparator(valueA, valueB);\n      });\n\n      this.reorderItems(items);\n      this.afs.emit(\"customSort\", { key, comparator });\n    } catch (error) {\n      this.afs.logger.error(\"Custom sort error:\", error);\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      this.reorderItems(items);\n\n      // Clear current sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Update UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"shuffle\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Reset sort to default state\n   * @public\n   */\n  reset() {\n    this.afs.logger.debug(\"Resetting sort\");\n\n    // Clear sort state\n    this.afs.state.setState(\"sort.current\", null);\n\n    // Reset UI\n    this.sortButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n      const indicator = button.querySelector(\".sort-direction\");\n      if (indicator) indicator.textContent = \"\";\n    });\n\n    // Reset sort data\n    this.sortButtons.forEach((data, button) => {\n      data.direction = \"asc\";\n      this.sortButtons.set(button, data);\n    });\n\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"sortReset\");\n  }\n\n  /**\n   * Get current sort state\n   * @public\n   * @returns {Object|null} Current sort state\n   */\n  getCurrentSort() {\n    return this.afs.state.getState().sort.current;\n  }\n\n  /**\n   * Add sort button dynamically\n   * @public\n   * @param {HTMLElement} button - Sort button element\n   * @param {string} key - Sort key\n   * @param {string} [direction='asc'] - Initial sort direction\n   */\n  addSortButton(button, key, direction = \"asc\") {\n    if (!key) {\n      this.afs.logger.warn(\"Sort key required for new sort button\");\n      return;\n    }\n\n    this.sortButtons.set(button, { key, direction });\n    this.bindSortEvent(button);\n    this.afs.logger.debug(`Added sort button for ${key}`);\n  }\n\n  /**\n   * Remove sort button\n   * @public\n   * @param {HTMLElement} button - Sort button to remove\n   */\n  removeSortButton(button) {\n    if (this.sortButtons.has(button)) {\n      button.removeEventListener(\"click\", this.bindSortEvent);\n      this.sortButtons.delete(button);\n      this.afs.logger.debug(\"Removed sort button\");\n    }\n  }\n\n  /**\n   * Destroy sort functionality\n   * @public\n   */\n  destroy() {\n    this.sortButtons.forEach((_, button) => {\n      this.removeSortButton(button);\n    });\n    this.sortButtons.clear();\n    this.afs.logger.debug(\"Sort functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Pagination functionality for AFS\n */\nimport { Animation } from \"../styles/Animation.js\";\n\nexport class Pagination {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.container = null;\n    this.animation = new Animation(afs);\n    this.options = this.afs.options.get(\"pagination\");\n    this.setupPagination();\n  }\n\n  /**\n   * Setup pagination\n   * @private\n   */\n  setupPagination() {\n    this.afs.logger.debug(\"Setting up pagination\");\n    if (!this.afs.options.get('pagination.enabled')) return;\n    console.log('Pagination enabled');\n\n    this.container = document.createElement(\"div\");\n    this.container.className = this.options.containerClass;\n\n    const itemsContainer = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!itemsContainer) {\n      this.afs.logger.error(\"Items container not found.\");\n      return;\n    }\n    itemsContainer.appendChild(this.container);\n\n    // Initialize pagination state with defaults\n    this.afs.state.setState(\"pagination\", {\n      currentPage: 1,\n      itemsPerPage: this.options.itemsPerPage,\n      totalPages: 0,\n    });\n\n    this.bindEvents();\n    this.update();\n    this.afs.logger.debug(\"Pagination initialized\");\n  }\n\n  /**\n   * Bind pagination events\n   * @private\n   */\n  bindEvents() {\n    this.afs.on(\"filter\", () => this.update());\n    this.afs.on(\"search\", () => this.update());\n    this.afs.on(\"sort\", () => this.update());\n\n    this.container.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button\");\n      if (!button) return;\n\n      const page = button.dataset.page;\n      if (page) {\n        this.goToPage(parseInt(page, 10));\n      }\n    });\n  }\n\n  /**\n   * Update pagination\n   * @public\n   */\n  update() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    const itemsPerPage = this.afs.state.getState().pagination.itemsPerPage;\n    const totalPages = Math.max(\n      1,\n      Math.ceil(visibleItems.length / itemsPerPage),\n    );\n\n    // Update state\n    const currentState = this.afs.state.getState().pagination;\n    let currentPage = currentState.currentPage;\n\n    // Adjust current page if it's beyond the total pages\n    if (currentPage > totalPages) {\n      currentPage = totalPages;\n    }\n\n    // Update pagination state\n    this.afs.state.setState(\"pagination\", {\n      ...currentState,\n      currentPage,\n      totalPages,\n    });\n\n    // Update visibility before rendering pagination controls\n    this.updateVisibility(visibleItems);\n    this.renderPagination();\n    this.afs.urlManager.updateURL();\n\n    this.afs.emit(\"pagination\", {\n      currentPage,\n      totalPages,\n      itemsPerPage,\n      visibleItems: visibleItems.length,\n    });\n  }\n\n  /**\n   * Update items visibility based on current page\n   * @private\n   */\n  updateVisibility(visibleItems) {\n    const { currentPage, itemsPerPage } = this.afs.state.getState().pagination;\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n\n    // First hide all items\n    this.afs.items.forEach((item) => {\n      item.style.display = \"none\";\n      item.classList.add(this.afs.options.get(\"hiddenClass\"));\n    });\n\n    // Then show only the items for the current page\n    const itemsToShow = visibleItems.slice(startIndex, endIndex);\n\n    // Ensure we're not trying to display non-existent items\n    if (itemsToShow.length === 0 && visibleItems.length > 0) {\n      // If we have no items to show but we do have visible items,\n      // we're probably on an invalid page - go to page 1\n      this.goToPage(1);\n      return;\n    }\n\n    // Show items with animation\n    requestAnimationFrame(() => {\n      itemsToShow.forEach((item) => {\n        // Remove hidden class and restore display\n        item.style.display = \"\";\n        item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n        // Apply show animation in the next frame\n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(\n            item,\n            this.options.animationType || \"fade\",\n          );\n        });\n      });\n    });\n  }\n\n  /**\n   * Render pagination controls\n   * @private\n   */\n  renderPagination() {\n    const { currentPage, totalPages } = this.afs.state.getState().pagination;\n\n    this.container.innerHTML = \"\";\n\n    if (totalPages <= 1) {\n      this.container.style.display = \"none\";\n      return;\n    }\n\n    this.container.style.display = \"flex\";\n    const controls = this.createPaginationControls(currentPage, totalPages);\n    this.container.appendChild(controls);\n  }\n\n  /**\n   * Create pagination controls\n   * @private\n   * @param {number} currentPage - Current page\n   * @param {number} totalPages - Total pages\n   * @returns {DocumentFragment} Pagination controls\n   */\n  createPaginationControls(currentPage, totalPages) {\n    const fragment = document.createDocumentFragment();\n\n    if (this.options.showPrevNext) {\n      const prevButton = this.createPageButton(\"‹\", currentPage - 1, {\n        disabled: currentPage === 1,\n        class: \"afs-pagination-prev\",\n      });\n      fragment.appendChild(prevButton);\n    }\n\n    fragment.appendChild(\n      this.createPageButton(\"1\", 1, { active: currentPage === 1 }),\n    );\n\n    const range = this.calculatePageRange(currentPage, totalPages);\n\n    if (range.start > 2) fragment.appendChild(this.createEllipsis());\n\n    for (let i = range.start; i <= range.end; i++) {\n      if (i === 1 || i === totalPages) continue;\n      fragment.appendChild(\n        this.createPageButton(i.toString(), i, { active: currentPage === i }),\n      );\n    }\n\n    if (range.end < totalPages - 1) fragment.appendChild(this.createEllipsis());\n\n    if (totalPages > 1)\n      fragment.appendChild(\n        this.createPageButton(totalPages.toString(), totalPages, {\n          active: currentPage === totalPages,\n        }),\n      );\n\n    if (this.options.showPrevNext) {\n      const nextButton = this.createPageButton(\"›\", currentPage + 1, {\n        disabled: currentPage === totalPages,\n        class: \"afs-pagination-next\",\n      });\n      fragment.appendChild(nextButton);\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Create page button\n   * @private\n   */\n  createPageButton(\n    text,\n    page,\n    { active = false, disabled = false, class: className = \"\" } = {},\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = text;\n    button.dataset.page = page;\n    button.classList.add(this.options.pageButtonClass || \"afs-page-button\");\n\n    if (className) button.classList.add(className);\n    if (active)\n      button.classList.add(this.options.activePageClass || \"afs-page-active\");\n    if (disabled) button.disabled = true;\n\n    return button;\n  }\n\n  createEllipsis() {\n    const span = document.createElement(\"span\");\n    span.textContent = \"...\";\n    span.classList.add(\"afs-pagination-ellipsis\");\n    return span;\n  }\n\n  calculatePageRange(currentPage, totalPages) {\n    const maxButtons = this.options.maxButtons || 7;\n    const sideButtons = Math.floor((maxButtons - 3) / 2);\n\n    let start = Math.max(2, currentPage - sideButtons);\n    let end = Math.min(totalPages - 1, start + maxButtons - 3);\n\n    if (end - start < maxButtons - 3)\n      start = Math.max(2, end - (maxButtons - 3));\n\n    return { start, end };\n  }\n\n  /**\n   * Go to specific page\n   * @public\n   */\n  goToPage(page) {\n    const state = this.afs.state.getState().pagination;\n    const targetPage = Math.max(1, Math.min(page, state.totalPages));\n\n    if (targetPage === state.currentPage) return;\n\n    // Update state\n    this.afs.state.setState(\"pagination.currentPage\", targetPage);\n\n    // Force a reflow before updating\n    this.afs.container.offsetHeight;\n\n    // Update visibility and controls\n    this.update();\n\n    // Scroll to top if enabled\n    if (this.options.scrollToTop) {\n      setTimeout(() => this.scrollToTop(), 100);\n    }\n\n    // Emit page change event\n    this.afs.emit(\"pageChanged\", {\n      previousPage: state.currentPage,\n      currentPage: targetPage,\n      totalPages: state.totalPages,\n    });\n  }\n\n  scrollToTop() {\n    const container = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!container) {\n      this.afs.logger.warn(\"Scroll container not found.\");\n      return;\n    }\n\n    window.scrollTo({\n      top: container.offsetTop - this.options.scrollOffset,\n      behavior: \"smooth\",\n    });\n  }\n\n  /**\n   * Set pagination mode\n   * @public\n   */\n  setPaginationMode(enabled) {\n    this.afs.logger.debug(`Setting pagination mode to: ${enabled}`);\n    \n    // Update options\n    this.afs.options.set('pagination.enabled', enabled);\n    \n    if (enabled) {\n      // Enable pagination\n      this.setupPagination();\n    } else {\n      // Disable pagination and show all items\n      this.container.remove();\n      this.showAllItems();\n    }\n\n    // Emit event\n    this.afs.emit('paginationModeChanged', { enabled });\n  }\n\n  /**\n   * Show all items (for infinite scroll mode)\n   * @private\n   */\n  showAllItems() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    \n    requestAnimationFrame(() => {\n      visibleItems.forEach(item => {\n        item.style.display = '';\n        item.classList.remove(this.afs.options.get('hiddenClass'));\n        \n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(item, this.options.animationType || 'fade');\n        });\n      });\n    });\n  }\n}\n","/**\n * @fileoverview URL state management for AFS\n */\n\nexport class URLManager {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.defaultParams = new URLSearchParams();\n    this.setupPopStateHandler();\n    \n    // Load URL state after a small delay to ensure all features are ready\n    setTimeout(() => {\n      this.loadFromURL();\n    }, 0);\n  }\n\n  /**\n   * Setup history popstate handler\n   * @private\n   */\n  setupPopStateHandler() {\n    window.addEventListener('popstate', () => {\n      this.loadFromURL();\n    });\n  }\n\n  /**\n   * Update URL with current filter state\n   * @public\n   */\n  /**\n * Update URL with current filter state\n * @public\n */\nupdateURL() {\n  this.afs.logger.debug(\"Updating URL state\");\n  const params = new URLSearchParams();\n  const state = this.afs.state.getState();  // Get current state of filters\n\n  // Get active filters directly from the Filter instance\n  const activeFilters = this.afs.filter.getActiveFilters();\n\n  // Update the state object with the active filters\n  state.filters.current = activeFilters;\n\n  // Add filters to URL\n  this.addFiltersToURL(params, state);\n  \n  // Add ranges (if applicable) to URL\n  this.addRangesToURL(params, state);\n  \n  // Add search query to URL\n  this.addSearchToURL(params, state);\n  \n  // Add sort state to URL\n  this.addSortToURL(params, state);\n  \n  // Add pagination to URL\n  this.addPaginationToURL(params, state);\n  \n  // Push the updated URL\n  this.pushState(params);  // Push the new URL state to the browser\n}\n\n  /**\n   * Add filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addFiltersToURL(params, state) {\n    const filters = state.filters;\n\n    // Skip if only default filter is active\n    if (filters.current.size === 0 || \n        (filters.current.size === 1 && filters.current.has('*'))) {\n      return;\n    }\n\n    // Group filters by type\n    const filtersByType = {};\n    for (const filter of filters.current) {\n      if (filter !== '*') {\n        const [type, value] = filter.split(':');\n        if (!filtersByType[type]) {\n          filtersByType[type] = new Set();\n        }\n        filtersByType[type].add(value);\n      }\n    }\n\n    // Add filters to params\n    Object.entries(filtersByType).forEach(([type, values]) => {\n      params.set(type, Array.from(values).join(','));\n    });\n\n    // Add filter mode if not default\n    if (filters.mode !== 'OR') {\n      params.set('filterMode', filters.mode.toLowerCase());\n    }\n\n    // Add group mode if groups exist and mode isn't default\n    if (filters.groups.size > 0 && filters.groupMode !== 'OR') {\n      params.set('groupMode', filters.groupMode.toLowerCase());\n    }\n\n    // Add filter groups if they exist\n    filters.groups.forEach((group, groupId) => {\n      params.set(`group_${groupId}`, Array.from(group.filters).join(','));\n      if (group.operator !== 'OR') {\n        params.set(`groupOp_${groupId}`, group.operator.toLowerCase());\n      }\n    });\n  }\n\n  /**\n   * Add range filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addRangesToURL(params, state) {\n    // Handle numeric ranges\n    state.filters.ranges.forEach((range, key) => {\n      const { currentMin, currentMax } = range;\n      if (currentMin !== range.min || currentMax !== range.max) {\n        params.set(`range_${key}`, `${currentMin},${currentMax}`);\n      }\n    });\n\n    // Handle date ranges\n    state.filters.dateRanges.forEach((range, key) => {\n      const { start, end } = range;\n      params.set(`dateRange_${key}`, `${start.toISOString()},${end.toISOString()}`);\n    });\n  }\n\n  /**\n   * Add search parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSearchToURL(params, state) {\n    if (state.search.query) {\n      params.set('search', state.search.query);\n    }\n  }\n\n  /**\n   * Add sort parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSortToURL(params, state) {\n    if (state.sort.current) {\n      const { key, direction } = state.sort.current;\n      params.set('sort', `${key},${direction}`);\n    }\n  }\n\n  /**\n   * Add pagination parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addPaginationToURL(params, state) {\n    const { currentPage, itemsPerPage } = state.pagination;\n\n    if (!this.afs.options.get('pagination.enabled')) {\n      return;\n    }\n\n    if (currentPage > 1) {\n      params.set('page', currentPage.toString());\n    }\n    if (itemsPerPage !== this.afs.options.get('pagination.itemsPerPage')) {\n      params.set('perPage', itemsPerPage.toString());\n    }\n  }\n\n  /**\n   * Update browser URL\n   * @private\n   * @param {URLSearchParams} params\n   */\n  pushState(params) {\n    const queryString = params.toString();\n    const newURL = `${window.location.pathname}${queryString ? '?' + queryString : ''}`;\n    \n    // Only update if URL actually changed\n    if (newURL !== window.location.href) {\n      window.history.pushState({}, '', newURL);\n      this.afs.logger.debug('URL updated:', newURL);\n    }\n  }\n\n  /**\n * Load filter state from URL\n * @public\n */\nloadFromURL() {\n  this.afs.logger.debug('Loading state from URL');\n  const params = new URLSearchParams(window.location.search);\n\n  try {\n    // Clear existing state first\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n\n    // Process filter mode first\n    const filterMode = params.get('filterMode');\n    if (filterMode && this.afs.filter) {\n      this.afs.filter.setFilterMode(filterMode.toUpperCase());\n    }\n\n    // Process regular filters\n    const filterParams = Array.from(params.entries()).filter(([key]) => this.isRegularFilter(key));\n    if (filterParams.length > 0 && this.afs.filter) {\n      // Remove default '*' filter\n      this.afs.filter.activeFilters.clear();\n      \n      // Add filters and update button states\n      filterParams.forEach(([type, values]) => {\n        values.split(',').forEach(value => {\n          const filter = `${type}:${value}`;\n          this.afs.filter.activeFilters.add(filter);\n          \n          // Update button UI\n          this.afs.filter.filterButtons.forEach((buttonFilter, button) => {\n            if (buttonFilter === filter) {\n              button.classList.add(this.afs.options.get('activeClass'));\n            } else if (buttonFilter === '*') {\n              button.classList.remove(this.afs.options.get('activeClass'));\n            }\n          });\n        });\n      });\n    }\n\n    // Apply filters before processing other parameters\n    if (this.afs.filter) {\n      this.afs.filter.applyFilters();\n    }\n\n    // Process search\n    const searchQuery = params.get('search');\n    if (searchQuery && this.afs.search) {\n      this.afs.search.setValue(searchQuery);\n    }\n\n    // Process sort\n    const sortParam = params.get('sort');\n    if (sortParam && this.afs.sort) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.sort.sort(key, direction);\n    }\n\n    // Process pagination\n    const page = parseInt(params.get('page'));\n    if (!isNaN(page) && this.afs.pagination) {\n      this.afs.pagination.goToPage(page);\n    }\n\n    this.afs.emit('urlStateLoaded', { params: Object.fromEntries(params) });\n    this.afs.logger.info('State loaded from URL');\n  } catch (error) {\n    this.afs.logger.error('Error loading state from URL:', error);\n    // Reset to default state on error\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n}\n  \n  /**\n   * Process filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processFiltersFromURL(params) {\n    const state = this.afs.state.getState();\n    let hasFilters = false;\n\n    // Process filter mode\n    const filterMode = params.get('filterMode');\n    if (filterMode) {\n      state.filters.mode = filterMode.toUpperCase();\n    }\n\n    // Process group mode\n    const groupMode = params.get('groupMode');\n    if (groupMode) {\n      state.filters.groupMode = groupMode.toUpperCase();\n    }\n\n    // Process regular filters\n    for (const [type, values] of params.entries()) {\n      if (this.isRegularFilter(type)) {\n        values.split(',').filter(Boolean).forEach(value => {\n          hasFilters = true;\n          state.filters.current.add(`${type}:${value}`);\n        });\n      }\n    }\n\n    // Process filter groups\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('group_')) {\n        const groupId = key.replace('group_', '');\n        const operator = params.get(`groupOp_${groupId}`)?.toUpperCase() || 'OR';\n        state.filters.groups.set(groupId, {\n          filters: new Set(value.split(',')),\n          operator\n        });\n      }\n    }\n\n    // Set default if no filters\n    if (!hasFilters && state.filters.groups.size === 0) {\n      state.filters.current.add('*');\n    }\n  }\n\n  /**\n   * Process range filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processRangesFromURL(params) {\n    const state = this.afs.state.getState();\n\n    // Process numeric ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('range_')) {\n        const rangeKey = key.replace('range_', '');\n        const [min, max] = value.split(',').map(Number);\n        state.filters.ranges.set(rangeKey, { currentMin: min, currentMax: max });\n      }\n    }\n\n    // Process date ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('dateRange_')) {\n        const rangeKey = key.replace('dateRange_', '');\n        const [start, end] = value.split(',').map(str => new Date(str));\n        state.filters.dateRanges.set(rangeKey, { start, end });\n      }\n    }\n  }\n\n  /**\n   * Process search from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSearchFromURL(params) {\n    const searchQuery = params.get('search') || '';\n    this.afs.state.setState('search.query', searchQuery);\n    \n    if (this.afs.options.get('searchInput')) {\n      this.afs.options.get('searchInput').value = searchQuery;\n    }\n  }\n\n  /**\n   * Process sort from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSortFromURL(params) {\n    const sortParam = params.get('sort');\n    if (sortParam) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.state.setState('sort.current', { key, direction });\n    }\n  }\n\n  /**\n   * Process pagination from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processPaginationFromURL(params) {\n    const page = parseInt(params.get('page')) || 1;\n    const perPage = parseInt(params.get('perPage')) || \n                   this.afs.options.get('pagination.itemsPerPage');\n\n    this.afs.state.setState('pagination', {\n      currentPage: page,\n      itemsPerPage: perPage\n    });\n  }\n\n  /**\n   * Check if parameter is a regular filter\n   * @private\n   * @param {string} param - Parameter name\n   * @returns {boolean}\n   */\n  isRegularFilter(param) {\n    const excludedParams = [\n      'search', 'sort', 'page', 'perPage', 'filterMode', 'groupMode'\n    ];\n    return !excludedParams.includes(param) && \n           !param.startsWith('group_') && \n           !param.startsWith('groupOp_') && \n           !param.startsWith('range_') && \n           !param.startsWith('dateRange_');\n  }\n\n  /**\n   * Clear URL parameters\n   * @public\n   */\n  clearURL() {\n    window.history.pushState({}, '', window.location.pathname);\n    this.afs.state.reset();\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n\n  /**\n   * Get current URL parameters\n   * @public\n   * @returns {URLSearchParams}\n   */\n  getURLParams() {\n    return new URLSearchParams(window.location.search);\n  }\n\n  /**\n   * Check if URL has parameters\n   * @public\n   * @returns {boolean}\n   */\n  hasParams() {\n    return window.location.search.length > 1;\n  }\n\n  /**\n   * Get parameter value\n   * @public\n   * @param {string} param - Parameter name\n   * @returns {string|null}\n   */\n  getParam(param) {\n    return new URLSearchParams(window.location.search).get(param);\n  }\n}","/**\n * @fileoverview Range filter implementation for AFS\n */\n\nimport { debounce } from \"../utils\";\nimport { StyleManager } from \"../styles/StyleManager\";\n\nexport class RangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n    this.options = this.afs.options.get(\"slider\");\n    if (!this.afs.styleManager) {\n      this.afs.styleManager = new StyleManager(this.afs.options);\n    }\n\n    // Apply styles immediately\n    this.afs.styleManager.applyStyles();\n  }\n\n  /**\n   * @typedef {Object} RangeOptions\n   * @property {string} key - Data attribute key\n   * @property {string} type - Type of range ('number' or 'date')\n   * @property {HTMLElement} container - Container element\n   * @property {number|string} [min] - Minimum value\n   * @property {number|string} [max] - Maximum value\n   * @property {number} [step] - Step value\n   */\n\n  /**\n   * Add range slider\n   * @param {RangeOptions} options - Range slider options\n   */\n  addRangeSlider({ key, type, container, min, max, step = 1, ui }) {\n    this.afs.logger.debug(`Adding range slider for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error(\"Container element required for range slider\");\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key, type);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Get global UI options and merge with slider-specific options\n    const globalUiOptions = this.afs.options.get(\"styles.slider.ui\") || {\n      showHistogram: false,\n      bins: 10,\n    };\n    const sliderUiOptions = {\n      ...globalUiOptions,\n      ...ui, // Override with slider-specific options if provided\n    };\n\n    // Only calculate histogram data if enabled\n    const histogramData = sliderUiOptions.showHistogram\n      ? this.calculateHistogramData(key, sliderUiOptions.bins)\n      : { counts: [], binEdges: [], max: 0 };\n\n    // Create slider elements\n    const elements = this.createSliderElements(histogramData, sliderUiOptions);\n    const state = this.initializeState(min, max, step, type);\n\n    // Store histogram data and UI options in state\n    state.ui = sliderUiOptions;\n    if (sliderUiOptions.showHistogram) {\n      state.histogram = histogramData;\n    }\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateSliderUI(key);\n\n    // Setup histogram highlight updates only if enabled\n    if (sliderUiOptions.showHistogram) {\n      this.setupHistogramHighlight(elements, state, histogramData.binEdges);\n    }\n\n    this.afs.logger.info(`Range slider added for ${key}`);\n  }\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key, type) {\n    const values = Array.from(this.afs.items)\n      .map((item) => {\n        const value = item.dataset[key];\n        return type === \"date\" ? new Date(value).getTime() : parseFloat(value);\n      })\n      .filter((value) => !isNaN(value));\n\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n    };\n  }\n\n  /**\n   * Create slider DOM elements\n   * @private\n   * @param {Object} histogramData - Histogram data\n   * @param {Object} sliderUiOptions - UI options for this slider\n   */\n  createSliderElements(histogramData, sliderUiOptions) {\n    const styles =\n      this.afs.options.get(\"styles\") || this.afs.styleManager.defaultStyles;\n    const colors = styles.colors || this.afs.styleManager.defaultStyles.colors;\n    const sliderOptions = this.afs.options.get(\"slider\") || {};\n\n    const container = document.createElement(\"div\");\n    container.className = \"afs-range-container\";\n\n    const slider = document.createElement(\"div\");\n    slider.className = sliderOptions.containerClass;\n\n    const track = document.createElement(\"div\");\n    track.className = sliderOptions.trackClass;\n\n    // Only add histogram if enabled in the slider-specific options\n    if (sliderUiOptions?.showHistogram && histogramData?.counts?.length > 0) {\n      const histogram = this.createHistogramBars(histogramData, colors);\n      slider.appendChild(histogram);\n    }\n\n    const selectedRange = document.createElement(\"div\");\n    selectedRange.className = sliderOptions.selectedClass;\n\n    const minThumb = document.createElement(\"div\");\n    minThumb.className = sliderOptions.thumbClass;\n\n    const maxThumb = document.createElement(\"div\");\n    maxThumb.className = sliderOptions.thumbClass;\n\n    const minValue = document.createElement(\"div\");\n    minValue.className = sliderOptions.valueClass;\n\n    const maxValue = document.createElement(\"div\");\n    maxValue.className = sliderOptions.valueClass;\n\n    // Build the slider\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n\n    container.appendChild(slider);\n\n    return {\n      container,\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    };\n  }\n\n  // Add helper method for creating histogram\n  createHistogram(data, colors) {\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    // Create histogram bars\n    data.forEach((value, index) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${value}%`;\n      bar.style.backgroundColor = colors.histogram;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Calculate histogram data from items\n   * @private\n   * @param {string} key - Data attribute key (e.g., 'price')\n   * @param {number} [bins=10] - Number of bins for histogram\n   * @returns {Object} Histogram data and metadata\n   */\n  calculateHistogramData(key, bins = 10) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map((item) => parseFloat(item.dataset[key]))\n        .filter((value) => !isNaN(value));\n\n      if (values.length === 0) {\n        return { counts: [], binEdges: [], max: 0 };\n      }\n\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const binWidth = (max - min) / bins;\n\n      const counts = new Array(bins).fill(0);\n      const binEdges = new Array(bins + 1);\n\n      // Calculate bin edges\n      for (let i = 0; i <= bins; i++) {\n        binEdges[i] = min + i * binWidth;\n      }\n\n      // Count values in each bin\n      values.forEach((value) => {\n        if (value === max) {\n          counts[counts.length - 1]++;\n          return;\n        }\n\n        const binIndex = Math.floor((value - min) / binWidth);\n        counts[binIndex]++;\n      });\n\n      // Normalize heights to be more subtle\n      const maxCount = Math.max(...counts);\n      const normalizedCounts = counts.map(\n        (count) => Math.max(20, Math.round((count / maxCount) * 100)), // Minimum height of 20%\n      );\n\n      return {\n        counts: normalizedCounts,\n        binEdges,\n        max: maxCount,\n        min,\n        max,\n      };\n    } catch (error) {\n      this.afs.logger.error(\"Error calculating histogram:\", error);\n      return { counts: [], binEdges: [], max: 0 };\n    }\n  }\n\n  /**\n   * Setup histogram highlight on range changes\n   * @private\n   */\n  setupHistogramHighlight(elements, state, binEdges) {\n    const bars = elements.slider.querySelectorAll(\".afs-histogram-bar\");\n\n    const updateHistogram = () => {\n      const minVal = state.currentMin;\n      const maxVal = state.currentMax;\n\n      bars.forEach((bar, index) => {\n        const binStart = binEdges[index];\n        const binEnd = binEdges[index + 1];\n\n        // Highlight bars within the selected range\n        if (binStart >= minVal && binEnd <= maxVal) {\n          bar.classList.add(\"active\");\n        } else {\n          bar.classList.remove(\"active\");\n        }\n      });\n    };\n\n    // Update histogram on range changes using AFS instance\n    this.afs.on(\"rangeFilter\", () => updateHistogram());\n\n    // Initial update\n    updateHistogram();\n  }\n\n  /**\n   * Create histogram bars\n   * @private\n   */\n  createHistogramBars(histogramData, colors) {\n    const { counts } = histogramData;\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    counts.forEach((height) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${height}%`;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Initialize slider state\n   * @private\n   */\n  initializeState(min, max, step, type) {\n    return {\n      min,\n      max,\n      currentMin: min,\n      currentMax: max,\n      step,\n      type,\n      isDragging: false,\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    const {\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    } = elements;\n\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n    container.appendChild(slider);\n  }\n\n  /**\n   * Setup event handlers for slider\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minThumb, maxThumb } = elements;\n\n    const handleStart = (isMin) => (e) => {\n      e.preventDefault(); // Prevent scrolling while dragging on mobile\n      state.isDragging = true;\n      \n      // Get the correct event coordinates whether mouse or touch\n      const getEventXY = (event) => {\n        return event.touches ? event.touches[0] : event;\n      };\n\n      const moveHandler = (moveEvent) => {\n        const evt = getEventXY(moveEvent);\n        this.createMoveHandler(elements, state, key, isMin)(evt);\n      };\n\n      const stopHandler = () => {\n        state.isDragging = false;\n        \n        // Remove both mouse and touch event listeners\n        window.removeEventListener('mousemove', moveHandler);\n        window.removeEventListener('mouseup', stopHandler);\n        window.removeEventListener('touchmove', moveHandler);\n        window.removeEventListener('touchend', stopHandler);\n        window.removeEventListener('touchcancel', stopHandler);\n        \n        this.applyFilter(key);\n      };\n\n      // Add both mouse and touch event listeners\n      window.addEventListener('mousemove', moveHandler);\n      window.addEventListener('mouseup', stopHandler);\n      window.addEventListener('touchmove', moveHandler, { passive: false });\n      window.addEventListener('touchend', stopHandler);\n      window.addEventListener('touchcancel', stopHandler);\n    };\n\n    // Add both mouse and touch event listeners to thumbs\n    minThumb.addEventListener('mousedown', handleStart(true));\n    minThumb.addEventListener('touchstart', handleStart(true), { passive: false });\n    maxThumb.addEventListener('mousedown', handleStart(false));\n    maxThumb.addEventListener('touchstart', handleStart(false), { passive: false });\n  }\n\n  /**\n   * Update slider UI\n   * @private\n   */\n  updateSliderUI(key) {\n    const { state, elements } = this.activeRanges.get(key);\n    const { minThumb, maxThumb, selectedRange, minValue, maxValue } = elements;\n\n    // Calculate positions with padding consideration\n    const range = state.max - state.min;\n    const minPos = ((state.currentMin - state.min) / range) * 100;\n    const maxPos = ((state.currentMax - state.min) / range) * 100;\n\n    // Ensure thumbs stay within bounds\n    const clampedMinPos = Math.max(0, Math.min(minPos, 100));\n    const clampedMaxPos = Math.max(0, Math.min(maxPos, 100));\n\n    // Position thumbs\n    minThumb.style.left = `${clampedMinPos}%`;\n    maxThumb.style.left = `${clampedMaxPos}%`;\n\n    // Position selected range\n    selectedRange.style.left = `${clampedMinPos}%`;\n    selectedRange.style.width = `${clampedMaxPos - clampedMinPos}%`;\n\n    // Format values\n    const formatValue =\n      state.type === \"date\"\n        ? (value) => new Date(value).toLocaleDateString()\n        : (value) => value.toFixed(2);\n\n    // Update value labels\n    minValue.textContent = formatValue(state.currentMin);\n    maxValue.textContent = formatValue(state.currentMax);\n\n    // Position value labels considering bounds\n    minValue.style.left = `${clampedMinPos}%`;\n    maxValue.style.left = `${clampedMaxPos}%`;\n\n    // Handle edge cases for value label positioning\n    if (clampedMinPos < 5) {\n      minValue.style.transform = \"translateX(0)\";\n    } else if (clampedMinPos > 95) {\n      minValue.style.transform = \"translateX(-100%)\";\n    } else {\n      minValue.style.transform = \"translateX(-50%)\";\n    }\n\n    if (clampedMaxPos < 5) {\n      maxValue.style.transform = \"translateX(0)\";\n    } else if (clampedMaxPos > 95) {\n      maxValue.style.transform = \"translateX(-100%)\";\n    } else {\n      maxValue.style.transform = \"translateX(-50%)\";\n    }\n  }\n\n  // Also update the createMoveHandler to respect the padding\n  createMoveHandler(elements, state, key, isMin) {\n    this.afs.logger.debug(`Creating move handler for ${key}`);\n\n    const { track } = elements;\n    const PADDING = 5;\n\n    return debounce((e) => {\n      const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n      const rect = track.getBoundingClientRect();\n      const totalWidth = rect.width;\n      const paddingPixels = (PADDING / 100) * totalWidth;\n\n      // Calculate percent with padding consideration\n      const rawPercent =\n        (clientX - rect.left - paddingPixels) /\n        (totalWidth - 2 * paddingPixels);\n      const percent = Math.min(Math.max(0, rawPercent), 1);\n\n      // Calculate value considering the full range\n      const value = state.min + (state.max - state.min) * percent;\n      const stepped = Math.round(value / state.step) * state.step;\n\n      if (isMin) {\n        state.currentMin = Math.min(stepped, state.currentMax);\n      } else {\n        state.currentMax = Math.max(stepped, state.currentMin);\n      }\n\n      this.updateSliderUI(key);\n    }, 16); // ~60fps\n  }\n\n  /**\n   * Apply range filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.debug(`Applying range filter for ${key}`);\n\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach((item) => {\n      const value =\n        state.type === \"date\"\n          ? new Date(item.dataset[key]).getTime()\n          : parseFloat(item.dataset[key]);\n\n      if (value >= state.currentMin && value <= state.currentMax) {\n        this.afs.showItem(item);\n      } else {\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"rangeFilter\", {\n      key,\n      min: state.currentMin,\n      max: state.currentMax,\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRangeValues(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax,\n      type: range.state.type,\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRangeValues(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateSliderUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove range slider\n   * @param {string} key - Range key\n   */\n  removeRangeSlider(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.slider.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Range slider removed for ${key}`);\n  }\n}\n","/**\n * @fileoverview Date filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class DateFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeDateRanges = new Map();\n    this.defaultFormat = this.afs.options.get('dateFormat') || 'YYYY-MM-DD';\n  }\n\n  /**\n   * @typedef {Object} DateRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {Date} [minDate] - Minimum date\n   * @property {Date} [maxDate] - Maximum date\n   * @property {string} [format] - Date format (default: YYYY-MM-DD)\n   */\n\n  /**\n   * Add date range filter\n   * @param {DateRangeOptions} options - Date range options\n   */\n  addDateRange({ key, container, minDate, maxDate, format = this.defaultFormat }) {\n    this.afs.logger.debug(`Adding date range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for date range');\n      return;\n    }\n\n    // Calculate min/max dates if not provided\n    const dates = this.calculateMinMaxDates(key);\n    minDate = minDate ?? dates.min;\n    maxDate = maxDate ?? dates.max;\n\n    // Create date picker elements\n    const elements = this.createDateElements();\n    const state = this.initializeState(minDate, maxDate, format);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeDateRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateDateUI(key);\n\n    this.afs.logger.info(`Date range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max dates from items\n   * @private\n   */\n  calculateMinMaxDates(key) {\n    try {\n      const validDates = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const date = new Date(item.dataset[key]);\n          return isNaN(date.getTime()) ? null : date;\n        })\n        .filter(date => date !== null);\n  \n      if (validDates.length === 0) {\n        // Return default date range if no valid dates found\n        const today = new Date();\n        return {\n          min: new Date(today.getFullYear(), 0, 1), // January 1st of current year\n          max: new Date(today.getFullYear(), 11, 31) // December 31st of current year\n        };\n      }\n  \n      return {\n        min: new Date(Math.min(...validDates)),\n        max: new Date(Math.max(...validDates))\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating date range:', error);\n      // Return default date range on error\n      const today = new Date();\n      return {\n        min: new Date(today.getFullYear(), 0, 1),\n        max: new Date(today.getFullYear(), 11, 31)\n      };\n    }\n  }\n\n  /**\n   * Create date picker elements\n   * @private\n   */\n  createDateElements() {\n    this.afs.logger.debug('Creating date picker elements');\n\n    const container = document.createElement('div');\n    container.className = 'afs-date-range-container';\n\n    const startContainer = document.createElement('div');\n    startContainer.className = 'afs-date-input-wrapper';\n    \n    const startLabel = document.createElement('label');\n    startLabel.textContent = 'Start Date';\n    \n    const startInput = document.createElement('input');\n    startInput.type = 'date';\n    startInput.className = 'afs-date-input start-date';\n\n    const endContainer = document.createElement('div');\n    endContainer.className = 'afs-date-input-wrapper';\n    \n    const endLabel = document.createElement('label');\n    endLabel.textContent = 'End Date';\n    \n    const endInput = document.createElement('input');\n    endInput.type = 'date';\n    endInput.className = 'afs-date-input end-date';\n\n    startContainer.appendChild(startLabel);\n    startContainer.appendChild(startInput);\n    endContainer.appendChild(endLabel);\n    endContainer.appendChild(endInput);\n\n    container.appendChild(startContainer);\n    container.appendChild(endContainer);\n\n    return {\n      container,\n      startInput,\n      endInput\n    };\n  }\n\n  /**\n   * Initialize date filter state\n   * @private\n   */\n  initializeState(minDate, maxDate, format) {\n    return {\n      minDate,\n      maxDate,\n      currentStartDate: minDate,\n      currentEndDate: maxDate,\n      format\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    this.afs.logger.debug(`Setting up event handlers for date range ${key}`);\n\n    const { startInput, endInput } = elements;\n\n    const handleDateChange = debounce(() => {\n      const startDate = new Date(startInput.value);\n      const endDate = new Date(endInput.value);\n\n      if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n        state.currentStartDate = startDate;\n        state.currentEndDate = endDate;\n        this.applyDateFilter(key);\n      }\n    }, 300);\n\n    startInput.addEventListener('change', handleDateChange);\n    endInput.addEventListener('change', handleDateChange);\n  }\n\n  /**\n   * Update date picker UI\n   * @private\n   */\n  updateDateUI(key) {\n    try {\n      const { state, elements } = this.activeDateRanges.get(key);\n      const { startInput, endInput } = elements;\n  \n      // Format dates for input\n      const formatDate = date => {\n        try {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) {\n            throw new Error('Invalid date');\n          }\n          return d.toISOString().split('T')[0];\n        } catch (error) {\n          this.afs.logger.error('Error formatting date:', error);\n          return '';\n        }\n      };\n  \n      // Set min/max constraints\n      startInput.min = formatDate(state.minDate);\n      startInput.max = formatDate(state.maxDate);\n      endInput.min = formatDate(state.minDate);\n      endInput.max = formatDate(state.maxDate);\n  \n      // Set current values\n      startInput.value = formatDate(state.currentStartDate);\n      endInput.value = formatDate(state.currentEndDate);\n    } catch (error) {\n      this.afs.logger.error('Error updating date UI:', error);\n    }\n  }\n\n  /**\n   * Apply date filter\n   * @private\n   */\n  applyDateFilter(key) {\n    this.afs.logger.info(`Applying date filter for ${key}`);\n    const { state } = this.activeDateRanges.get(key);\n  \n    this.afs.items.forEach(item => {\n      try {\n        // Check if item and dataset exist\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        const itemDate = new Date(item.dataset[key]);\n        \n        // Check if date is valid\n        if (isNaN(itemDate.getTime())) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        // Set time to midnight for consistent comparison\n        const startDate = new Date(state.currentStartDate);\n        startDate.setHours(0, 0, 0, 0);\n        \n        const endDate = new Date(state.currentEndDate);\n        endDate.setHours(23, 59, 59, 999);\n        \n        const compareDate = new Date(itemDate);\n        compareDate.setHours(0, 0, 0, 0);\n  \n        if (compareDate >= startDate && compareDate <= endDate) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item by date:', error);\n        this.afs.hideItem(item);\n      }\n    });\n  \n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('dateFilter', {\n      key,\n      startDate: state.currentStartDate,\n      endDate: state.currentEndDate\n    });\n  }\n\n  /**\n   * Get current date range\n   * @param {string} key - Date range key\n   * @returns {Object} Current date range\n   */\n  getDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return null;\n\n    return {\n      startDate: range.state.currentStartDate,\n      endDate: range.state.currentEndDate\n    };\n  }\n\n  /**\n   * Set date range\n   * @param {string} key - Date range key\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   */\n  setDateRange(key, startDate, endDate) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.state.currentStartDate = startDate;\n    range.state.currentEndDate = endDate;\n    this.updateDateUI(key);\n    this.applyDateFilter(key);\n  }\n\n  /**\n   * Remove date range\n   * @param {string} key - Date range key\n   */\n  removeDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeDateRanges.delete(key);\n    this.afs.logger.info(`Date range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Advanced Filter System - Main Class\n */\nimport { Logger } from \"./core/Logger\";\nimport { Options } from \"./core/Options\";\nimport { State } from \"./core/State\";\nimport { StyleManager } from \"./styles/StyleManager\";\nimport { EventEmitter } from \"./core/EventEmitter\";\n\nimport { Filter } from \"./features/Filter\";\nimport { Search } from \"./features/Search\";\nimport { Sort } from \"./features/Sort\";\nimport { Pagination } from \"./features/Pagination\";\nimport { URLManager } from \"./features/URLManager\";\nimport { RangeFilter } from \"./features/RangeFilter\";\nimport { DateFilter } from \"./features/DateFilter\";\n\nimport { debounce } from \"./utils\";\n\n// Version\nexport const VERSION = '1.0.8';\n\nexport class AFS extends EventEmitter {\n  /**\n   * @param {Object} options - Configuration options\n   */\n  constructor(options = {}) {\n    super();\n    this.initializeCore(options);\n  }\n\n  /**\n   * Initialize core components\n   * @private\n   */\n  initializeCore(options) {\n    try {\n      this.options = new Options(options);\n      this.logger = new Logger(\n        this.options.get(\"debug\") || false,\n        this.options.get(\"logLevel\") || \"info\",\n      );\n      this.state = new State();\n      this.styleManager = new StyleManager(this.options);\n\n      this.initializeDOM();\n      this.initializeFeatures();\n      this.setupLifecycle();\n    } catch (error) {\n      console.error(\"AFS initialization error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize DOM elements\n   * @private\n   */\n  initializeDOM() {\n    this.logger.debug(\"Initializing DOM elements\");\n\n    this.container = document.querySelector(\n      this.options.get(\"containerSelector\"),\n    );\n    if (!this.container) {\n      throw new Error(\n        `Container not found: ${this.options.get(\"containerSelector\")}`,\n      );\n    }\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    if (this.items.length === 0) {\n      this.logger.warn(\"No items found in container\");\n    }\n\n    this.state.setState(\"items.total\", this.items.length);\n    this.state.setState(\"items.visible\", new Set(this.items));\n  }\n\n  /**\n   * Initialize features\n   * @private\n   */\n  initializeFeatures() {\n    this.logger.debug(\"Initializing features\");\n\n    // Then initialize other features\n    this.filter = new Filter(this);\n    this.search = new Search(this);\n    this.sort = new Sort(this);\n    this.rangeFilter = new RangeFilter(this);\n    this.urlManager = new URLManager(this);\n    this.dateFilter = new DateFilter(this);\n    this.pagination = new Pagination(this);\n\n    // Apply styles\n    this.styleManager.applyStyles();\n\n    // Load initial state from URL\n    this.urlManager.loadFromURL();\n  }\n\n  /**\n   * Setup lifecycle events\n   * @private\n   */\n  setupLifecycle() {\n    if (this.options.get(\"responsive\")) {\n      window.addEventListener(\"resize\", this.handleResize.bind(this));\n    }\n\n    if (this.options.get(\"preserveState\")) {\n      document.addEventListener(\n        \"visibilitychange\",\n        this.handleVisibilityChange.bind(this),\n      );\n    }\n\n    if (this.options.get(\"observeDOM\")) {\n      this.setupMutationObserver();\n    }\n\n    this.emit(\"initialized\", {\n      itemCount: this.items.length,\n      options: this.options.export(),\n    });\n  }\n\n  // Item Management Methods\n  /**\n   * Show item with animation\n   * @public\n   * @param {HTMLElement} item - Item to show\n   */\n  showItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.add(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Remove hidden class but keep opacity 0 initially\n    item.classList.remove(this.options.get(\"hiddenClass\"));\n\n    // Set initial animation state\n    item.style.opacity = \"0\";\n    item.style.transform = \"scale(0.95)\";\n    item.style.display = \"\"; // Ensure item is not display: none\n\n    // Force reflow before starting animation\n    item.offsetHeight;\n\n    // Add transition class if not present\n    const transitionClass =\n      this.options.get(\"transitionClass\") || \"afs-transition\";\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start animation in next frame\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        // Double RAF for reliable animation\n        item.style.opacity = \"1\";\n        item.style.transform = \"scale(1)\";\n      });\n    });\n\n    // Clean up after animation\n    const duration = this.options.get(\"animationDuration\") || 300;\n    setTimeout(() => {\n      // Only clean up if item is still meant to be visible\n      if (visibleItems.has(item)) {\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Hide item with animation\n   * @public\n   * @param {HTMLElement} item - Item to hide\n   */\n  hideItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.delete(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Add transition class if not present\n    const transitionClass =\n      this.options.get(\"transitionClass\") || \"afs-transition\";\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start hide animation\n    requestAnimationFrame(() => {\n      item.style.opacity = \"0\";\n      item.style.transform = \"scale(0.95)\";\n    });\n\n    // Add hidden class and clean up after animation\n    const duration = this.options.get(\"animationDuration\") || 300;\n    setTimeout(() => {\n      // Only hide if the item is still meant to be hidden\n      if (!visibleItems.has(item)) {\n        item.classList.add(this.options.get(\"hiddenClass\"));\n        // Clean up styles\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Add new items\n   * @public\n   */\n  addItems(newItems) {\n    const items = Array.isArray(newItems) ? newItems : [newItems];\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => {\n      fragment.appendChild(item);\n      this.state.getState().items.visible.add(item);\n    });\n\n    this.container.appendChild(fragment);\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.filter.applyFilters();\n  }\n\n  /**\n   * Remove items\n   * @public\n   */\n  removeItems(itemsToRemove) {\n    const items = Array.isArray(itemsToRemove)\n      ? itemsToRemove\n      : [itemsToRemove];\n    const visibleItems = this.state.getState().items.visible;\n\n    items.forEach((item) => {\n      visibleItems.delete(item);\n      item.remove();\n    });\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.updateCounter();\n  }\n\n  // State Management Methods\n  /**\n   * Save current state\n   * @public\n   */\n  saveState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    const state = {\n      filters: Array.from(this.filter.getActiveFilters()),\n      search: this.search.getValue(),\n      sort: this.sort.getCurrentSort(),\n      pagination: this.pagination.getPageInfo(),\n      timestamp: Date.now(),\n    };\n\n    localStorage.setItem(\"afs_state\", JSON.stringify(state));\n    this.logger.debug(\"State saved\");\n  }\n\n  /**\n   * Restore saved state\n   * @public\n   */\n  restoreState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    try {\n      const saved = localStorage.getItem(\"afs_state\");\n      if (!saved) return;\n\n      const state = JSON.parse(saved);\n      if (Date.now() - state.timestamp > this.options.get(\"stateExpiry\")) {\n        localStorage.removeItem(\"afs_state\");\n        return;\n      }\n\n      this.setState(state);\n      this.logger.debug(\"State restored\");\n    } catch (error) {\n      this.logger.error(\"Error restoring state:\", error);\n    }\n  }\n\n  /**\n   * Get current state\n   * @public\n   */\n  getState() {\n    return this.state.export();\n  }\n\n  /**\n   * Set new state\n   * @public\n   */\n  setState(newState) {\n    this.state.import(newState);\n    this.refresh();\n  }\n\n  // Update Methods\n  /**\n   * Update counter display\n   * @public\n   */\n  updateCounter() {\n    // Get counter element\n    const counterElement = document.querySelector(\n      this.options.get(\"counterSelector\"),\n    );\n    if (!counterElement) return;\n\n    try {\n      // Get count values\n      const total = this.items.length;\n      const visible = this.state.getState().items.visible.size;\n      const filtered = total - visible;\n\n      // Get counter options with defaults\n      const counterOpts =\n        this.options.get(\"counter\") || Options.defaults.counter;\n      const template = counterOpts.template || \"Showing {visible} of {total}\";\n      const formatter =\n        counterOpts.formatter || ((num) => num.toLocaleString());\n\n      // Format numbers\n      const formattedVisible = formatter(visible);\n      const formattedTotal = formatter(total);\n      const formattedFiltered = formatter(filtered);\n\n      // Build counter text\n      let counterText = template\n        .replace(\"{visible}\", formattedVisible)\n        .replace(\"{total}\", formattedTotal)\n        .replace(\"{filtered}\", formattedFiltered);\n\n      // Add filtered count if enabled\n      if (filtered > 0 && counterOpts.showFiltered) {\n        const filteredTemplate =\n          counterOpts.filteredTemplate || \"({filtered} filtered)\";\n        counterText +=\n          \" \" + filteredTemplate.replace(\"{filtered}\", formattedFiltered);\n      }\n\n      // Show no results message if applicable\n      if (visible === 0 && counterOpts.noResultsTemplate) {\n        counterText = counterOpts.noResultsTemplate;\n      }\n\n      // Update counter element\n      counterElement.textContent = counterText;\n\n      // Emit event\n      this.emit(\"counterUpdated\", {\n        total,\n        visible,\n        filtered,\n        formattedTotal,\n        formattedVisible,\n        formattedFiltered,\n      });\n    } catch (error) {\n      // Fallback to basic counter if anything fails\n      this.logger.error(\"Error updating counter:\", error);\n      counterElement.textContent = `${\n        this.state.getState().items.visible.size\n      }/${this.items.length}`;\n    }\n  }\n\n  /**\n   * Update options\n   * @public\n   */\n  updateOptions(newOptions) {\n    this.options.update(newOptions);\n    this.styleManager.updateStyles(newOptions);\n    this.refresh();\n  }\n\n  /**\n   * Refresh system\n   * @public\n   */\n  refresh() {\n    this.logger.debug(\"Refreshing AFS\");\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.state.setState(\"items.total\", this.items.length);\n\n    this.filter.applyFilters();\n    this.search.search(this.search.getValue());\n    this.pagination.update();\n\n    this.emit(\"refreshed\", { itemCount: this.items.length });\n  }\n\n  // Event Handlers\n  /**\n   * Handle resize\n   * @private\n   */\n  handleResize = debounce(() => {\n    this.emit(\"resize\");\n    this.refresh();\n  }, 250);\n\n  /**\n   * Handle visibility change\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.emit(\"hidden\");\n      this.saveState();\n    } else {\n      this.emit(\"visible\");\n      this.restoreState();\n    }\n  }\n\n  /**\n   * Setup mutation observer\n   * @private\n   */\n  setupMutationObserver() {\n    const observer = new MutationObserver((mutations) => {\n      if (mutations.some((mutation) => mutation.type === \"childList\")) {\n        this.refresh();\n      }\n    });\n\n    observer.observe(this.container, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  // Utility Methods\n  /**\n   * Get version\n   * @public\n   */\n  getVersion() {\n    return VERSION;\n  }\n\n  /**\n   * Check feature support\n   * @public\n   */\n  isFeatureSupported(feature) {\n    const supportedFeatures = {\n      search: !!this.search,\n      pagination: true,\n      animation:\n        typeof document.createElement(\"div\").style.transition !== \"undefined\",\n      urlState: typeof window.history.pushState === \"function\",\n      localStorage: (() => {\n        try {\n          localStorage.setItem(\"test\", \"test\");\n          localStorage.removeItem(\"test\");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      })(),\n    };\n\n    return !!supportedFeatures[feature];\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.logger.debug(\"Destroying AFS instance\");\n\n    // Remove event listeners\n    window.removeEventListener(\"resize\", this.handleResize);\n    document.removeEventListener(\n      \"visibilitychange\",\n      this.handleVisibilityChange,\n    );\n\n    // Destroy features\n    this.filter.destroy();\n    this.search.destroy();\n    this.sort.destroy();\n    this.pagination.destroy();\n    this.rangeFilter.destroy();\n\n    // Cleanup\n    this.styleManager.removeStyles();\n    this.state.reset();\n    localStorage.removeItem(\"afs_state\");\n\n    // Reset items\n    this.items.forEach((item) => {\n      item.style = \"\";\n      item.classList.remove(\n        this.options.get(\"hiddenClass\"),\n        this.options.get(\"activeClass\"),\n      );\n    });\n\n    this.emit(\"destroyed\");\n  }\n}\n"],"names":["Logger","constructor","debug","arguments","length","undefined","logLevel","this","enabled","level","levels","error","warn","info","_log","currentLevelValue","timestamp","Date","toISOString","prefix","toUpperCase","_len","args","Array","_key","console","_len2","_key2","_len3","_key3","_len4","_key4","_len5","_key5","setDebugMode","hasOwnProperty","Options","static","containerSelector","itemSelector","filterButtonSelector","searchInputSelector","counterSelector","activeClass","hiddenClass","animationDuration","animationType","animationEasing","filterMode","searchKeys","debounceTime","dateFormat","counter","template","showFiltered","filteredTemplate","noResultsTemplate","formatter","num","toLocaleString","styles","slider","ui","showHistogram","bins","track","radius","background","thumb","size","histogram","bar","pagination","button","border","borderRadius","padding","color","active","hover","colors","primary","text","containerClass","trackClass","thumbClass","valueClass","selectedClass","itemsPerPage","container","pageButtonClass","activePageClass","scrollToTop","scrollOffset","scrollBehavior","userOptions","options","mergeOptions","defaults","initializeStyles","validate","defaultStyles","currentStyles","target","source","result","key","isArray","requiredSelectors","selector","Error","includes","get","path","split","reduce","obj","set","value","parts","last","pop","update","updates","reset","export","State","state","filters","current","Set","groups","Map","ranges","dateRanges","mode","groupMode","search","query","keys","sort","orders","items","visible","total","currentPage","totalPages","getState","setState","i","from","entries","import","importedState","StyleManager","styleElement","createBaseStyles","createRangeStyles","sliderOptions","sliderStyles","createDateStyles","applyStyles","createPaginationStyles","createSearchStyles","textContent","document","createElement","head","appendChild","fallbackStyles","paginationOptions","buttonClass","paginationStyles","searchClass","updateStyles","newOptions","removeStyles","remove","EventEmitter","events","onceEvents","on","eventName","callback","has","add","off","once","_this","onceWrapper","apply","delete","emit","forEach","removeAllListeners","clear","listenerCount","Animation","afs","animations","fade","in","opacity","transform","transitionTimingFunction","out","slide","scale","rotate","flip","zoom","bounce","animation","blur","filter","skew","slideInLeft","slideInRight","fadeInUp","fadeInDown","bounceIn","applyShowAnimation","item","duration","style","display","requestAnimationFrame","Object","assign","transition","applyHideAnimation","handleTransitionEnd","removeEventListener","addEventListener","setAnimation","Filter","filterButtons","activeFilters","currentFilters","filterGroups","sortOrders","setupFilters","logger","filterSelector","querySelectorAll","filterValue","dataset","bindFilterEvent","setLogic","logic","applyFilters","clearAllFilters","_","classList","allButton","findAllButton","urlManager","updateURL","resetFilters","toggleFilter","visibleItems","updateCounter","handleFilterClick","contains","previouslyVisible","itemMatchesFilters","emitFilterEvents","offsetHeight","itemCategories","categories","itemMatchesFilterGroups","itemMatchesAnyFilter","itemMatchesAllFilters","some","every","groupMatches","values","map","group","operator","matches","nowVisible","added","removed","addFilterGroup","groupId","validOperator","removeFilterGroup","setGroupMode","validMode","addFilter","removeFilter","setFilterMode","getActiveFilters","getFilterGroups","addFilterButton","sortWithOrder","newOrder","sortType","determineSortType","a","b","valueA","getSortValue","valueB","compareValues","reorderItems","order","shuffle","j","Math","floor","random","itemCount","isNaN","test","type","parseFloat","getTime","toLowerCase","comparison","fragment","createDocumentFragment","getCurrentSortOrder","clearSortOrders","checkbox","checked","setValue","refresh","removeFilterButton","destroy","debounce","func","wait","timeout","immediate","context","callNow","clearTimeout","setTimeout","later","Search","searchInput","minSearchLength","highlightClass","setupSearch","searchSelector","querySelector","bindSearchEvents","debouncedSearch","e","clearSearch","preventDefault","normalizedQuery","normalizeQuery","regex","createSearchRegex","searchText","getItemSearchText","showItem","highlightMatches","hideItem","removeHighlights","trim","replace","pattern","Boolean","word","join","RegExp","words","highlightedText","wordRegex","innerHTML","highlight","replaceWith","getValue","updateConfig","handleClear","handleEnter","Sort","sortButtons","setupSort","sortSelector","sortKey","direction","sortDirection","bindSortEvent","sortData","updateSortButtonState","btn","indicator","modifier","sortMultiple","criteria","sortWithComparator","comparator","data","getCurrentSort","addSortButton","removeSortButton","Pagination","setupPagination","log","className","itemsContainer","bindEvents","closest","page","goToPage","parseInt","max","ceil","currentState","updateVisibility","renderPagination","startIndex","endIndex","itemsToShow","slice","controls","createPaginationControls","showPrevNext","prevButton","createPageButton","disabled","class","range","calculatePageRange","start","createEllipsis","end","toString","nextButton","span","maxButtons","sideButtons","min","targetPage","previousPage","window","scrollTo","top","offsetTop","behavior","setPaginationMode","showAllItems","URLManager","defaultParams","URLSearchParams","setupPopStateHandler","loadFromURL","params","addFiltersToURL","addRangesToURL","addSearchToURL","addSortToURL","addPaginationToURL","pushState","filtersByType","_ref","currentMin","currentMax","queryString","newURL","location","pathname","href","history","filterParams","_ref2","isRegularFilter","_ref3","buttonFilter","searchQuery","sortParam","fromEntries","processFiltersFromURL","hasFilters","startsWith","processRangesFromURL","rangeKey","Number","str","processSearchFromURL","processSortFromURL","processPaginationFromURL","perPage","param","clearURL","getURLParams","hasParams","getParam","RangeFilter","activeRanges","styleManager","addRangeSlider","step","calculateMinMax","sliderUiOptions","histogramData","calculateHistogramData","counts","binEdges","elements","createSliderElements","initializeState","appendElements","setupEventHandlers","updateSliderUI","setupHistogramHighlight","createHistogramBars","selectedRange","minThumb","maxThumb","minValue","maxValue","createHistogram","index","height","backgroundColor","binWidth","fill","binIndex","maxCount","count","round","bars","updateHistogram","minVal","maxVal","binStart","binEnd","isDragging","handleStart","isMin","moveHandler","moveEvent","evt","event","touches","createMoveHandler","stopHandler","applyFilter","passive","minPos","maxPos","clampedMinPos","clampedMaxPos","left","width","formatValue","toLocaleDateString","toFixed","clientX","rect","getBoundingClientRect","totalWidth","paddingPixels","PADDING","rawPercent","percent","stepped","getRangeValues","setRangeValues","removeRangeSlider","DateFilter","activeDateRanges","defaultFormat","addDateRange","minDate","maxDate","format","dates","calculateMinMaxDates","createDateElements","updateDateUI","validDates","date","today","getFullYear","startContainer","startLabel","startInput","endContainer","endLabel","endInput","currentStartDate","currentEndDate","handleDateChange","startDate","endDate","applyDateFilter","formatDate","d","itemDate","setHours","compareDate","getDateRange","setDateRange","removeDateRange","VERSION","super","initializeCore","initializeDOM","initializeFeatures","setupLifecycle","rangeFilter","dateFilter","handleResize","bind","handleVisibilityChange","setupMutationObserver","transitionClass","addItems","newItems","removeItems","itemsToRemove","saveState","getPageInfo","now","localStorage","setItem","JSON","stringify","restoreState","saved","getItem","parse","removeItem","newState","counterElement","filtered","counterOpts","formattedVisible","formattedTotal","formattedFiltered","counterText","updateOptions","hidden","MutationObserver","mutations","mutation","observe","childList","subtree","getVersion","isFeatureSupported","feature","urlState"],"mappings":"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"}