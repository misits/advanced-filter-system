{"version":3,"file":"AFS.min.js","sources":["../src/AFS.js"],"sourcesContent":["/**\n * @fileoverview Advanced Filter System for DOM elements\n * @version 1.0.0\n *\n * A flexible and customizable filtering system that supports:\n * - Multiple filtering modes (OR/AND)\n * - Text search with debouncing\n * - Multiple sorting criteria\n * - Range filtering\n * - URL state management\n * - Animation and transitions\n * - Results counter\n */\n\n/**\n * Utility function for debouncing\n * @param {Function} func - Function to debounce\n * @param {number} wait - Delay in milliseconds\n * @returns {Function} Debounced function\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nclass AFS {\n    /**\n     * @typedef {Object} FilterOptions\n     * @property {string} containerSelector - Main container selector\n     * @property {string} itemSelector - Items to filter selector\n     * @property {string} filterButtonSelector - Filter buttons selector\n     * @property {string} [searchInputSelector] - Search input selector\n     * @property {string} [counterSelector] - Results counter selector\n     * @property {string} [activeClass='active'] - Active state class\n     * @property {string} [hiddenClass='hidden'] - Hidden state class\n     * @property {number} [animationDuration=300] - Animation duration in ms\n     * @property {string} [filterMode='OR'] - Filter mode ('OR' or 'AND')\n     * @property {string[]} [searchKeys=['title']] - Data attributes to search in\n     * @property {number} [debounceTime=300] - Search debounce delay in ms\n     */\n\n    /**\n     * @param {FilterOptions} options - Filter configuration options\n     */\n    constructor(options = {}) {\n        this.options = {\n            containerSelector: \".filter-container\",\n            itemSelector: \".filter-item\",\n            filterButtonSelector: \".btn-filter\",\n            searchInputSelector: \".filter-search\",\n            counterSelector: \".filter-counter\",\n            activeClass: \"active\",\n            hiddenClass: \"hidden\",\n            animationDuration: 300,\n            filterMode: \"OR\",\n            searchKeys: [\"title\"],\n            debounceTime: 300,\n            ...options,\n        };\n\n        // Initialize elements\n        this.container = document.querySelector(this.options.containerSelector);\n        this.items = document.querySelectorAll(this.options.itemSelector);\n        this.filterButtons = document.querySelectorAll(\n            this.options.filterButtonSelector,\n        );\n        this.searchInput = document.querySelector(\n            this.options.searchInputSelector,\n        );\n        this.counter = document.querySelector(this.options.counterSelector);\n\n        // Initialize state\n        this.currentFilters = new Set([\"*\"]);\n        this.currentSearch = \"\";\n        this.visibleItems = new Set(this.items);\n\n        this.init();\n    }\n\n    /**\n     * Initialize the filter system\n     * @private\n     */\n    init() {\n        this.addStyles();\n        this.bindEvents();\n        this.loadFromURL();\n        this.updateCounter();\n    }\n\n    /**\n     * Add required styles to document\n     * @private\n     */\n    addStyles() {\n        const styles = `\n            .${this.options.hiddenClass} {\n                display: none !important;\n            }\n\n            ${this.options.itemSelector} {\n                opacity: 1;\n                transform: scale(1);\n                transition: opacity ${this.options.animationDuration}ms ease-out,\n                            transform ${this.options.animationDuration}ms ease-out;\n            }\n\n            ${this.options.filterButtonSelector} {\n                opacity: 0.5;\n                transition: opacity ${this.options.animationDuration}ms ease;\n            }\n\n            ${this.options.filterButtonSelector}.${this.options.activeClass} {\n                opacity: 1;\n            }\n        `;\n\n        const styleSheet = document.createElement(\"style\");\n        styleSheet.textContent = styles;\n        document.head.appendChild(styleSheet);\n    }\n\n    /**\n     * Bind all event listeners\n     * @private\n     */\n    bindEvents() {\n        this.filterButtons.forEach((button) => {\n            button.addEventListener(\"click\", () =>\n                this.handleFilterClick(button),\n            );\n        });\n\n        if (this.searchInput) {\n            this.searchInput.addEventListener(\n                \"input\",\n                debounce((e) => {\n                    this.search(e.target.value);\n                }, this.options.debounceTime),\n            );\n        }\n\n        window.addEventListener(\"popstate\", () => this.loadFromURL());\n    }\n\n    /**\n     * Handle filter button clicks\n     * @private\n     * @param {HTMLElement} button - Clicked filter button\n     */\n    handleFilterClick(button) {\n        const filterValue = button.dataset.filter;\n\n        if (filterValue === \"*\") {\n            this.resetFilters();\n        } else {\n            this.toggleFilter(filterValue, button);\n        }\n\n        this.filter();\n        this.updateURL();\n    }\n\n    /**\n     * Reset all filters to default state\n     * @private\n     */\n    resetFilters() {\n        this.filterButtons.forEach((btn) =>\n            btn.classList.remove(this.options.activeClass),\n        );\n        this.currentFilters.clear();\n        this.currentFilters.add(\"*\");\n        this.filterButtons[0].classList.add(this.options.activeClass);\n        this.resetCounter();\n    }\n\n    /**\n     * Reset visible items counter\n     * @private\n     */\n    resetCounter() {\n        this.visibleItems = new Set(this.items);\n        this.updateCounter();\n    }\n\n    /**\n     * Toggle individual filter state\n     * @private\n     * @param {string} filterValue - Filter value to toggle\n     * @param {HTMLElement} button - Filter button element\n     */\n    toggleFilter(filterValue, button) {\n        this.currentFilters.delete(\"*\");\n        this.filterButtons[0].classList.remove(this.options.activeClass);\n\n        if (button.classList.contains(this.options.activeClass)) {\n            button.classList.remove(this.options.activeClass);\n            this.currentFilters.delete(filterValue);\n\n            if (this.currentFilters.size === 0) {\n                this.resetFilters();\n            }\n        } else {\n            button.classList.add(this.options.activeClass);\n            this.currentFilters.add(filterValue);\n        }\n    }\n\n    /**\n     * Apply current filters to items\n     * @public\n     */\n    filter() {\n        this.visibleItems.clear(); // Start with an empty set\n\n        this.items.forEach((item) => {\n            if (this.currentFilters.has(\"*\")) {\n                this.showItem(item);\n                this.visibleItems.add(item); // Add visible item to the set\n            } else {\n                const itemCategories = new Set(\n                    item.dataset.categories?.split(\" \") || [],\n                );\n                const matchesFilter =\n                    this.options.filterMode === \"OR\"\n                        ? this.matchesAnyFilter(itemCategories)\n                        : this.matchesAllFilters(itemCategories);\n\n                if (matchesFilter) {\n                    this.showItem(item);\n                    this.visibleItems.add(item); // Add visible item to the set\n                } else {\n                    this.hideItem(item);\n                }\n            }\n        });\n\n        setTimeout(() => {\n            this.updateCounter();\n        }, this.options.animationDuration);\n    }\n\n    /**\n     * Check if item matches any active filter (OR mode)\n     * @private\n     * @param {Set} itemCategories - Item's categories\n     * @returns {boolean} Whether item matches any filter\n     */\n    matchesAnyFilter(itemCategories) {\n        return [...this.currentFilters].some((filter) => {\n            const [type, value] = filter.split(\":\");\n            return itemCategories.has(`${type}:${value}`);\n        });\n    }\n\n    /**\n     * Check if item matches all active filters (AND mode)\n     * @private\n     * @param {Set} itemCategories - Item's categories\n     * @returns {boolean} Whether item matches all filters\n     */\n    matchesAllFilters(itemCategories) {\n        return [...this.currentFilters].every((filter) => {\n            const [type, value] = filter.split(\":\");\n            return itemCategories.has(`${type}:${value}`);\n        });\n    }\n\n    /**\n     * Show an item with animation\n     * @private\n     * @param {HTMLElement} item - Item to show\n     */\n    showItem(item) {\n        this.visibleItems.add(item);\n        item.classList.remove(this.options.hiddenClass);\n        item.style.opacity = \"0\";\n        item.style.transform = \"scale(0.95)\";\n\n        item.offsetHeight;\n\n        requestAnimationFrame(() => {\n            item.style.opacity = \"1\";\n            item.style.transform = \"scale(1)\";\n        });\n    }\n\n    /**\n     * Hide an item with animation\n     * @private\n     * @param {HTMLElement} item - Item to hide\n     */\n    hideItem(item) {\n        item.style.opacity = \"0\";\n        item.style.transform = \"scale(0.95)\";\n\n        setTimeout(() => {\n            if (item.style.opacity === \"0\") {\n                item.classList.add(this.options.hiddenClass);\n                this.visibleItems.delete(item);\n            }\n        }, this.options.animationDuration);\n    }\n\n    /**\n     * Search items by text\n     * @public\n     * @param {string} query - Search query\n     */\n    search(query) {\n        this.currentSearch = query.toLowerCase().trim();\n        let matches = 0;\n\n        this.items.forEach((item) => {\n            const searchText = this.options.searchKeys\n                .map((key) => item.dataset[key] || \"\")\n                .join(\" \")\n                .toLowerCase();\n\n            const matchesSearch =\n                this.currentSearch === \"\" ||\n                searchText.includes(this.currentSearch);\n\n            if (matchesSearch) {\n                this.showItem(item);\n                matches++;\n            } else {\n                this.hideItem(item);\n            }\n        });\n\n        this.updateURL();\n\n        setTimeout(() => {\n            this.updateCounter();\n        }, this.options.animationDuration);\n    }\n\n    /**\n     * Sort items by multiple criteria\n     * @public\n     * @param {Array<{key: string, direction: string}>} criteria - Sort criteria\n     */\n    sortMultiple(criteria) {\n        const items = [...this.items];\n\n        items.sort((a, b) => {\n            for (const criterion of criteria) {\n                const valueA = a.dataset[criterion.key];\n                const valueB = b.dataset[criterion.key];\n\n                const comparison =\n                    criterion.direction === \"asc\"\n                        ? valueA.localeCompare(valueB)\n                        : valueB.localeCompare(valueA);\n\n                if (comparison !== 0) return comparison;\n            }\n            return 0;\n        });\n\n        items.forEach((item) => this.container.appendChild(item));\n    }\n\n    /**\n     * Filter items by numeric range\n     * @public\n     * @param {string} key - Data attribute key\n     * @param {number} min - Minimum value\n     * @param {number} max - Maximum value\n     */\n    addRangeFilter(key, min, max) {\n        this.items.forEach((item) => {\n            const value = parseFloat(item.dataset[key]);\n            const inRange = value >= min && value <= max;\n\n            if (inRange) {\n                this.showItem(item);\n            } else {\n                this.hideItem(item);\n            }\n        });\n\n        setTimeout(() => {\n            this.updateCounter();\n        }, this.options.animationDuration);\n    }\n\n    /**\n     * Update URL with current filter state\n     * @private\n     */\n    updateURL() {\n        const params = new URLSearchParams();\n\n        // Séparer les filtres par type\n        const filtersByType = {};\n        for (const filter of this.currentFilters) {\n            if (filter !== \"*\") {\n                const [type, value] = filter.split(\":\");\n                if (!filtersByType[type]) {\n                    filtersByType[type] = new Set();\n                }\n                filtersByType[type].add(value);\n            }\n        }\n\n        // Ajouter chaque type de filtre à l'URL\n        Object.entries(filtersByType).forEach(([type, values]) => {\n            params.set(type, Array.from(values).join(\",\"));\n        });\n\n        if (this.currentSearch) {\n            params.set(\"search\", this.currentSearch);\n        }\n\n        const newURL = `${window.location.pathname}${\n            params.toString() ? \"?\" + params.toString() : \"\"\n        }`;\n        window.history.pushState({}, \"\", newURL);\n    }\n\n    /**\n     * Load filter state from URL\n     * @private\n     */\n    loadFromURL() {\n        const params = new URLSearchParams(window.location.search);\n        this.currentFilters.clear();\n\n        // Si aucun filtre n'est présent, utiliser '*'\n        let hasFilters = false;\n\n        // Parcourir tous les paramètres\n        for (const [type, values] of params.entries()) {\n            if (type !== \"search\") {\n                hasFilters = true;\n                values.split(\",\").forEach((value) => {\n                    this.currentFilters.add(`${type}:${value}`);\n                });\n            }\n        }\n\n        if (!hasFilters) {\n            this.currentFilters.add(\"*\");\n        }\n\n        // Update active buttons\n        this.filterButtons.forEach((button) => {\n            const filterValue = button.dataset.filter;\n            if (\n                this.currentFilters.has(filterValue) ||\n                (filterValue === \"*\" && this.currentFilters.has(\"*\"))\n            ) {\n                button.classList.add(this.options.activeClass);\n            } else {\n                button.classList.remove(this.options.activeClass);\n            }\n        });\n\n        // Load search\n        const search = params.get(\"search\") || \"\";\n        if (this.searchInput) {\n            this.searchInput.value = search;\n        }\n\n        this.filter();\n        if (search) {\n            this.search(search);\n        }\n    }\n\n    /**\n     * Update results counter\n     * @private\n     * @returns {{total: number, visible: number}}\n     */\n    updateCounter() {\n        const total = this.items.length;\n        const visible = this.visibleItems.size;\n\n        if (this.counter) {\n            this.counter.textContent = `Showing ${visible} of ${total}`;\n        }\n\n        return { total, visible };\n    }\n\n    /**\n     * Set filter logic mode (alias for setFilterMode)\n     * @public\n     * @param {string} logic - New filter logic ('AND' or 'OR')\n     */\n    setLogic(logic) {\n        if (typeof logic === 'boolean') {\n            // Handle boolean input (true = AND, false = OR)\n            this.options.filterMode = logic ? 'AND' : 'OR';\n            this.filter();\n            return;\n        }\n\n        const mode = logic.toUpperCase();\n        if (['OR', 'AND'].includes(mode)) {\n            this.options.filterMode = mode;\n            this.filter();\n        }\n    }\n\n\n    /**\n     * Change filter mode\n     * @public\n     * @param {string} mode - New filter mode ('OR' or 'AND')\n     */\n    setFilterMode(mode) {\n        if ([\"OR\", \"AND\"].includes(mode.toUpperCase())) {\n            this.options.filterMode = mode.toUpperCase();\n            this.filter();\n        }\n    }\n\n    /**\n     * Add filter by type and value\n     * @public\n     * @param {string} type - Filter type\n     * @param {string} value - Filter value\n     */\n    addFilter(type, value) {\n        this.currentFilters.add(`${type}:${value}`);\n        this.filter();\n        this.updateURL();\n    }\n\n    /**\n     * Remove filter by type and value\n     * @public\n     * @param {string} type - Filter type\n     */\n    removeFilter(type, value) {\n        this.currentFilters.delete(`${type}:${value}`);\n        if (this.currentFilters.size === 0) {\n            this.currentFilters.add(\"*\");\n        }\n        this.filter();\n        this.updateURL();\n    }\n\n    /**\n     * Get active filters by type\n     * @public\n     * @param {string} type - Filter type\n     */\n    getActiveFiltersByType(type) {\n        return [...this.currentFilters]\n            .filter((filter) => filter.startsWith(`${type}:`))\n            .map((filter) => filter.split(\":\")[1]);\n    }\n}\n\nexport { AFS };\n"],"names":["constructor","options","arguments","length","undefined","this","containerSelector","itemSelector","filterButtonSelector","searchInputSelector","counterSelector","activeClass","hiddenClass","animationDuration","filterMode","searchKeys","debounceTime","container","document","querySelector","items","querySelectorAll","filterButtons","searchInput","counter","currentFilters","Set","currentSearch","visibleItems","init","addStyles","bindEvents","loadFromURL","updateCounter","styles","styleSheet","createElement","textContent","head","appendChild","forEach","button","addEventListener","handleFilterClick","func","wait","timeout","_len","args","Array","_key","clearTimeout","setTimeout","later","debounce","e","search","target","value","window","filterValue","dataset","filter","resetFilters","toggleFilter","updateURL","btn","classList","remove","clear","add","resetCounter","delete","contains","size","item","has","showItem","itemCategories","categories","split","matchesAnyFilter","matchesAllFilters","hideItem","some","type","every","style","opacity","transform","offsetHeight","requestAnimationFrame","query","toLowerCase","trim","searchText","map","key","join","includes","sortMultiple","criteria","sort","a","b","criterion","valueA","valueB","comparison","direction","localeCompare","addRangeFilter","min","max","parseFloat","params","URLSearchParams","filtersByType","Object","entries","_ref","values","set","from","newURL","location","pathname","toString","history","pushState","hasFilters","get","total","visible","setLogic","logic","mode","toUpperCase","setFilterMode","addFilter","removeFilter","getActiveFiltersByType","startsWith"],"mappings":"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"}