{"version":3,"file":"afs.legacy.js","sources":["../src/core/Logger.js","../src/core/Options.js","../src/core/State.js","../src/styles/StyleManager.js","../src/core/EventEmitter.js","../src/styles/Animation.js","../src/features/Filter.js","../src/utils/index.js","../src/features/InputRangeFilter.js","../src/features/Search.js","../src/features/Sort.js","../src/features/Pagination.js","../src/features/URLManager.js","../src/features/RangeFilter.js","../src/features/DateFilter.js","../src/AFS.js"],"sourcesContent":["/**\n * @fileoverview Logging system for AFS\n */\n\nexport class Logger {\n  constructor(debug = false, logLevel = 'info') {\n    this.enabled = debug;\n    this.level = logLevel;\n    this.levels = {\n      error: 0,\n      warn: 1,\n      info: 2,\n      debug: 3\n    };\n\n    // Immediately log initialization if debug is enabled\n    if (this.enabled) {\n      console.debug(`[AFS DEBUG] Logger initialized with level: ${logLevel}`);\n    }\n  }\n\n  /**\n   * Internal log method\n   * @private\n   */\n  _log(level, ...args) {\n    // Always log errors regardless of debug mode\n    if (level === 'error' || this.enabled) {\n      const currentLevelValue = this.levels[this.level];\n      const messageLevel = this.levels[level];\n\n      if (messageLevel <= currentLevelValue) {\n        const timestamp = new Date().toLocaleTimeString();\n        const prefix = `[AFS ${level.toUpperCase()}]`;\n\n        // Ensure console methods exist\n        const consoleMethod = console[level] || console.log;\n        consoleMethod.apply(console, [prefix, timestamp, ...args]);\n      }\n    }\n  }\n\n  /**\n   * Log error message\n   * @public\n   */\n  error(...args) {\n    // Errors always get logged\n    this._log('error', ...args);\n  }\n\n  /**\n   * Log warning message\n   * @public\n   */\n  warn(...args) {\n    this._log('warn', ...args);\n  }\n\n  /**\n   * Log info message\n   * @public\n   */\n  info(...args) {\n    this._log('info', ...args);\n  }\n\n  /**\n   * Log debug message\n   * @public\n   */\n  debug(...args) {\n    this._log('debug', ...args);\n  }\n\n  /**\n   * Enable or disable debug mode\n   * @public\n   */\n  setDebugMode(enabled, level = 'info') {\n    const previousState = this.enabled;\n    this.enabled = Boolean(enabled);\n    \n    if (this.levels.hasOwnProperty(level)) {\n      this.level = level;\n    }\n\n    // Log state change if either previous or new state is enabled\n    if (this.enabled || previousState) {\n      this._log('info', \n        `Debug mode ${this.enabled ? 'enabled' : 'disabled'} with level: ${this.level}`\n      );\n    }\n  }\n\n  /**\n   * Get current debug state\n   * @public\n   * @returns {Object} Current logger state\n   */\n  getState() {\n    return {\n      enabled: this.enabled,\n      level: this.level\n    };\n  }\n}","/**\n * @fileoverview Configuration management for AFS\n */\n\nexport class Options {\n  /**\n   * @typedef {Object} AFSOptions\n   * @property {string} containerSelector - Main container selector\n   * @property {string} itemSelector - Items to filter selector\n   * @property {string} filterButtonSelector - Filter buttons selector\n   * @property {string} filterDropdownSelector - Filter dropdown selector\n   * @property {string} searchInputSelector - Search input selector\n   * @property {string} counterSelector - Results counter selector\n   * @property {string} sortButtonSelector - Sort buttons selector\n   * @property {string} activeClass - Active state class\n   * @property {string} hiddenClass - Hidden state class\n   * @property {string} activeSortClass - Active sort button class\n   * @property {string} transitionClass - Transition animation class\n   * @property {number} animationDuration - Animation duration in ms\n   * @property {string} filterMode - Filter mode ('OR' or 'AND')\n   * @property {string} groupMode - Group filter mode ('OR' or 'AND')\n   * @property {string[]} searchKeys - Data attributes to search in\n   * @property {number} debounceTime - Search debounce delay in ms\n   * @property {boolean} debug - Enable debug mode\n   * @property {string} logLevel - Log level\n   * @property {string} dateFormat - Date format\n   * @property {Object} counter - Counter-related options\n   * @property {Object} styles - Style-related options\n   * @property {boolean} responsive - Enable responsive mode\n   * @property {boolean} preserveState - Preserve state between sessions\n   * @property {number} stateExpiry - State expiry time in milliseconds\n   * @property {boolean} observeDOM - Observe DOM changes\n   */\n\n  /**\n   * @type {AFSOptions}\n   */\n  static defaults = {\n    // Selectors\n    containerSelector: \".afs-filter-container\",\n    itemSelector: \".afs-filter-item\",\n    filterButtonSelector: \".afs-btn-filter\",\n    filterDropdownSelector: \".afs-filter-dropdown\",\n    searchInputSelector: \".afs-filter-search\",\n    counterSelector: \".afs-filter-counter\",\n    sortButtonSelector: \".afs-btn-sort\",\n\n    // Classes\n    activeClass: \"active\",\n    hiddenClass: \"hidden\",\n    activeSortClass: \"sort-active\",\n    transitionClass: \"afs-transition\",\n\n    // Filtering\n    filterMode: \"OR\",\n    groupMode: \"AND\",\n    searchKeys: [\"title\"],\n    debounceTime: 300,\n\n    // Debug\n    debug: false,\n    logLevel: \"info\",\n\n    // Lifecycle and state\n    responsive: true,\n    preserveState: false,\n    stateExpiry: 86400000, // 24 hours in milliseconds\n    observeDOM: false,\n\n    // Date handling\n    dateFormat: \"YYYY-MM-DD\",\n\n    counter: {\n      template: \"Showing {visible} of {total}\",\n      showFiltered: true,\n      filteredTemplate: \"({filtered} filtered)\",\n      noResultsTemplate: \"No items found\",\n      formatter: (num) => num.toLocaleString(),\n    },\n\n    // Styles\n    styles: {\n      slider: {\n        // Add new UI options\n        ui: {\n          showHistogram: false,\n          bins: 10, // Number of bins for histogram\n          track: {\n            radius: \"0\", // Button radius\n            background: \"#e5e7eb\", // Track color\n          },\n          selected: {\n            background: \"#000\", // Selected color\n          },\n          thumb: {\n            radius: \"50%\", // Button radius\n            size: \"16px\", // Button size\n            background: \"#000\", // Button color\n          },\n          histogram: {\n            background: \"#e5e7eb\", // Histogram background\n            bar: {\n              background: \"#000\", // Bar color\n            },\n          },\n        },\n      },\n      pagination: {\n        ui: {\n          button: {\n            background: \"transparent\",\n            border: \"1px solid #000\",\n            borderRadius: \"4px\",\n            padding: \"8px 12px\",\n            color: \"#000\",\n            active: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n            hover: {\n              background: \"#000\",\n              color: \"#fff\",\n            },\n          },\n        },\n      },\n      colors: {\n        primary: \"#000\",\n        background: \"#e5e7eb\",\n        text: \"#000\",\n        textHover: \"#fff\",\n      },\n    },\n\n    // Slider\n    slider: {\n      containerClass: \"afs-range-slider\",\n      trackClass: \"afs-range-track\",\n      thumbClass: \"afs-range-thumb\",\n      valueClass: \"afs-range-value\",\n      selectedClass: \"afs-range-selected\",\n    },\n\n    // Pagination\n    pagination: {\n      enabled: false,\n      itemsPerPage: 10,\n      container: \".afs-pagination-container\",\n      pageButtonClass: \"afs-page-button\",\n      activePageClass: \"afs-page-active\",\n      containerClass: \"afs-pagination\",\n      scrollToTop: false,\n      scrollOffset: 50,\n      scrollBehavior: \"smooth\", // or 'auto' for instant scroll\n    },\n\n    // Animation\n    animation: {\n      type: \"fade\",\n      duration: 300,\n      easing: \"ease-out\",\n      inClass: \"afs-animation-enter\",\n      outClass: \"afs-animation-leave\",\n    },\n  };\n\n  /**\n   * Create Options instance\n   * @param {Object} userOptions - User-provided options to override defaults\n   * @throws {Error} If required options are missing or invalid\n   */\n  constructor(userOptions = {}) {\n    this.options = this.mergeOptions(Options.defaults, userOptions);\n    this.initializeStyles();\n    this.validate();\n  }\n\n  /**\n   * Initialize styles with defaults\n   * @private\n   */\n  initializeStyles() {\n    const defaultStyles = Options.defaults.styles;\n    const currentStyles = this.options.styles || {};\n\n    this.options.styles = this.mergeOptions(defaultStyles, currentStyles);\n\n    // Ensure colors object exists and has all required properties\n    this.options.styles.colors = {\n      ...defaultStyles.colors,\n      ...(currentStyles.colors || {}),\n    };\n  }\n\n  /**\n   * Deep merge options\n   * @private\n   * @param {Object} target - Target object\n   * @param {Object} source - Source object\n   * @returns {Object} Merged options\n   */\n  mergeOptions(target, source) {\n    const result = { ...target };\n\n    for (const key in source) {\n      if (\n        source[key] !== null &&\n        typeof source[key] === \"object\" &&\n        !Array.isArray(source[key])\n      ) {\n        // If the key doesn't exist in target or isn't an object, create/override it\n        if (!target[key] || typeof target[key] !== \"object\") {\n          result[key] = {};\n        }\n        // Recursively merge nested objects\n        result[key] = this.mergeOptions(result[key], source[key]);\n      } else if (source[key] !== undefined) {\n        // Only override if the source value is defined\n        result[key] = source[key];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate options\n   * @private\n   * @throws {Error} If options are invalid\n   */\n  validate() {\n    // Required selectors\n    const requiredSelectors = [\"containerSelector\", \"itemSelector\"];\n    for (const selector of requiredSelectors) {\n      if (typeof this.options[selector] !== \"string\") {\n        throw new Error(`${selector} must be a string`);\n      }\n    }\n\n    // Animation duration\n    if (\n      typeof this.options.animation?.duration !== \"number\" ||\n      this.options.animation?.duration < 0\n    ) {\n      throw new Error(\"animation.duration must be a positive number\");\n    }\n\n    // Filter mode\n    if (![\"OR\", \"AND\"].includes(this.options.filterMode.toUpperCase())) {\n      throw new Error('filterMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Group mode\n    if (![\"OR\", \"AND\"].includes(this.options.groupMode.toUpperCase())) {\n      throw new Error('groupMode must be either \"OR\" or \"AND\"');\n    }\n\n    // Search keys\n    if (\n      !Array.isArray(this.options.searchKeys) ||\n      this.options.searchKeys.length === 0\n    ) {\n      throw new Error(\"searchKeys must be a non-empty array\");\n    }\n\n    // Counter validation\n    if (this.options.counter) {\n      if (typeof this.options.counter.template !== \"string\") {\n        throw new Error(\"counter.template must be a string\");\n      }\n      if (typeof this.options.counter.showFiltered !== \"boolean\") {\n        this.options.counter.showFiltered = true; // Set default\n      }\n      if (typeof this.options.counter.formatter !== \"function\") {\n        this.options.counter.formatter = (num) => num.toLocaleString(); // Set default\n      }\n    } else {\n      this.options.counter = { ...Options.defaults.counter }; // Set defaults if missing\n    }\n  }\n\n  /**\n   * Get option value\n   * @param {string} path - Dot notation path to option\n   * @returns {any} Option value\n   */\n  get(path) {\n    return path.split(\".\").reduce((obj, key) => obj?.[key], this.options);\n  }\n\n  /**\n   * Set option value\n   * @param {string} path - Dot notation path to option\n   * @param {any} value - New value\n   */\n  set(path, value) {\n    const parts = path.split(\".\");\n    const last = parts.pop();\n    const target = parts.reduce((obj, key) => {\n      if (!(key in obj)) obj[key] = {};\n      return obj[key];\n    }, this.options);\n\n    target[last] = value;\n    this.validate();\n  }\n\n  /**\n   * Update multiple options\n   * @param {Object} updates - Options to update\n   */\n  update(updates) {\n    this.options = this.mergeOptions(this.options, updates);\n    this.validate();\n  }\n\n  /**\n   * Reset options to defaults\n   */\n  reset() {\n    this.options = { ...Options.defaults };\n  }\n\n  /**\n   * Export options\n   * @returns {Object} Current options\n   */\n  export() {\n    return { ...this.options };\n  }\n}\n","/**\n * @fileoverview State management for AFS\n */\n\nexport class State {\n  constructor() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n\n  /**\n   * Get current state\n   * @returns {Object} Current state\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Update state\n   * @param {string} path - Dot notation path to update\n   * @param {any} value - New value\n   */\n  setState(path, value) {\n    const parts = path.split('.');\n    let current = this.state;\n    \n    for (let i = 0; i < parts.length - 1; i++) {\n      if (!(parts[i] in current)) {\n        current[parts[i]] = {};\n      }\n      current = current[parts[i]];\n    }\n    \n    current[parts[parts.length - 1]] = value;\n  }\n\n  /**\n   * Export state\n   * @returns {Object} Exportable state\n   */\n  export() {\n    return {\n      filters: {\n        current: Array.from(this.state.filters.current),\n        groups: Array.from(this.state.filters.groups.entries()),\n        ranges: Array.from(this.state.filters.ranges.entries()),\n        dateRanges: Array.from(this.state.filters.dateRanges.entries()),\n        mode: this.state.filters.mode,\n        groupMode: this.state.filters.groupMode\n      },\n      search: { ...this.state.search },\n      sort: { ...this.state.sort },\n      pagination: { ...this.state.pagination }\n    };\n  }\n\n  /**\n   * Import state\n   * @param {Object} importedState - State to import\n   */\n  import(importedState) {\n    if (importedState.filters) {\n      this.state.filters.current = new Set(importedState.filters.current);\n      this.state.filters.groups = new Map(importedState.filters.groups);\n      this.state.filters.ranges = new Map(importedState.filters.ranges);\n      this.state.filters.dateRanges = new Map(importedState.filters.dateRanges);\n      this.state.filters.mode = importedState.filters.mode;\n      this.state.filters.groupMode = importedState.filters.groupMode;\n    }\n\n    if (importedState.search) {\n      this.state.search = { ...importedState.search };\n    }\n\n    if (importedState.sort) {\n      this.state.sort = { ...importedState.sort };\n    }\n\n    if (importedState.pagination) {\n      this.state.pagination = { ...importedState.pagination };\n    }\n  }\n\n  /**\n   * Reset state to initial values\n   */\n  reset() {\n    this.state = {\n      filters: {\n        current: new Set(['*']),\n        groups: new Map(),\n        ranges: new Map(),\n        dateRanges: new Map(),\n        mode: 'OR',\n        groupMode: 'OR'\n      },\n      search: {\n        query: '',\n        keys: ['title']\n      },\n      sort: {\n        orders: {},\n        current: null\n      },\n      items: {\n        visible: new Set(),\n        total: 0\n      },\n      pagination: {\n        currentPage: 1,\n        itemsPerPage: 10,\n        totalPages: 0\n      }\n    };\n  }\n}","/**\n * @fileoverview Style management for AFS\n */\n\nexport class StyleManager {\n  /**\n   * @param {import('../core/Options').Options} options - Options instance\n   */\n  constructor(options) {\n    this.options = options;\n    this.styleElement = null;\n  }\n\n  /**\n   * Create base styles with option colors\n   * @private\n   * @returns {string} CSS styles\n   */\n  createBaseStyles() {\n    const hiddenClass = this.options.get(\"hiddenClass\") || \"hidden\";\n    const itemSelector = this.options.get(\"itemSelector\") || \".afs-filter-item\";\n    const filterButtonSelector =\n      this.options.get(\"filterButtonSelector\") || \".afs-btn-filter\";\n    const activeClass = this.options.get(\"activeClass\") || \"active\";\n    const animationDuration = this.options.get(\"animation.duration\") || \"300ms\";\n    const animationEasing = this.options.get(\"animation.easing\") || \"ease-out\";\n    const filterDropdownSelector =\n      this.options.get(\"filterDropdownSelector\") || \".afs-filter-dropdown\";\n\n    // Get colors from options\n    const primaryColor = this.options.get(\"styles.colors.primary\") || \"#000\";\n    const backgroundColor =\n      this.options.get(\"styles.colors.background\") || \"#e5e7eb\";\n    const textColor = this.options.get(\"styles.colors.text\") || \"#000\";\n    const textHoverColor = this.options.get(\"styles.colors.textHover\") || \"#fff\";\n\n    // Create rgba version of primary color for focus shadow\n    const rgbValues = primaryColor.match(\n      /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\n    );\n    const rgbaColor = rgbValues\n      ? `rgba(${parseInt(rgbValues[1], 16)}, ${parseInt(\n          rgbValues[2],\n          16\n        )}, ${parseInt(rgbValues[3], 16)}, 0.2)`\n      : \"rgba(0, 0, 0, 0.2)\";\n\n    // Create SVG arrow with dynamic color\n    const arrowColor = encodeURIComponent(textColor);\n    const arrowSvg = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='${arrowColor}' d='M6 8L1 3h10z'/%3E%3C/svg%3E`;\n    const arrowSvgWhite = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='${textHoverColor}' d='M6 8L1 3h10z'/%3E%3C/svg%3E`;\n\n    return `\n    /* Hidden state */\n    .${hiddenClass} {\n      display: none !important;\n    }\n\n    /* Filterable items */\n    ${itemSelector} {\n      opacity: 1;\n      transform: scale(1);\n      filter: blur(0);\n      transition: opacity ${animationDuration} ${animationEasing},\n                  transform ${animationDuration} ${animationEasing},\n                  filter ${animationDuration} ${animationEasing};\n    }\n\n    ${itemSelector}.${hiddenClass} {\n      opacity: 0;\n      transform: scale(0.95);\n      filter: blur(5px);\n    }\n\n    /* Filter controls container */\n    .afs-filter-controls {\n      display: flex;\n      gap: 10px;\n      flex-wrap: wrap;\n      align-items: center;\n      margin: 10px 0;\n    }\n\n    /* Common styles for both buttons and dropdowns */\n    ${filterButtonSelector},\n    ${filterDropdownSelector} {\n      appearance: none;\n      -webkit-appearance: none;\n      padding: 8px 16px;\n      border: 1px solid ${backgroundColor};\n      border-radius: 4px;\n      font-size: 14px;\n      background-color: white;\n      color: ${textColor};\n      cursor: pointer;\n      transition: all ${animationDuration} ${animationEasing};\n      min-height: 40px;\n      line-height: 1.5;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      white-space: nowrap;\n      margin: 0;\n    }\n\n    /* Hover state */\n    ${filterButtonSelector}:hover,\n    ${filterDropdownSelector}:hover {\n      border-color: ${primaryColor};\n      background-color: ${primaryColor};\n      color: ${textHoverColor};\n    }\n\n    /* Focus state */\n    ${filterButtonSelector}:focus,\n    ${filterDropdownSelector}:focus {\n      outline: none;\n      border-color: ${primaryColor};\n      box-shadow: 0 0 0 2px ${rgbaColor};\n    }\n\n    /* Active state */\n    ${filterButtonSelector}.${activeClass} {\n      background-color: ${primaryColor};\n      border-color: ${primaryColor};\n      color: ${textHoverColor};\n    }\n\n    /* Disabled state */\n    ${filterButtonSelector}:disabled,\n    ${filterDropdownSelector}:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n      background-color: ${backgroundColor};\n    }\n\n    /* Dropdown specific styles */\n    ${filterDropdownSelector} {\n      padding-right: 32px;\n      position: relative;\n      background-image: url(\"${arrowSvg}\");\n      background-repeat: no-repeat;\n      background-position: right 12px center;\n      text-align: left;\n    }\n\n    ${filterDropdownSelector}:hover {\n      background-image: url(\"${arrowSvgWhite}\");\n    }\n\n    /* Mobile optimization */\n    @media (max-width: 768px) {\n      .afs-filter-controls {\n        flex-direction: column;\n        align-items: stretch;\n      }\n\n      ${filterButtonSelector},\n      ${filterDropdownSelector} {\n        width: 100%;\n        justify-content: flex-start;\n      }\n    }\n  `;\n  }\n\n  /**\n   * Add global transition styles\n   * @private\n   */\n  addTransitionStyles() {\n    const style = document.createElement(\"style\");\n    style.textContent = `\n      .afs-transition {\n          transition: opacity 300ms ease-in-out,\n                      transform 300ms ease-in-out,\n                      filter 300ms ease-in-out !important;\n      }\n      .afs-hidden {\n          opacity: 0;\n          pointer-events: none;\n      }\n  `;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Create range slider styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createRangeStyles() {\n    const styles = this.options.get(\"styles\");\n    const sliderOptions = this.options.get(\"slider\") || {};\n    const sliderStyles = styles.slider;\n    const colors = styles.colors;\n\n    const containerClass = sliderOptions.containerClass || \"afs-range-slider\";\n    const trackClass = sliderOptions.trackClass || \"afs-range-track\";\n    const thumbClass = sliderOptions.thumbClass || \"afs-range-thumb\";\n    const valueClass = sliderOptions.valueClass || \"afs-range-value\";\n    const selectedClass = sliderOptions.selectedClass || \"afs-range-selected\";\n\n    return `\n    /* Range Slider Styles */\n    .${containerClass} {\n      position: relative;\n      width: auto;\n      height: 40px;\n      margin: 10px 0;\n      padding: 0 8px;\n    }\n\n    .${trackClass} {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      width: 100%;\n      height: 4px;\n      background: ${sliderStyles.ui.track.background || colors.background};\n      border-radius: ${sliderStyles.ui.track.radius || \"0\"};\n    }\n\n    .${thumbClass} {\n      position: absolute;\n      top: 50%;\n      width: ${sliderStyles.ui.thumb.size || \"16px\"};\n      height: ${sliderStyles.ui.thumb.size || \"16px\"};\n      background: ${sliderStyles.ui.thumb.background || colors.primary};\n      border-radius: ${sliderStyles.ui.thumb.radius || \"50%\"};\n      transform: translate(-50%, -50%);\n      cursor: pointer;\n      z-index: 2;\n    }\n\n    .${valueClass} {\n      position: absolute;\n      top: -20px;\n      transform: translateX(-50%);\n      font-size: 10px;\n      color: ${colors.text};\n    }\n\n    .${selectedClass} {\n      position: absolute;\n      height: 4px;\n      background: ${sliderStyles.ui.selected.background || colors.primary};\n      top: 50%;\n      transform: translateY(-50%);\n    }\n\n    /* Histogram Styles */\n    .afs-histogram {\n      position: absolute;\n      bottom: 22px;\n      left: 8px;\n      right: 8px;\n      height: 20px;\n      display: flex;\n      align-items: flex-end;\n      gap: 1px;\n      opacity: 0.5;\n    }\n\n    .afs-histogram-bar {\n      flex: 1;\n      background-color: ${\n        sliderStyles.ui.histogram.background || colors.background\n      };\n      min-height: 4px;\n      transition: background-color 0.2s ease;\n    }\n\n    .afs-histogram-bar.active {\n      background-color: ${\n        sliderStyles.ui.histogram.bar.background || colors.primary\n      };\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createDateStyles() {\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n    .afs-date-range-container {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 1rem;\n      margin: 10px 0;\n    }\n\n    .afs-date-input-wrapper {\n      flex: 1;\n    }\n\n    .afs-date-input-wrapper label {\n      display: block;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      margin-bottom: 0.5rem;\n    }\n\n    .afs-date-input {\n      width: 100%;\n      padding: 0.5rem;\n      border: 1px solid ${colors.background};\n      border-radius: 0.25rem;\n      font-size: 0.875rem;\n      color: ${colors.text};\n      transition: border-color 0.2s ease;\n    }\n\n    .afs-date-input:focus {\n      outline: none;\n      border-color: ${colors.primary};\n    }\n  `;\n  }\n\n  /**\n   * Create date filter styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createInputRangeStyles() {\n    const colors = this.options.get(\"styles\").colors;\n    return `\n        .afs-input-range-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 1rem;\n            margin: 10px 0;\n        }\n\n        .afs-input-wrapper {\n            flex: 1;\n        }\n\n        .afs-input-label {\n            display: block;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            margin-bottom: 0.5rem;\n        }\n\n        .afs-input {\n            width: 100%;\n            padding: 0.5rem;\n            border: 1px solid ${colors.background};\n            border-radius: 0.25rem;\n            font-size: 0.875rem;\n            color: ${colors.text};\n            transition: border-color 0.2s ease;\n        }\n\n        .afs-input:focus {\n            outline: none;\n            border-color: ${colors.primary};\n        }\n    `;\n  }\n\n  /**\n   * Apply all styles\n   * @public\n   */\n  applyStyles() {\n    try {\n      const styles = `\n      \n      /* Global transition styles */\n      ${this.addTransitionStyles()}\n\n      /* Base styles */\n      ${this.createBaseStyles()}\n\n      /* Range slider styles */\n      ${this.createRangeStyles()}\n\n      /* Date filter styles */\n      ${this.createDateStyles()}\n\n      /* Pagination styles */\n      ${this.createPaginationStyles()}\n\n      /* Search styles */\n      ${this.createSearchStyles()}\n\n      /* Input range styles */\n      ${this.createInputRangeStyles()}\n    `;\n\n      if (this.styleElement) {\n        this.styleElement.textContent = styles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = styles;\n        document.head.appendChild(this.styleElement);\n      }\n    } catch (error) {\n      console.error(\"Error applying styles:\", error);\n      const fallbackStyles = this.createBaseStyles();\n      if (this.styleElement) {\n        this.styleElement.textContent = fallbackStyles;\n      } else {\n        this.styleElement = document.createElement(\"style\");\n        this.styleElement.textContent = fallbackStyles;\n        document.head.appendChild(this.styleElement);\n      }\n    }\n  }\n\n  /**\n   * Create pagination styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createPaginationStyles() {\n    const styles = this.options.get(\"styles\");\n    const paginationOptions = this.options.get(\"pagination\") || {};\n    const colors = this.options.get(\"styles\").colors;\n\n    const containerClass = paginationOptions.containerClass || \"afs-pagination\";\n    const buttonClass = paginationOptions.pageButtonClass || \"afs-page-button\";\n    const activeClass = paginationOptions.activePageClass || \"afs-page-active\";\n\n    const paginationStyles = styles.pagination;\n\n    return `\n      .${containerClass} {\n        display: flex;\n        justify-content: center;\n        gap: 8px;\n        margin-top: 20px;\n      }\n\n      .${buttonClass} {\n        padding: ${paginationStyles.ui.button.padding || \"8px 12px\"};\n        border: ${\n          paginationStyles.ui.button.border || \"1px solid \" + colors.primary\n        };\n        border-radius: ${paginationStyles.ui.button.borderRadius || \"4px\"};\n        cursor: pointer;\n        transition: all 200ms ease-out;\n        background: ${paginationStyles.ui.button.background || \"transparent\"};\n        color: ${paginationStyles.ui.button.color || colors.primary};\n      }\n\n      .${buttonClass}:hover {\n        background: ${\n          paginationStyles.ui.button.hover.background || colors.primary\n        };\n        color: ${paginationStyles.ui.button.hover.color || \"white\"};\n      }\n\n      .${buttonClass}.${activeClass} {\n        background: ${\n          paginationStyles.ui.button.active.background || colors.primary\n        };\n        color: ${paginationStyles.ui.button.active.color || \"white\"};\n      }\n\n      .${buttonClass}:disabled {\n        opacity: 0.5;\n        cursor: not-allowed;\n      }\n    `;\n  }\n\n  /**\n   * Create search styles\n   * @private\n   * @returns {string} CSS styles\n   */\n  createSearchStyles() {\n    const searchClass = this.options.get(\"searchInputClass\") || \"afs-search\";\n    const colors = this.options.get(\"styles\").colors;\n\n    return `\n      .${searchClass} {\n        padding: 8px;\n        border: 1px solid ${colors.background};\n        border-radius: 4px;\n        width: 100%;\n        max-width: 300px;\n        transition: border-color 200ms ease-out;\n      }\n\n      .${searchClass}:focus {\n        outline: none;\n        border-color: ${colors.primary};\n      }\n    `;\n  }\n\n  /**\n   * Update styles\n   * @public\n   * @param {Object} newOptions - New style options\n   */\n  updateStyles(newOptions) {\n    this.options = newOptions;\n    this.applyStyles();\n  }\n\n  /**\n   * Remove styles\n   * @public\n   */\n  removeStyles() {\n    if (this.styleElement) {\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n}\n","/**\n * @fileoverview Event handling system for AFS\n */\n\nexport class EventEmitter {\n  constructor() {\n    this.events = new Map();\n    this.onceEvents = new Map();\n  }\n\n  /**\n   * Subscribe to an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventName, callback) {\n    if (!this.events.has(eventName)) {\n      this.events.set(eventName, new Set());\n    }\n\n    this.events.get(eventName).add(callback);\n\n    // Return unsubscribe function\n    return () => this.off(eventName, callback);\n  }\n\n  /**\n   * Subscribe to an event once\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventName, callback) {\n    const onceWrapper = (...args) => {\n      this.off(eventName, onceWrapper);\n      callback.apply(this, args);\n    };\n\n    if (!this.onceEvents.has(eventName)) {\n      this.onceEvents.set(eventName, new Map());\n    }\n\n    this.onceEvents.get(eventName).set(callback, onceWrapper);\n    return this.on(eventName, onceWrapper);\n  }\n\n  /**\n   * Unsubscribe from an event\n   * @param {string} eventName - Name of the event\n   * @param {Function} callback - Callback function\n   */\n  off(eventName, callback) {\n    // Remove from regular events\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).delete(callback);\n\n      // Cleanup if no more listeners\n      if (this.events.get(eventName).size === 0) {\n        this.events.delete(eventName);\n      }\n    }\n\n    // Remove from once events\n    if (this.onceEvents.has(eventName)) {\n      const onceWrapper = this.onceEvents.get(eventName).get(callback);\n      if (onceWrapper) {\n        this.events.get(eventName)?.delete(onceWrapper);\n        this.onceEvents.get(eventName).delete(callback);\n      }\n\n      // Cleanup if no more once listeners\n      if (this.onceEvents.get(eventName).size === 0) {\n        this.onceEvents.delete(eventName);\n      }\n    }\n  }\n\n  /**\n   * Emit an event\n   * @param {string} eventName - Name of the event\n   * @param {...any} args - Arguments to pass to callbacks\n   */\n  emit(eventName, ...args) {\n    if (this.events.has(eventName)) {\n      this.events.get(eventName).forEach(callback => {\n        try {\n          callback.apply(this, args);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventName}:`, error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all event listeners\n   * @param {string} [eventName] - Optional event name to clear specific event\n   */\n  removeAllListeners(eventName) {\n    if (eventName) {\n      this.events.delete(eventName);\n      this.onceEvents.delete(eventName);\n    } else {\n      this.events.clear();\n      this.onceEvents.clear();\n    }\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event\n   * @returns {number} Number of listeners\n   */\n  listenerCount(eventName) {\n    return (this.events.get(eventName)?.size || 0) + \n           (this.onceEvents.get(eventName)?.size || 0);\n  }\n}","/**\n * @fileoverview Animation management for AFS\n */\n\nexport class Animation {\n  constructor(afs) {\n    this.afs = afs;\n    this.options = this.afs.options;\n    this.animations = {\n      fade: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.95)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      slide: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(20px)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n      },\n      scale: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.8)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      rotate: {\n        in: {\n          opacity: 1,\n          transform: \"rotate(0deg) scale(1)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"rotate(90deg) scale(0.9)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      flip: {\n        in: {\n          opacity: 1,\n          transform: \"rotateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"rotateY(180deg)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      zoom: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1.2)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.8)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      bounce: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          animation: \"bounce 1s cubic-bezier(0.68, -0.55, 0.27, 1.55)\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(-20px)\",\n          animation: \"bounceOut 1s ease-out\",\n        },\n      },\n      blur: {\n        in: {\n          opacity: 1,\n          filter: \"blur(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          filter: \"blur(5px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      skew: {\n        in: {\n          opacity: 1,\n          transform: \"skew(0deg)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"skew(10deg)\",\n          transitionTimingFunction: \"ease-in-out\",\n        },\n      },\n      slideInLeft: {\n        in: {\n          opacity: 1,\n          transform: \"translateX(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateX(-100%)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      slideInRight: {\n        in: {\n          opacity: 1,\n          transform: \"translateX(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateX(100%)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      fadeInUp: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(10px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      fadeInDown: {\n        in: {\n          opacity: 1,\n          transform: \"translateY(0)\",\n          transitionTimingFunction: \"ease-in\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"translateY(-10px)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n      bounceIn: {\n        in: {\n          opacity: 1,\n          transform: \"scale(1.05)\",\n          transitionTimingFunction: \"cubic-bezier(0.68, -0.55, 0.27, 1.55)\",\n        },\n        out: {\n          opacity: 0,\n          transform: \"scale(0.9)\",\n          transitionTimingFunction: \"ease-out\",\n        },\n      },\n    };\n  }\n\n  /**\n   * Apply show animation\n   * @param {HTMLElement} item - Item to animate\n   * @param {string} animationType - Type of animation\n   */\n  applyShowAnimation(item, animationType = \"fade\") {\n    const animation =\n      this.animations[animationType]?.in || this.animations.fade.in;\n\n    // Ensure item has transition class\n    item.classList.add(\"afs-transition\");\n\n    // Set initial state\n    item.style.display = \"\";\n    item.style.visibility = \"visible\";\n\n    // Force reflow\n    void item.offsetHeight;\n\n    // Add animation properties\n    requestAnimationFrame(() => {\n      Object.assign(item.style, {\n        opacity: \"0\",\n        transform: \"scale(0.95)\",\n        display: \"\",\n      });\n\n      // Force reflow\n      void item.offsetHeight;\n\n      // Apply final state\n      requestAnimationFrame(() => {\n        Object.assign(item.style, animation);\n      });\n    });\n  }\n\n  /**\n   * Apply hide animation\n   * @param {HTMLElement} item - Item to animate\n   * @param {string} animationType - Type of animation\n   */\n  applyHideAnimation(item, animationType = \"fade\") {\n    const animation =\n      this.animations[animationType]?.out || this.animations.fade.out;\n\n    // Ensure item has transition class\n    item.classList.add(\"afs-transition\");\n\n    // Start animation\n    requestAnimationFrame(() => {\n      Object.assign(item.style, animation);\n\n      const handleTransitionEnd = () => {\n        if (!this.afs.state.getState().items.visible.has(item)) {\n          item.style.display = \"none\";\n          item.style.visibility = \"hidden\";\n        }\n        item.removeEventListener(\"transitionend\", handleTransitionEnd);\n      };\n\n      item.addEventListener(\"transitionend\", handleTransitionEnd, {\n        once: true,\n      });\n    });\n  }\n\n  /**\n   * Update animation settings\n   * @param {Object} options - Animation options\n   */\n  updateOptions(options) {\n    const duration = options.duration || 300;\n    const timing = options.timing || \"ease-in-out\";\n\n    const style = document.querySelector(\".afs-transition\");\n    if (style) {\n      style.textContent = `\n              .afs-transition {\n                  transition: opacity ${duration}ms ${timing},\n                              transform ${duration}ms ${timing},\n                              filter ${duration}ms ${timing} !important;\n              }\n          `;\n    }\n  }\n\n  /**\n   * Set animation type\n   * @param {string} animationType - Animation type to set\n   */\n  setAnimation(animationType) {\n    if (this.animations[animationType]) {\n      this.afs.options.set(\"animation.type\", animationType);\n    }\n  }\n}\n","/**\n * @fileoverview Filter functionality for AFS\n */\n\nimport { Animation } from '../styles/Animation.js';\n\nexport class Filter {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.animation = new Animation(afs);\n    this.filterButtons = new Map();\n    this.activeFilters = new Set([\"*\"]);\n    this.currentFilters = new Set([\"*\"]);\n    this.filterGroups = new Map();\n    this.sortOrders = new Map();\n    this.setupFilters();\n  }\n\n  /**\n   * Setup filters\n   * @private\n   */\n  setupFilters() {\n    this.afs.logger.debug(\"Setting up filters\");\n    const filterSelector = this.afs.options.get(\"filterButtonSelector\");\n    if (!filterSelector) return;\n\n    // Initialize filter buttons\n    document.querySelectorAll(filterSelector).forEach((button) => {\n      const filterValue = button.dataset.filter;\n      if (!filterValue) {\n        this.afs.logger.warn(\n          \"Filter button missing data-filter attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.filterButtons.set(button, filterValue);\n      this.bindFilterEvent(button);\n    });\n\n    // Initialize filter dropdowns\n    const filterDropdownSelector = this.afs.options.get(\"filterDropdownSelector\");\n    if (filterDropdownSelector) {\n      document.querySelectorAll(filterDropdownSelector).forEach((dropdown) => {\n        this.bindDropdownEvent(dropdown);\n      });\n    }\n\n    this.afs.logger.debug(\"Filters initialized\");\n  }\n\n  /**\n   * Set filter logic mode\n   * @public\n   * @param {string|boolean} logic - 'AND'/'OR' or true/false (true = AND, false = OR)\n   */\n  setLogic(logic) {\n    if (typeof logic === \"boolean\") {\n      // Handle boolean input (true = AND, false = OR)\n      this.afs.options.set(\"filterMode\", logic ? \"AND\" : \"OR\");\n    } else {\n      const mode = logic.toUpperCase();\n      if ([\"OR\", \"AND\"].includes(mode)) {\n        this.afs.options.set(\"filterMode\", mode);\n      } else {\n        this.afs.logger.warn(`Invalid filter mode: ${logic}`);\n        return;\n      }\n    }\n\n    this.afs.logger.debug(\n      `Filter logic set to: ${this.afs.options.get(\"filterMode\")}`,\n    );\n    this.applyFilters();\n  }\n\n  /**\n * Clear all filters and reset selects\n * @public\n */\nclearAllFilters() {\n  this.afs.logger.debug(\"Clearing all filters and resetting selects\");\n\n  // Reset filters\n  this.activeFilters.clear();\n  this.activeFilters.add(\"*\");\n\n  // Reset filter buttons\n  this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n  });\n\n  // Reset filter groups\n  this.filterGroups.clear();\n\n  // Find and activate \"all\" button if exists\n  const allButton = this.findAllButton();\n  if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n  }\n\n  // Reset all select elements to their default values\n  const filterDropdownSelector = this.afs.options.get(\"filterDropdownSelector\") || '.afs-filter-dropdown';\n  document.querySelectorAll(filterDropdownSelector).forEach(select => {\n      // Get the filter type from the select's data or ID\n      const filterType = select.getAttribute('data-filter-type') || \n                       select.id.replace('Filter', '').toLowerCase();\n\n      // Find the \"all\" option for this filter type\n      const allOption = Array.from(select.options).find(option => {\n          const value = option.value;\n          return value === '*' || \n                 value === `${filterType}:all` || \n                 value.endsWith(':all');\n      });\n\n      if (allOption) {\n          // Set value and dispatch change event\n          select.value = allOption.value;\n          \n          // Create and dispatch change event\n          const event = new Event('change', {\n              bubbles: true,\n              cancelable: true,\n          });\n          select.dispatchEvent(event);\n      } else {\n          // If no \"all\" option found, set to first option\n          select.selectedIndex = 0;\n          \n          // Create and dispatch change event\n          const event = new Event('change', {\n              bubbles: true,\n              cancelable: true,\n          });\n          select.dispatchEvent(event);\n      }\n  });\n\n  // Clear sorting\n  this.sortOrders.clear();\n\n  // Apply changes and update UI\n  this.applyFilters();\n  this.afs.urlManager.updateURL();\n  this.afs.emit(\"filtersCleared\");\n\n  this.afs.logger.debug(\"All filters cleared and selects reset\");\n}\n\n  /**\n   * Bind filter event to dropdown\n   * @private\n   * @param {HTMLSelectElement} dropdown - Filter dropdown\n   */\n  bindDropdownEvent(dropdown) {\n    this.afs.logger.debug(\"Binding filter event to dropdown:\", dropdown);\n\n    dropdown.addEventListener(\"change\", () => {\n        const selectedValue = dropdown.value;\n        const [filterType] = selectedValue.split(':');\n\n        // Only clear \"*\" if we're adding a specific filter\n        if (selectedValue !== '*' && !selectedValue.endsWith(':all')) {\n            this.activeFilters.delete('*');\n        }\n\n        // Remove existing filters of the same type\n        this.activeFilters.forEach(existingFilter => {\n            if (existingFilter.startsWith(`${filterType}:`)) {\n                this.activeFilters.delete(existingFilter);\n            }\n        });\n\n        // Handle filter addition\n        if (selectedValue === '*' || selectedValue.endsWith(':all')) {\n            // If selecting 'all' for a type, just remove that type's filters\n            // If no filters remain, add '*'\n            if (this.activeFilters.size === 0) {\n                this.activeFilters.add('*');\n            }\n        } else {\n            // Add the new filter\n            this.activeFilters.add(selectedValue);\n        }\n\n        this.applyFilters();\n        this.afs.urlManager.updateURL();\n\n        // Emit event\n        this.afs.emit(\"filterChanged\", {\n            type: filterType,\n            value: selectedValue,\n            activeFilters: Array.from(this.activeFilters)\n        });\n    });\n}\n\n  /**\n   * Bind filter event to button\n   * @private\n   * @param {HTMLElement} button - Filter button\n   */\n  bindFilterEvent(button) {\n    this.afs.logger.debug(\"Binding filter event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const filterValue = this.filterButtons.get(button);\n\n      if (!filterValue) return;\n\n      if (filterValue === \"*\") {\n        this.resetFilters();\n      } else {\n        this.toggleFilter(filterValue, button);\n      }\n\n      // Update the URL after filter change\n      this.afs.urlManager.updateURL();\n    });\n  }\n\n  /**\n   * Reset filters to default state\n   * @public\n   */\n  resetFilters() {\n    this.afs.logger.debug(\"Resetting filters\");\n  \n    // Clear existing filters\n    this.activeFilters.clear();\n    \n    // Reset button states\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n  \n    // Add \"*\" filter and activate \"all\" button\n    this.activeFilters.add(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n  \n    // Clear filter groups\n    this.filterGroups.clear();\n  \n    // Create a promise to track animations\n    const animationPromises = [];\n  \n    // Show all items with animation\n    this.afs.items.forEach(item => {\n      const promise = new Promise(resolve => {\n        item.classList.remove(this.afs.options.get('hiddenClass'));\n        item.style.display = 'block'; // Ensure item is visible\n        \n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(item, this.afs.options.get(\"animation.type\"));\n          // Resolve after animation duration\n          setTimeout(resolve, this.afs.options.get(\"animation.duration\") || 300);\n        });\n      });\n      animationPromises.push(promise);\n    });\n  \n    // Update state after all items are visible\n    const visibleItems = new Set(this.afs.items);\n    this.afs.state.setState(\"items.visible\", visibleItems);\n  \n    // Wait for all animations to complete\n    Promise.all(animationPromises).then(() => {\n      // Update counter\n      this.afs.updateCounter();\n      \n      // Update URL\n      this.afs.urlManager.updateURL();\n  \n      // Emit event\n      this.afs.emit(\"filtersReset\");\n    });\n  }\n\n  /**\n   * Find \"all\" filter button\n   * @private\n   * @returns {HTMLElement|null} All button\n   */\n  findAllButton() {\n    for (const [button, value] of this.filterButtons.entries()) {\n      if (value === \"*\") return button;\n    }\n\n    return null;\n  }\n\n  handleFilterClick(button) {\n    const filterValue = button.dataset.filter;\n    this.afs.logger.debug(\"Filter clicked:\", filterValue);\n\n    if (filterValue === \"*\") {\n      this.resetFilters();\n    } else {\n      this.toggleFilter(filterValue, button);\n    }\n\n    this.filter();\n\n    // Call updateURL to reflect the new filter state in the URL\n    this.updateURL();\n  }\n\n  /**\n   * Toggle filter state\n   * @private\n   * @param {string} filterValue - Filter value\n   * @param {HTMLElement} button - Filter button\n   */\n  toggleFilter(filterValue, button) {\n    // Remove \"all\" filter\n    this.activeFilters.delete(\"*\");\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.remove(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Toggle filter\n    if (button.classList.contains(this.afs.options.get(\"activeClass\"))) {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.delete(filterValue);\n\n      // Reset to \"all\" if no filters active\n      if (this.activeFilters.size === 0) {\n        this.resetFilters();\n        return;\n      }\n    } else {\n      button.classList.add(this.afs.options.get(\"activeClass\"));\n      this.activeFilters.add(filterValue);\n    }\n\n    this.applyFilters();\n\n    // Emit event\n    this.afs.emit(\"filterToggled\", {\n      filter: filterValue,\n      activeFilters: Array.from(this.activeFilters),\n    });\n\n    this.afs.logger.debug(\"Filter toggled:\", filterValue);\n  }\n\n /**\n * Apply current filters\n * @public\n */\n applyFilters() {\n    const activeFilters = Array.from(this.activeFilters);\n    this.afs.logger.debug(\"Active filters:\", activeFilters);\n\n    const previouslyVisible = new Set(this.afs.state.getState().items.visible);\n    const visibleItems = new Set();\n\n    // First determine visibility\n    this.afs.items.forEach(item => {\n        if (this.activeFilters.has(\"*\") || this.itemMatchesFilters(item)) {\n            visibleItems.add(item);\n        }\n    });\n\n    // Update state before animations\n    this.afs.state.setState(\"items.visible\", visibleItems);\n\n    // Track animation promises\n    const animationPromises = [];\n\n    // Apply animations\n    this.afs.items.forEach(item => {\n        const promise = new Promise(resolve => {\n            if (visibleItems.has(item)) {\n                // Show item\n                item.classList.remove(this.afs.options.get('hiddenClass'));\n                requestAnimationFrame(() => {\n                    this.animation.applyShowAnimation(item, this.afs.options.get(\"animation.type\"));\n                    setTimeout(resolve, parseFloat(this.afs.options.get(\"animation.duration\")) || 300);\n                });\n            } else {\n                // Hide item\n                item.classList.add(this.afs.options.get('hiddenClass'));\n                requestAnimationFrame(() => {\n                    this.animation.applyHideAnimation(item, this.afs.options.get(\"animation.type\"));\n                    setTimeout(resolve, parseFloat(this.afs.options.get(\"animation.duration\")) || 300);\n                });\n            }\n        });\n        animationPromises.push(promise);\n    });\n\n    // Handle completion\n    Promise.all(animationPromises).then(() => {\n        // Ensure visible items remain visible\n        visibleItems.forEach(item => {\n            item.style.display = 'block';\n            item.style.opacity = '1';\n        });\n\n        // Update UI\n        this.afs.updateCounter();\n        this.afs.urlManager.updateURL();\n\n        this.afs.emit(\"filtersApplied\", {\n            activeFilters,\n            visibleItems: visibleItems.size,\n        });\n    });\n\n    // Emit visibility change events\n    this.emitFilterEvents(previouslyVisible, visibleItems);\n}\n\n  /**\n   * Check if item matches current filters\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {boolean} Whether item matches filters\n   */\n  itemMatchesFilters(item) {\n    // Show all items if only \"*\" is active\n    if (this.activeFilters.has(\"*\")) {\n        return true;\n    }\n\n    // Get item categories\n    const itemCategories = item.dataset.categories?.split(\" \") || [];\n\n    // Group active filters by type\n    const filtersByType = {};\n    this.activeFilters.forEach(filter => {\n        const [type, value] = filter.split(':');\n        if (!filtersByType[type]) {\n            filtersByType[type] = new Set();\n        }\n        filtersByType[type].add(value);\n    });\n\n    // Item must match at least one value from each filter type\n    return Object.entries(filtersByType).every(([type, values]) => {\n        // Check if there's any match for this filter type\n        return Array.from(values).some(value => {\n            const filterToMatch = `${type}:${value}`;\n            return itemCategories.includes(filterToMatch);\n        });\n    });\n}\n\n  /**\n   * Check if item matches any active filter (OR mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches any filter\n   */\n  itemMatchesAnyFilter(itemCategories) {\n    return Array.from(this.activeFilters).some((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches all active filters (AND mode)\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches all filters\n   */\n  itemMatchesAllFilters(itemCategories) {\n    return Array.from(this.activeFilters).every((filter) => {\n      if (filter === \"*\") return true;\n      return itemCategories.has(filter);\n    });\n  }\n\n  /**\n   * Check if item matches filter groups\n   * @private\n   * @param {Set} itemCategories - Item's categories\n   * @returns {boolean} Whether item matches groups\n   */\n  itemMatchesFilterGroups(itemCategories) {\n    const groupMatches = Array.from(this.filterGroups.values()).map((group) => {\n      if (group.filters.size === 0) return true;\n\n      return group.operator === \"OR\"\n        ? Array.from(group.filters).some((filter) => itemCategories.has(filter))\n        : Array.from(group.filters).every((filter) =>\n            itemCategories.has(filter),\n          );\n    });\n\n    return this.afs.options.get(\"groupMode\") === \"OR\"\n      ? groupMatches.some((matches) => matches)\n      : groupMatches.every((matches) => matches);\n  }\n\n  /**\n   * Emit filter-related events\n   * @private\n   * @param {Set} previouslyVisible - Previously visible items\n   * @param {Set} nowVisible - Currently visible items\n   */\n  emitFilterEvents(previouslyVisible, nowVisible) {\n    // Determine added and removed items\n    const added = new Set(\n      [...nowVisible].filter((item) => !previouslyVisible.has(item)),\n    );\n    const removed = new Set(\n      [...previouslyVisible].filter((item) => !nowVisible.has(item)),\n    );\n\n    // Emit filter event\n    this.afs.emit(\"filter\", {\n      activeFilters: Array.from(this.activeFilters),\n      visibleItems: nowVisible.size,\n      added: added.size,\n      removed: removed.size,\n    });\n\n    // Emit specific events for added/removed items\n    if (added.size > 0) {\n      this.afs.emit(\"itemsShown\", { items: added });\n    }\n    if (removed.size > 0) {\n      this.afs.emit(\"itemsHidden\", { items: removed });\n    }\n  }\n\n  /**\n   * Add or update a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   * @param {string[]} filters - Array of filter values\n   * @param {string} [operator='OR'] - Operator within group\n   */\n  addFilterGroup(groupId, filters, operator = \"OR\") {\n    this.afs.logger.debug(`Adding filter group: ${groupId}`);\n\n    if (!Array.isArray(filters)) {\n      this.afs.logger.error(\"Filters must be an array\");\n      return;\n    }\n\n    const validOperator = operator.toUpperCase();\n    if (![\"AND\", \"OR\"].includes(validOperator)) {\n      this.afs.logger.warn(`Invalid operator: ${operator}, defaulting to OR`);\n      operator = \"OR\";\n    }\n\n    this.filterGroups.set(groupId, {\n      filters: new Set(filters),\n      operator: validOperator,\n    });\n\n    this.applyFilters();\n  }\n\n  /**\n   * Remove a filter group\n   * @public\n   * @param {string} groupId - Group identifier\n   */\n  removeFilterGroup(groupId) {\n    if (this.filterGroups.delete(groupId)) {\n      this.afs.logger.debug(`Removed filter group: ${groupId}`);\n\n      if (this.filterGroups.size === 0) {\n        this.resetFilters();\n      } else {\n        this.applyFilters();\n      }\n    }\n  }\n\n  /**\n   * Set filter group mode\n   * @public\n   * @param {string} mode - Mode for combining groups\n   */\n  setGroupMode(mode) {\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"groupMode\", validMode);\n      this.afs.logger.debug(`Set group mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid group mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Add filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  addFilter(filter) {\n    this.afs.logger.debug(`Adding filter: ${filter}`);\n  \n    if (filter === \"*\") {\n      this.resetFilters();\n      return;\n    }\n  \n    // Extract filter type (e.g., 'date', 'canton')\n    const [filterType] = filter.split(':');\n  \n    // Remove any existing filter of the same type\n    this.activeFilters.forEach(existingFilter => {\n      if (existingFilter.startsWith(`${filterType}:`)) {\n        this.activeFilters.delete(existingFilter);\n      }\n    });\n  \n    // Remove the all filter if it exists\n    this.activeFilters.delete(\"*\");\n    \n    // Add the new filter\n    this.activeFilters.add(filter);\n  \n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.add(this.afs.options.get(\"activeClass\"));\n      } else if (value === \"*\") {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n  \n    this.applyFilters();\n  }\n\n  /**\n   * Remove filter manually\n   * @public\n   * @param {string} filter - Filter value\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Set filter mode\n   * @public\n   * @param {string} mode - Filter mode ('AND' or 'OR')\n   */\n  setFilterMode(mode) {\n    this.afs.logger.debug(`Setting filter mode to: ${mode}`);\n\n    const validMode = mode.toUpperCase();\n    if ([\"AND\", \"OR\"].includes(validMode)) {\n      this.afs.options.set(\"filterMode\", validMode);\n      this.afs.logger.debug(`Set filter mode to: ${validMode}`);\n      this.applyFilters();\n    } else {\n      this.afs.logger.warn(`Invalid filter mode: ${mode}`);\n    }\n  }\n\n  /**\n   * Get active filters\n   * @public\n   * @returns {Set} Active filters\n   */\n  getActiveFilters() {\n    return new Set(this.activeFilters);\n  }\n\n  /**\n   * Get filter groups\n   * @public\n   * @returns {Map} Filter groups\n   */\n  getFilterGroups() {\n    return new Map(this.filterGroups);\n  }\n\n  /**\n   * Add filter button dynamically\n   * @public\n   * @param {HTMLElement} button - Button element\n   * @param {string} filter - Filter value\n   */\n  addFilterButton(button, filter) {\n    if (!filter) {\n      this.afs.logger.warn(\"Filter value required for new filter button\");\n      return;\n    }\n\n    this.filterButtons.set(button, filter);\n    this.bindFilterEvent(button);\n    this.afs.logger.debug(`Added filter button for: ${filter}`);\n  }\n\n  /**\n   * Remove filter button\n   * @public\n   * @param {HTMLElement} button - Button to remove\n   */\n  removeFilter(filter) {\n    this.afs.logger.debug(`Removing filter: ${filter}`);\n\n    this.activeFilters.delete(filter);\n\n    // Update button states\n    this.filterButtons.forEach((value, button) => {\n      if (value === filter) {\n        button.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Reset to all if no filters active\n    if (this.activeFilters.size === 0) {\n      this.resetFilters();\n    } else {\n      this.applyFilters();\n    }\n  }\n\n  /**\n   * Sort items with automatic order detection\n   * @public\n   * @param {string} key - The data attribute key to sort by\n   */\n  sortWithOrder(key) {\n    this.afs.logger.debug(`Sorting by ${key}`);\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Toggle sort order for the key\n      const currentOrder = this.sortOrders.get(key) || \"asc\";\n      const newOrder = currentOrder === \"asc\" ? \"desc\" : \"asc\";\n      this.sortOrders.set(key, newOrder);\n\n      // Determine sort type from first item\n      const sortType = this.determineSortType(items[0], key);\n\n      // Sort items\n      items.sort((a, b) => {\n        const valueA = this.getSortValue(a, key, sortType);\n        const valueB = this.getSortValue(b, key, sortType);\n\n        return this.compareValues(valueA, valueB, newOrder);\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Emit event\n      this.afs.emit(\"sort\", { key, order: newOrder });\n\n      this.afs.logger.info(`Sorted items by ${key} in ${newOrder} order`);\n\n      return newOrder; // Return the new order for UI updates\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return null;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      // Use the existing reorderItems method to update the DOM\n      this.reorderItems(items);\n\n      // Clear any existing sort orders as we've shuffled\n      this.sortOrders.clear();\n\n      this.afs.emit(\"shuffled\", {\n        itemCount: items.length,\n      });\n\n      this.afs.logger.debug(\"Items shuffled successfully\");\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n    }\n  }\n\n  /**\n   * Determine sort type from item value\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @returns {string} Sort type ('number', 'date', or 'string')\n   */\n  determineSortType(item, key) {\n    this.afs.logger.debug(`Determining sort type for ${key}`);\n\n    const value = item.dataset[key];\n\n    if (!value) return \"string\";\n    if (!isNaN(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) return \"date\";\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Parsed value for sorting\n   */\n  getSortValue(item, key, type) {\n    const value = item.dataset[key];\n\n    switch (type) {\n      case \"number\":\n        return parseFloat(value) || 0;\n      case \"date\":\n        return new Date(value).getTime() || 0;\n      default:\n        return (value || \"\").toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values for sorting\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} order - Sort order ('asc' or 'desc')\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, order) {\n    // Handle null/undefined values\n    if (a === null || a === undefined) return order === \"asc\" ? 1 : -1;\n    if (b === null || b === undefined) return order === \"asc\" ? -1 : 1;\n\n    // Compare values\n    const comparison = a < b ? -1 : a > b ? 1 : 0;\n    return order === \"asc\" ? comparison : -comparison;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const fragment = document.createDocumentFragment();\n    items.forEach((item) => fragment.appendChild(item));\n    this.afs.container.appendChild(fragment);\n  }\n\n  /**\n   * Get current sort order for key\n   * @public\n   * @param {string} key - Sort key\n   * @returns {string} Current sort order ('asc' or 'desc')\n   */\n  getCurrentSortOrder(key) {\n    return this.sortOrders.get(key) || \"asc\";\n  }\n\n  /**\n   * Clear all sort orders\n   * @public\n   */\n  clearSortOrders() {\n    this.afs.logger.debug(\"Clearing all sort orders\");\n\n    this.sortOrders.clear();\n    this.afs.emit(\"sortCleared\");\n  }\n\n  /**\n   * Clear all filters, url and search\n   * @public\n   */\n  clearAllFilters() {\n    this.afs.logger.debug(\"Clearing all filters and search\");\n\n    // Reset filters\n    this.activeFilters.clear();\n    this.activeFilters.add(\"*\");\n\n    // Update filter buttons\n    this.filterButtons.forEach((_, button) => {\n      button.classList.remove(this.afs.options.get(\"activeClass\"));\n    });\n\n    // Find and activate \"all\" button if exists\n    const allButton = this.findAllButton();\n    if (allButton) {\n      allButton.classList.add(this.afs.options.get(\"activeClass\"));\n    }\n\n    // Clear checkboxes\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    checkboxes.forEach((checkbox) => {\n      if (checkbox.classList.contains(this.afs.options.get(\"activeClass\"))) {\n        checkbox.checked = false;\n        checkbox.classList.remove(this.afs.options.get(\"activeClass\"));\n      }\n    });\n\n    // Clear search\n    if (this.afs.search) {\n      this.afs.search.setValue(\"\");\n    }\n\n    // Clear filter groups and sort orders\n    this.filterGroups.clear();\n    this.sortOrders.clear();\n\n    // Apply changes and ensure counter is updated\n    this.applyFilters();\n    \n    // Update URL if URLManager exists\n    if (this.afs.urlManager) {\n      this.afs.urlManager.updateURL();\n    }\n\n    // Emit event\n    this.afs.emit(\"filtersCleared\");\n\n    this.afs.logger.info(\"All filters cleared\");\n  }\n\n  /**\n   * Refresh the view\n   * @public\n   */\n  refresh() {\n    this.afs.logger.debug(\"Refreshing view\");\n\n    this.applyFilters();\n    this.afs.updateCounter();\n  }\n\n  removeFilterButton(button) {\n    this.filterButtons.delete(button);\n    button.removeEventListener(\"click\", this.handleFilterClick);\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.filterButtons.forEach((_, button) => {\n      this.removeFilterButton(button);\n    });\n    this.filterButtons.clear();\n    this.activeFilters.clear();\n    this.filterGroups.clear();\n    this.afs.logger.debug(\"Filter functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Utility functions for AFS\n */\n\n/**\n * Debounce function\n * @param {Function} func - Function to debounce\n * @param {number} wait - Delay in milliseconds\n * @param {boolean} [immediate=false] - Execute immediately\n * @returns {Function} Debounced function\n */\nexport const debounce = (func, wait, immediate = false) => {\n    let timeout;\n    return function executedFunction(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  \n  /**\n   * Throttle function\n   * @param {Function} func - Function to throttle\n   * @param {number} limit - Time limit in milliseconds\n   * @returns {Function} Throttled function\n   */\n  export const throttle = (func, limit) => {\n    let inThrottle;\n    return function executedFunction(...args) {\n      const context = this;\n      if (!inThrottle) {\n        func.apply(context, args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    };\n  }\n  \n  /**\n   * Parse date string according to format\n   * @param {string} dateStr - Date string to parse\n   * @param {string} format - Date format\n   * @returns {Date|null} Parsed date object or null if invalid\n   */\n  export const parseDate = (dateStr, format) => {\n    const formats = {\n      'YYYY-MM-DD': /^\\d{4}-\\d{2}-\\d{2}$/,\n      'DD-MM-YYYY': /^\\d{2}-\\d{2}-\\d{4}$/,\n      'MM/DD/YYYY': /^\\d{2}\\/\\d{2}\\/\\d{4}$/\n    };\n  \n    try {\n      if (formats[format]?.test(dateStr)) {\n        const parts = dateStr.split(/[-\\/]/);\n        switch (format) {\n          case 'YYYY-MM-DD':\n            return new Date(parts[0], parts[1] - 1, parts[2]);\n          case 'DD-MM-YYYY':\n            return new Date(parts[2], parts[1] - 1, parts[0]);\n          case 'MM/DD/YYYY':\n            return new Date(parts[2], parts[0] - 1, parts[1]);\n        }\n      }\n      return new Date(dateStr);\n    } catch {\n      return null;\n    }\n  }\n  \n  /**\n   * Get element's computed style value\n   * @param {HTMLElement} element - Target element\n   * @param {string} property - CSS property\n   * @returns {string} Computed style value\n   */\n  export const getStyle = (element, property) => {\n    return window.getComputedStyle(element).getPropertyValue(property);\n  }\n  \n  /**\n   * Check if element matches a selector\n   * @param {HTMLElement} element - Element to check\n   * @param {string} selector - CSS selector\n   * @returns {boolean} Whether element matches selector\n   */\n  export const matches = (element, selector) => {\n    return (\n      element.matches ||\n      element.matchesSelector ||\n      element.msMatchesSelector ||\n      element.mozMatchesSelector ||\n      element.webkitMatchesSelector ||\n      element.oMatchesSelector\n    ).call(element, selector);\n  }\n  \n  /**\n   * Deep clone an object\n   * @param {Object} obj - Object to clone\n   * @returns {Object} Cloned object\n   */\n  export const deepClone = (obj) => {\n    if (obj === null || typeof obj !== 'object') return obj;\n    if (obj instanceof Date) return new Date(obj);\n    if (obj instanceof Array) return obj.map(item => deepClone(item));\n    if (obj instanceof Set) return new Set([...obj].map(item => deepClone(item)));\n    if (obj instanceof Map) return new Map([...obj].map(([k, v]) => [deepClone(k), deepClone(v)]));\n    \n    return Object.fromEntries(\n      Object.entries(obj).map(([key, value]) => [key, deepClone(value)])\n    );\n  }\n  \n  /**\n   * Generate unique ID\n   * @param {string} [prefix=''] - ID prefix\n   * @returns {string} Unique ID\n   */\n  export const uniqueId = (prefix = '') => {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Check if value is plain object\n   * @param {any} value - Value to check\n   * @returns {boolean} Whether value is plain object\n   */\n  export function isPlainObject(value) {\n    return Object.prototype.toString.call(value) === '[object Object]';\n  }\n","/**\n * @fileoverview Input range filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class InputRangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n  }\n\n  /**\n   * @typedef {Object} InputRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {number} [min] - Minimum value\n   * @property {number} [max] - Maximum value\n   * @property {number} [step] - Step value\n   * @property {string} [label] - Label for the input range\n   */\n\n  /**\n   * Add input range filter\n   * @param {InputRangeOptions} options - Input range options\n   */\n  addInputRange({ key, container, min, max, step = 1, label = '' }) {\n    this.afs.logger.debug(`Adding input range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for input range');\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Create input elements\n    const elements = this.createInputElements(label);\n    const state = this.initializeState(min, max, step);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateInputUI(key);\n\n    this.afs.logger.info(`Input range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const value = parseFloat(item.dataset[key]);\n          return isNaN(value) ? null : value;\n        })\n        .filter(value => value !== null);\n\n      if (values.length === 0) {\n        return {\n          min: 0,\n          max: 100\n        };\n      }\n\n      return {\n        min: Math.min(...values),\n        max: Math.max(...values)\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating range:', error);\n      return {\n        min: 0,\n        max: 100\n      };\n    }\n  }\n\n  /**\n   * Create input elements\n   * @private\n   */\n  /**\n * Create input elements\n * @private\n */\ncreateInputElements(label) {\n  const container = document.createElement('div');\n  container.className = 'afs-input-range-container';\n\n  if (label) {\n      const labelElement = document.createElement('div');\n      labelElement.className = 'afs-input-range-label';\n      labelElement.textContent = label;\n      container.appendChild(labelElement);\n  }\n\n  // Min input wrapper\n  const minWrapper = document.createElement('div');\n  minWrapper.className = 'afs-input-wrapper';\n  \n  const minLabel = document.createElement('label');\n  minLabel.textContent = 'Min';\n  minLabel.className = 'afs-input-label';\n  \n  const minInput = document.createElement('input');\n  minInput.type = 'number';\n  minInput.className = 'afs-input min';\n\n  minWrapper.appendChild(minLabel);\n  minWrapper.appendChild(minInput);\n\n  // Max input wrapper\n  const maxWrapper = document.createElement('div');\n  maxWrapper.className = 'afs-input-wrapper';\n  \n  const maxLabel = document.createElement('label');\n  maxLabel.textContent = 'Max';\n  maxLabel.className = 'afs-input-label';\n  \n  const maxInput = document.createElement('input');\n  maxInput.type = 'number';\n  maxInput.className = 'afs-input max';\n\n  maxWrapper.appendChild(maxLabel);\n  maxWrapper.appendChild(maxInput);\n\n  container.appendChild(minWrapper);\n  container.appendChild(maxWrapper);\n\n  return {\n      container,\n      minInput,\n      maxInput\n  };\n}\n\n  /**\n   * Initialize input range state\n   * @private\n   */\n  initializeState(min, max, step) {\n    return {\n      min,\n      max,\n      step,\n      currentMin: min,\n      currentMax: max\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minInput, maxInput } = elements;\n\n    const handleInputChange = debounce(() => {\n      const minValue = parseFloat(minInput.value);\n      const maxValue = parseFloat(maxInput.value);\n\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        state.currentMin = Math.max(state.min, Math.min(maxValue, minValue));\n        state.currentMax = Math.min(state.max, Math.max(minValue, maxValue));\n        this.updateInputUI(key);\n        this.applyFilter(key);\n      }\n    }, 300);\n\n    minInput.addEventListener('input', handleInputChange);\n    maxInput.addEventListener('input', handleInputChange);\n  }\n\n  /**\n   * Update input UI\n   * @private\n   */\n  updateInputUI(key) {\n    try {\n      const { state, elements } = this.activeRanges.get(key);\n      const { minInput, maxInput } = elements;\n\n      // Set constraints\n      minInput.min = state.min;\n      minInput.max = state.max;\n      minInput.step = state.step;\n      maxInput.min = state.min;\n      maxInput.max = state.max;\n      maxInput.step = state.step;\n\n      // Set current values\n      minInput.value = state.currentMin;\n      maxInput.value = state.currentMax;\n    } catch (error) {\n      this.afs.logger.error('Error updating input UI:', error);\n    }\n  }\n\n  /**\n   * Apply filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.info(`Applying input filter for ${key}`);\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach(item => {\n      try {\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        const itemValue = parseFloat(item.dataset[key]);\n        if (isNaN(itemValue)) {\n          this.afs.hideItem(item);\n          return;\n        }\n\n        if (itemValue >= state.currentMin && itemValue <= state.currentMax) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item:', error);\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('inputRangeFilter', {\n      key,\n      min: state.currentMin,\n      max: state.currentMax\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRange(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateInputUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove input range\n   * @param {string} key - Range key\n   */\n  removeInputRange(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Input range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Search functionality for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class Search {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.searchInput = null;\n    this.searchKeys = ['title']; // Default search keys\n    this.minSearchLength = 2;\n    this.highlightClass = 'afs-highlight';\n    this.setupSearch();\n  }\n\n  /**\n   * Setup search functionality\n   * @private\n   */\n  setupSearch() {\n    const searchSelector = this.afs.options.get('searchInputSelector');\n    if (!searchSelector) return;\n\n    this.searchInput = document.querySelector(searchSelector);\n    if (!this.searchInput) {\n      this.afs.logger.warn(`Search input not found: ${searchSelector}`);\n      return;\n    }\n\n    // Configure search\n    this.searchKeys = this.afs.options.get('searchKeys') || this.searchKeys;\n    this.minSearchLength = this.afs.options.get('minSearchLength') || this.minSearchLength;\n\n    // Bind events\n    this.bindSearchEvents();\n    this.afs.logger.debug('Search functionality initialized');\n  }\n\n  /**\n   * Bind search events\n   * @private\n   */\n  bindSearchEvents() {\n    if (!this.searchInput) return;\n\n    // Create debounced search function\n    const debouncedSearch = debounce((e) => {\n      this.search(e.target.value);\n    }, this.afs.options.get('debounceTime') || 300);\n\n    // Bind input event\n    this.searchInput.addEventListener('input', debouncedSearch);\n\n    // Bind clear event\n    this.searchInput.addEventListener('search', (e) => {\n      if (!e.target.value) {\n        this.clearSearch();\n      }\n    });\n\n    // Handle Enter key\n    this.searchInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.search(e.target.value);\n      }\n    });\n  }\n\n  /**\n   * Perform search\n   * @public\n   * @param {string} query - Search query\n   */\n  search(query) {\n    this.afs.logger.debug('Performing search:', query);\n    const normalizedQuery = this.normalizeQuery(query);\n\n    // Update state\n    this.afs.state.setState('search.query', normalizedQuery);\n    let matches = 0;\n\n    // Special case for empty query\n    if (!normalizedQuery) {\n      this.clearSearch();\n      return;\n    }\n\n    // Skip if query is too short\n    if (normalizedQuery.length < this.minSearchLength) {\n      this.afs.logger.debug('Search query too short');\n      return;\n    }\n\n    try {\n      // Create search regex\n      const regex = this.createSearchRegex(normalizedQuery);\n\n      // Search through items\n      this.afs.items.forEach(item => {\n        const searchText = this.getItemSearchText(item);\n        const matchesSearch = regex.test(searchText);\n\n        if (matchesSearch) {\n          this.afs.showItem(item);\n          this.highlightMatches(item, regex);\n          matches++;\n        } else {\n          this.afs.hideItem(item);\n          this.removeHighlights(item);\n        }\n      });\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit('search', {\n        query: normalizedQuery,\n        matches,\n        total: this.afs.items.length\n      });\n\n      this.afs.logger.info(`Search complete. Found ${matches} matches`);\n    } catch (error) {\n      this.afs.logger.error('Search error:', error);\n    }\n\n    // Update counter after animation\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Normalize search query\n   * @private\n   * @param {string} query - Raw search query\n   * @returns {string} Normalized query\n   */\n  normalizeQuery(query) {\n    return query\n      .toLowerCase()\n      .trim()\n      .replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Create search regex\n   * @private\n   * @param {string} query - Normalized search query\n   * @returns {RegExp} Search regex\n   */\n  createSearchRegex(query) {\n    // Escape special regex characters\n    const escapedQuery = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    \n    // Split into words for whole word matching\n    const words = escapedQuery.split(' ').filter(Boolean);\n    \n    // Create regex pattern\n    const pattern = words\n      .map(word => `(?=.*\\\\b${word})`)\n      .join('');\n    \n    return new RegExp(pattern, 'i');\n  }\n\n  /**\n   * Get searchable text from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @returns {string} Searchable text\n   */\n  getItemSearchText(item) {\n    return this.searchKeys\n      .map(key => item.dataset[key] || '')\n      .join(' ')\n      .toLowerCase();\n  }\n\n  /**\n   * Highlight search matches\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {RegExp} regex - Search regex\n   */\n  highlightMatches(item, regex) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const text = target.textContent;\n      const words = this.afs.state.getState().search.query.split(' ');\n\n      let highlightedText = text;\n      words.forEach(word => {\n        if (!word) return;\n        const wordRegex = new RegExp(`(${word})`, 'gi');\n        highlightedText = highlightedText.replace(\n          wordRegex,\n          `<span class=\"${this.highlightClass}\">$1</span>`\n        );\n      });\n\n      target.innerHTML = highlightedText;\n    });\n  }\n\n  /**\n   * Remove highlights\n   * @private\n   * @param {HTMLElement} item - DOM element\n   */\n  removeHighlights(item) {\n    if (!this.afs.options.get('highlightMatches')) return;\n\n    this.searchKeys.forEach(key => {\n      const target = item.querySelector(`[data-search-key=\"${key}\"]`);\n      if (!target) return;\n\n      const highlights = target.querySelectorAll(`.${this.highlightClass}`);\n      highlights.forEach(highlight => {\n        const text = highlight.textContent;\n        highlight.replaceWith(text);\n      });\n    });\n  }\n\n  /**\n   * Clear search\n   * @public\n   */\n  clearSearch() {\n    this.afs.logger.debug('Clearing search');\n\n    // Clear input\n    if (this.searchInput) {\n      this.searchInput.value = '';\n    }\n\n    // Clear state\n    this.afs.state.setState('search.query', '');\n\n    // Show all items\n    this.afs.items.forEach(item => {\n      this.afs.showItem(item);\n      this.removeHighlights(item);\n    });\n\n    // Update URL and emit event\n    this.afs.urlManager.updateURL();\n    this.afs.emit('searchCleared');\n\n    // Update counter\n    setTimeout(() => {\n      this.afs.updateCounter();\n    }, this.afs.options.get('animationDuration'));\n  }\n\n  /**\n   * Set search value\n   * @public\n   * @param {string} value - Search value\n   */\n  setValue(value) {\n    if (this.searchInput) {\n      this.searchInput.value = value;\n    }\n    this.search(value);\n  }\n\n  /**\n   * Get current search value\n   * @public\n   * @returns {string} Current search value\n   */\n  getValue() {\n    return this.afs.state.getState().search.query;\n  }\n\n  /**\n   * Update search configuration\n   * @public\n   * @param {Object} config - Search configuration\n   */\n  updateConfig({\n    searchKeys,\n    minSearchLength,\n    highlightClass,\n    debounceTime\n  } = {}) {\n    if (searchKeys) this.searchKeys = searchKeys;\n    if (minSearchLength) this.minSearchLength = minSearchLength;\n    if (highlightClass) this.highlightClass = highlightClass;\n    if (debounceTime) {\n      this.bindSearchEvents(); // Rebind with new debounce time\n    }\n  }\n\n  /**\n   * Destroy search functionality\n   * @public\n   */\n  destroy() {\n    if (this.searchInput) {\n      this.searchInput.removeEventListener('input', this.debouncedSearch);\n      this.searchInput.removeEventListener('search', this.handleClear);\n      this.searchInput.removeEventListener('keypress', this.handleEnter);\n    }\n    this.clearSearch();\n  }\n}","/**\n * @fileoverview Sort functionality for AFS\n */\n\nexport class Sort {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.sortButtons = new Map();\n    this.setupSort();\n  }\n\n  /**\n   * Setup sort functionality\n   * @private\n   */\n  setupSort() {\n    const sortSelector = this.afs.options.get(\"sortButtonSelector\");\n    if (!sortSelector) return;\n\n    // Find and setup sort buttons\n    const buttons = document.querySelectorAll(sortSelector);\n    \n    if (buttons.length === 0) {\n      this.afs.logger.warn(\"No sort buttons found with selector:\", sortSelector);\n      return;\n    }\n    \n    buttons.forEach((button) => {\n      const key = button.dataset.sortKey;\n      if (!key) {\n        this.afs.logger.warn(\n          \"Sort button missing data-sort-key attribute:\",\n          button,\n        );\n        return;\n      }\n\n      this.sortButtons.set(button, {\n        key,\n        direction: button.dataset.sortDirection || \"asc\",\n      });\n\n      this.bindSortEvent(button);\n    });\n\n    this.afs.logger.debug(\"Sort functionality initialized\");\n  }\n\n  /**\n   * Bind sort event to button\n   * @private\n   * @param {HTMLElement} button - Sort button\n   */\n  bindSortEvent(button) {\n    this.afs.logger.debug(\"Binding sort event to button:\", button);\n\n    button.addEventListener(\"click\", () => {\n      const sortData = this.sortButtons.get(button);\n      if (!sortData) return;\n\n      // Toggle direction\n      sortData.direction = sortData.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.sortButtons.set(button, sortData);\n\n      // Update button state\n      this.updateSortButtonState(button, sortData);\n\n      // Perform sort\n      this.sort(sortData.key, sortData.direction);\n    });\n  }\n\n  /**\n   * Update sort button visual state\n   * @private\n   * @param {HTMLElement} button - Sort button\n   * @param {Object} sortData - Sort data\n   */\n  updateSortButtonState(button, sortData) {\n    // Remove active class from all buttons\n    this.sortButtons.forEach((_, btn) => {\n      btn.classList.remove(this.afs.options.get(\"activeSortClass\"));\n    });\n\n    // Add active class to current button\n    button.classList.add(this.afs.options.get(\"activeSortClass\"));\n\n    // Update direction indicator\n    const indicator = button.querySelector(\".sort-direction\");\n    if (indicator) {\n      indicator.textContent = sortData.direction === \"asc\" ? \"↑\" : \"↓\";\n    }\n  }\n\n  /**\n   * Sort items\n   * @public\n   * @param {string} key - Sort key\n   * @param {string} direction - Sort direction ('asc' or 'desc')\n   * @returns {boolean} Success status\n   */\n  sort(key, direction = \"asc\") {\n    this.afs.logger.debug(`Sorting by ${key} in ${direction} order`);\n\n    try {\n      if (!key) {\n        throw new Error(\"Sort key is required\");\n      }\n      \n      if (![\"asc\", \"desc\"].includes(direction.toLowerCase())) {\n        this.afs.logger.warn(`Invalid sort direction: ${direction}, defaulting to \"asc\"`);\n        direction = \"asc\";\n      }\n\n      // Update state\n      this.afs.state.setState(\"sort.current\", { key, direction });\n\n      // Get all items as array\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      // Determine sort type\n      const sortType = this.determineSortType(items[0], key);\n      this.afs.logger.debug(`Determined sort type for key \"${key}\": ${sortType}`);\n\n      // Sort items\n      items.sort((a, b) => {\n        try {\n          const valueA = this.getSortValue(a, key, sortType);\n          const valueB = this.getSortValue(b, key, sortType);\n          return this.compareValues(valueA, valueB, direction);\n        } catch (error) {\n          this.afs.logger.error(\"Error during sort comparison:\", error);\n          return 0; // Keep original order for failed comparisons\n        }\n      });\n\n      // Reorder DOM elements\n      this.reorderItems(items);\n\n      // Update URL and emit event\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sort\", { key, direction, sortType, itemCount: items.length });\n\n      this.afs.logger.info(`Sorted ${items.length} items by ${key} ${direction} (${sortType})`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Determine sort type from item\n   * @private\n   * @param {HTMLElement} item - First item\n   * @param {string} key - Sort key\n   * @returns {string} Sort type\n   */\n  determineSortType(item, key) {\n    // Guard against empty items array\n    if (!item) {\n      this.afs.logger.warn(`Cannot determine sort type: No items available for key ${key}`);\n      return \"string\"; // Default to string sorting\n    }\n\n    // Check if dataset exists and has the key\n    if (!item.dataset || !(key in item.dataset)) {\n      this.afs.logger.warn(`Item missing dataset key: ${key}`, item);\n      return \"string\";\n    }\n\n    const value = item.dataset[key];\n    \n    // Empty value check\n    if (value === undefined || value === null || value === \"\") {\n      return \"string\";\n    }\n\n    // Type detection with more robust checks\n    if (!isNaN(parseFloat(value)) && isFinite(value)) return \"number\";\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(value)) {\n      // Validate it's actually a valid date\n      const date = new Date(value);\n      return !isNaN(date.getTime()) ? \"date\" : \"string\";\n    }\n\n    return \"string\";\n  }\n\n  /**\n   * Get sort value from item\n   * @private\n   * @param {HTMLElement} item - DOM element\n   * @param {string} key - Sort key\n   * @param {string} type - Sort type\n   * @returns {any} Sort value\n   */\n  getSortValue(item, key, type) {\n    // Handle undefined or null item\n    if (!item) {\n      this.afs.logger.warn(\"Undefined item in getSortValue\");\n      return null;\n    }\n\n    // Handle undefined dataset or key\n    if (!item.dataset || !Object.prototype.hasOwnProperty.call(item.dataset, key)) {\n      this.afs.logger.warn(`Missing data attribute: ${key} on item`, item);\n      return type === \"number\" ? 0 : type === \"date\" ? 0 : \"\";\n    }\n\n    const value = item.dataset[key];\n    \n    // Handle empty values\n    if (value === undefined || value === null || value === \"\") {\n      return type === \"number\" ? 0 : type === \"date\" ? 0 : \"\";\n    }\n\n    switch (type) {\n      case \"number\":\n        const num = parseFloat(value);\n        return isNaN(num) ? 0 : num;\n      case \"date\":\n        const date = new Date(value).getTime();\n        return isNaN(date) ? 0 : date;\n      default:\n        return String(value).toLowerCase();\n    }\n  }\n\n  /**\n   * Compare two values\n   * @private\n   * @param {any} a - First value\n   * @param {any} b - Second value\n   * @param {string} direction - Sort direction\n   * @returns {number} Comparison result\n   */\n  compareValues(a, b, direction) {\n    const modifier = direction === \"asc\" ? 1 : -1;\n\n    if (a === b) return 0;\n    if (a === undefined || a === null) return 1;\n    if (b === undefined || b === null) return -1;\n\n    return a > b ? modifier : -modifier;\n  }\n\n  /**\n   * Reorder DOM elements\n   * @private\n   * @param {HTMLElement[]} items - Sorted items\n   */\n  reorderItems(items) {\n    const containerSelector = this.afs.options.get(\"containerSelector\");\n    const container = document.querySelector(containerSelector);\n    \n    if (!container) {\n      this.afs.logger.error(\"Container not found:\", containerSelector);\n      return;\n    }\n    \n    // Performance optimization: only move elements if needed\n    // Use document position to determine if reordering is necessary\n    let needsReordering = false;\n    \n    // Check if any items are out of order\n    for (let i = 0; i < items.length - 1; i++) {\n      if (!(items[i].compareDocumentPosition(items[i + 1]) & Node.DOCUMENT_POSITION_FOLLOWING)) {\n        needsReordering = true;\n        break;\n      }\n    }\n    \n    if (!needsReordering) {\n      this.afs.logger.debug(\"Items already in correct order, skipping DOM operations\");\n      return;\n    }\n    \n    // Batch reordering with document fragment for better performance\n    const fragment = document.createDocumentFragment();\n    items.forEach(item => fragment.appendChild(item));\n    container.appendChild(fragment);\n    \n    this.afs.logger.debug(`Reordered ${items.length} items`);\n  }\n\n  /**\n   * Sort with multiple criteria\n   * @public\n   * @param {Array<{key: string, direction: string}>} criteria - Sort criteria\n   * @returns {boolean} Success status\n   */\n  sortMultiple(criteria) {\n    this.afs.logger.debug(\"Sorting by multiple criteria:\", criteria);\n\n    try {\n      // Validate criteria\n      if (!Array.isArray(criteria) || criteria.length === 0) {\n        throw new Error(\"Sort criteria must be a non-empty array\");\n      }\n      \n      // Validate each criterion\n      criteria.forEach((criterion, index) => {\n        if (!criterion.key) {\n          throw new Error(`Sort criterion at index ${index} missing key property`);\n        }\n        \n        if (criterion.direction && ![\"asc\", \"desc\"].includes(criterion.direction.toLowerCase())) {\n          this.afs.logger.warn(`Invalid sort direction in criterion ${index}: ${criterion.direction}, defaulting to \"asc\"`);\n          criterion.direction = \"asc\";\n        }\n      });\n\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      // Cache sort types for performance\n      const sortTypes = {};\n      criteria.forEach(criterion => {\n        if (!sortTypes[criterion.key]) {\n          sortTypes[criterion.key] = this.determineSortType(items[0], criterion.key);\n        }\n      });\n\n      items.sort((a, b) => {\n        for (const { key, direction = \"asc\" } of criteria) {\n          try {\n            const type = sortTypes[key] || \"string\";\n            const valueA = this.getSortValue(a, key, type);\n            const valueB = this.getSortValue(b, key, type);\n\n            const comparison = this.compareValues(valueA, valueB, direction);\n            if (comparison !== 0) return comparison;\n          } catch (error) {\n            this.afs.logger.error(`Error comparing values for key ${key}:`, error);\n            // Continue to next criterion\n          }\n        }\n        return 0;\n      });\n\n      this.reorderItems(items);\n\n      // Update state with primary sort\n      if (criteria.length > 0) {\n        this.afs.state.setState(\"sort.current\", criteria[0]);\n      }\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"multiSort\", { \n        criteria, \n        itemCount: items.length,\n        sortTypes \n      });\n      \n      this.afs.logger.info(`Multi-sorted ${items.length} items with ${criteria.length} criteria`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Multiple sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Sort with custom comparator\n   * @public\n   * @param {string} key - Sort key\n   * @param {Function} comparator - Custom comparison function\n   * @returns {boolean} Success status\n   */\n  sortWithComparator(key, comparator) {\n    this.afs.logger.debug(`Sorting by ${key} with custom comparator`);\n\n    try {\n      // Validate parameters\n      if (!key) {\n        throw new Error(\"Sort key is required\");\n      }\n      \n      if (typeof comparator !== \"function\") {\n        throw new Error(\"Comparator must be a function\");\n      }\n\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to sort\");\n        return true;\n      }\n\n      items.sort((a, b) => {\n        try {\n          // Check if the items have the necessary data attribute\n          if (!a.dataset || !b.dataset || !(key in a.dataset) || !(key in b.dataset)) {\n            this.afs.logger.warn(`Missing data attribute ${key} in one or both items being compared`);\n            return 0;\n          }\n          \n          const valueA = a.dataset[key];\n          const valueB = b.dataset[key];\n          return comparator(valueA, valueB);\n        } catch (error) {\n          this.afs.logger.error(\"Error in custom comparator:\", error);\n          return 0; // Keep original order for failed comparisons\n        }\n      });\n\n      this.reorderItems(items);\n      \n      // Don't update state with custom sort since it's not easily serializable\n      \n      this.afs.emit(\"customSort\", { \n        key, \n        comparatorName: comparator.name || \"anonymous\", \n        itemCount: items.length \n      });\n      \n      this.afs.logger.info(`Custom sorted ${items.length} items by ${key}`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Custom sort error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Shuffle items randomly\n   * @public\n   * @returns {boolean} Success status\n   */\n  shuffle() {\n    this.afs.logger.debug(\"Shuffling items\");\n\n    try {\n      const items = Array.from(this.afs.items);\n      \n      if (items.length === 0) {\n        this.afs.logger.info(\"No items to shuffle\");\n        return true;\n      }\n      \n      if (items.length === 1) {\n        this.afs.logger.info(\"Only one item to shuffle, no change needed\");\n        return true;\n      }\n\n      this.afs.logger.debug(`Shuffling ${items.length} items`);\n\n      // Fisher-Yates shuffle algorithm\n      for (let i = items.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [items[i], items[j]] = [items[j], items[i]];\n      }\n\n      this.reorderItems(items);\n\n      // Clear current sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Update UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"shuffle\", { itemCount: items.length });\n      \n      this.afs.logger.info(`Shuffled ${items.length} items`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Shuffle error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Reset sort to default state\n   * @public\n   * @returns {boolean} Success status\n   */\n  reset() {\n    this.afs.logger.debug(\"Resetting sort\");\n\n    try {\n      // Clear sort state\n      this.afs.state.setState(\"sort.current\", null);\n\n      // Reset UI\n      this.sortButtons.forEach((_, button) => {\n        button.classList.remove(this.afs.options.get(\"activeSortClass\"));\n        const indicator = button.querySelector(\".sort-direction\");\n        if (indicator) indicator.textContent = \"\";\n      });\n\n      // Reset sort data\n      let buttonCount = 0;\n      this.sortButtons.forEach((data, button) => {\n        data.direction = \"asc\";\n        this.sortButtons.set(button, data);\n        buttonCount++;\n      });\n\n      this.afs.urlManager.updateURL();\n      this.afs.emit(\"sortReset\", { buttonCount });\n      \n      this.afs.logger.info(`Sort reset: ${buttonCount} sort buttons reset to default state`);\n      return true;\n    } catch (error) {\n      this.afs.logger.error(\"Sort reset error:\", error);\n      return false;\n    }\n  }\n\n  /**\n   * Get current sort state\n   * @public\n   * @returns {Object|null} Current sort state\n   */\n  getCurrentSort() {\n    return this.afs.state.getState().sort.current;\n  }\n\n  /**\n   * Add sort button dynamically\n   * @public\n   * @param {HTMLElement} button - Sort button element\n   * @param {string} key - Sort key\n   * @param {string} [direction='asc'] - Initial sort direction\n   */\n  addSortButton(button, key, direction = \"asc\") {\n    if (!key) {\n      this.afs.logger.warn(\"Sort key required for new sort button\");\n      return;\n    }\n\n    this.sortButtons.set(button, { key, direction });\n    this.bindSortEvent(button);\n    this.afs.logger.debug(`Added sort button for ${key}`);\n  }\n\n  /**\n   * Remove sort button\n   * @public\n   * @param {HTMLElement} button - Sort button to remove\n   */\n  removeSortButton(button) {\n    if (this.sortButtons.has(button)) {\n      button.removeEventListener(\"click\", this.bindSortEvent);\n      this.sortButtons.delete(button);\n      this.afs.logger.debug(\"Removed sort button\");\n    }\n  }\n\n  /**\n   * Destroy sort functionality\n   * @public\n   */\n  destroy() {\n    this.sortButtons.forEach((_, button) => {\n      this.removeSortButton(button);\n    });\n    this.sortButtons.clear();\n    this.afs.logger.debug(\"Sort functionality destroyed\");\n  }\n}\n","/**\n * @fileoverview Pagination functionality for AFS\n */\nimport { Animation } from \"../styles/Animation.js\";\n\nexport class Pagination {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.container = null;\n    this.animation = new Animation(afs);\n    this.options = this.afs.options.get(\"pagination\");\n    this.setupPagination();\n  }\n\n  /**\n   * Setup pagination\n   * @private\n   */\n  setupPagination() {\n    this.afs.logger.debug(\"Setting up pagination\");\n    if (!this.afs.options.get('pagination.enabled')) return;\n    console.log('Pagination enabled');\n\n    this.container = document.createElement(\"div\");\n    this.container.className = this.options.containerClass;\n\n    const itemsContainer = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!itemsContainer) {\n      this.afs.logger.error(\"Items container not found.\");\n      return;\n    }\n    itemsContainer.appendChild(this.container);\n\n    // Initialize pagination state with defaults\n    this.afs.state.setState(\"pagination\", {\n      currentPage: 1,\n      itemsPerPage: this.options.itemsPerPage,\n      totalPages: 0,\n    });\n\n    this.bindEvents();\n    this.update();\n    this.afs.logger.debug(\"Pagination initialized\");\n  }\n\n  /**\n   * Bind pagination events\n   * @private\n   */\n  bindEvents() {\n    this.afs.on(\"filter\", () => this.update());\n    this.afs.on(\"search\", () => this.update());\n    this.afs.on(\"sort\", () => this.update());\n\n    this.container.addEventListener(\"click\", (e) => {\n      const button = e.target.closest(\"button\");\n      if (!button) return;\n\n      const page = button.dataset.page;\n      if (page) {\n        this.goToPage(parseInt(page, 10));\n      }\n    });\n  }\n\n  /**\n   * Update pagination\n   * @public\n   */\n  update() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    const itemsPerPage = this.afs.state.getState().pagination.itemsPerPage;\n    const totalPages = Math.max(\n      1,\n      Math.ceil(visibleItems.length / itemsPerPage),\n    );\n\n    // Update state\n    const currentState = this.afs.state.getState().pagination;\n    let currentPage = currentState.currentPage;\n\n    // Adjust current page if it's beyond the total pages\n    if (currentPage > totalPages) {\n      currentPage = totalPages;\n    }\n\n    // Update pagination state\n    this.afs.state.setState(\"pagination\", {\n      ...currentState,\n      currentPage,\n      totalPages,\n    });\n\n    // Update visibility before rendering pagination controls\n    this.updateVisibility(visibleItems);\n    this.renderPagination();\n    this.afs.urlManager.updateURL();\n\n    this.afs.emit(\"pagination\", {\n      currentPage,\n      totalPages,\n      itemsPerPage,\n      visibleItems: visibleItems.length,\n    });\n  }\n\n  /**\n   * Update items visibility based on current page\n   * @private\n   */\n  updateVisibility(visibleItems) {\n    const { currentPage, itemsPerPage } = this.afs.state.getState().pagination;\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n\n    // First hide all items\n    this.afs.items.forEach((item) => {\n      item.style.display = \"none\";\n      item.classList.add(this.afs.options.get(\"hiddenClass\"));\n    });\n\n    // Then show only the items for the current page\n    const itemsToShow = visibleItems.slice(startIndex, endIndex);\n\n    // Ensure we're not trying to display non-existent items\n    if (itemsToShow.length === 0 && visibleItems.length > 0) {\n      // If we have no items to show but we do have visible items,\n      // we're probably on an invalid page - go to page 1\n      this.goToPage(1);\n      return;\n    }\n\n    // Show items with animation\n    requestAnimationFrame(() => {\n      itemsToShow.forEach((item) => {\n        // Remove hidden class and restore display\n        item.style.display = \"\";\n        item.classList.remove(this.afs.options.get(\"hiddenClass\"));\n\n        // Apply show animation in the next frame\n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(\n            item,\n            this.options.animationType || \"fade\",\n          );\n        });\n      });\n    });\n  }\n\n  /**\n   * Render pagination controls\n   * @private\n   */\n  renderPagination() {\n    const { currentPage, totalPages } = this.afs.state.getState().pagination;\n\n    this.container.innerHTML = \"\";\n\n    if (totalPages <= 1) {\n      this.container.style.display = \"none\";\n      return;\n    }\n\n    this.container.style.display = \"flex\";\n    const controls = this.createPaginationControls(currentPage, totalPages);\n    this.container.appendChild(controls);\n  }\n\n  /**\n   * Create pagination controls\n   * @private\n   * @param {number} currentPage - Current page\n   * @param {number} totalPages - Total pages\n   * @returns {DocumentFragment} Pagination controls\n   */\n  createPaginationControls(currentPage, totalPages) {\n    const fragment = document.createDocumentFragment();\n\n    if (this.options.showPrevNext) {\n      const prevButton = this.createPageButton(\"‹\", currentPage - 1, {\n        disabled: currentPage === 1,\n        class: \"afs-pagination-prev\",\n      });\n      fragment.appendChild(prevButton);\n    }\n\n    fragment.appendChild(\n      this.createPageButton(\"1\", 1, { active: currentPage === 1 }),\n    );\n\n    const range = this.calculatePageRange(currentPage, totalPages);\n\n    if (range.start > 2) fragment.appendChild(this.createEllipsis());\n\n    for (let i = range.start; i <= range.end; i++) {\n      if (i === 1 || i === totalPages) continue;\n      fragment.appendChild(\n        this.createPageButton(i.toString(), i, { active: currentPage === i }),\n      );\n    }\n\n    if (range.end < totalPages - 1) fragment.appendChild(this.createEllipsis());\n\n    if (totalPages > 1)\n      fragment.appendChild(\n        this.createPageButton(totalPages.toString(), totalPages, {\n          active: currentPage === totalPages,\n        }),\n      );\n\n    if (this.options.showPrevNext) {\n      const nextButton = this.createPageButton(\"›\", currentPage + 1, {\n        disabled: currentPage === totalPages,\n        class: \"afs-pagination-next\",\n      });\n      fragment.appendChild(nextButton);\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Create page button\n   * @private\n   */\n  createPageButton(\n    text,\n    page,\n    { active = false, disabled = false, class: className = \"\" } = {},\n  ) {\n    const button = document.createElement(\"button\");\n    button.textContent = text;\n    button.dataset.page = page;\n    button.classList.add(this.options.pageButtonClass || \"afs-page-button\");\n\n    if (className) button.classList.add(className);\n    if (active)\n      button.classList.add(this.options.activePageClass || \"afs-page-active\");\n    if (disabled) button.disabled = true;\n\n    return button;\n  }\n\n  createEllipsis() {\n    const span = document.createElement(\"span\");\n    span.textContent = \"...\";\n    span.classList.add(\"afs-pagination-ellipsis\");\n    return span;\n  }\n\n  calculatePageRange(currentPage, totalPages) {\n    const maxButtons = this.options.maxButtons || 7;\n    const sideButtons = Math.floor((maxButtons - 3) / 2);\n\n    let start = Math.max(2, currentPage - sideButtons);\n    let end = Math.min(totalPages - 1, start + maxButtons - 3);\n\n    if (end - start < maxButtons - 3)\n      start = Math.max(2, end - (maxButtons - 3));\n\n    return { start, end };\n  }\n\n  /**\n   * Go to specific page\n   * @public\n   */\n  goToPage(page) {\n    const state = this.afs.state.getState().pagination;\n    const targetPage = Math.max(1, Math.min(page, state.totalPages));\n\n    if (targetPage === state.currentPage) return;\n\n    // Update state\n    this.afs.state.setState(\"pagination.currentPage\", targetPage);\n\n    // Force a reflow before updating\n    this.afs.container.offsetHeight;\n\n    // Update visibility and controls\n    this.update();\n\n    // Scroll to top if enabled\n    if (this.options.scrollToTop) {\n      setTimeout(() => this.scrollToTop(), 100);\n    }\n\n    // Emit page change event\n    this.afs.emit(\"pageChanged\", {\n      previousPage: state.currentPage,\n      currentPage: targetPage,\n      totalPages: state.totalPages,\n    });\n  }\n\n  scrollToTop() {\n    const container = document.querySelector(\n      this.afs.options.get(\"pagination.container\"),\n    );\n    if (!container) {\n      this.afs.logger.warn(\"Scroll container not found.\");\n      return;\n    }\n\n    window.scrollTo({\n      top: container.offsetTop - this.options.scrollOffset,\n      behavior: \"smooth\",\n    });\n  }\n\n  /**\n   * Set pagination mode\n   * @public\n   */\n  setPaginationMode(enabled) {\n    this.afs.logger.debug(`Setting pagination mode to: ${enabled}`);\n    \n    // Update options\n    this.afs.options.set('pagination.enabled', enabled);\n    \n    if (enabled) {\n      // Enable pagination\n      this.setupPagination();\n    } else {\n      // Disable pagination and show all items\n      this.container.remove();\n      this.showAllItems();\n    }\n\n    // Emit event\n    this.afs.emit('paginationModeChanged', { enabled });\n  }\n\n  /**\n   * Show all items (for infinite scroll mode)\n   * @private\n   */\n  showAllItems() {\n    const visibleItems = Array.from(this.afs.state.getState().items.visible);\n    \n    requestAnimationFrame(() => {\n      visibleItems.forEach(item => {\n        item.style.display = '';\n        item.classList.remove(this.afs.options.get('hiddenClass'));\n        \n        requestAnimationFrame(() => {\n          this.animation.applyShowAnimation(item, this.options.animationType || 'fade');\n        });\n      });\n    });\n  }\n}\n","/**\n * @fileoverview URL state management for AFS\n */\n\nexport class URLManager {\n  /**\n   * @param {import('../AFS').AFS} afs - Main AFS instance\n   */\n  constructor(afs) {\n    this.afs = afs;\n    this.defaultParams = new URLSearchParams();\n    this.setupPopStateHandler();\n    \n    // Load URL state after a small delay to ensure all features are ready\n    setTimeout(() => {\n      this.loadFromURL();\n    }, 0);\n  }\n\n  /**\n   * Setup history popstate handler\n   * @private\n   */\n  setupPopStateHandler() {\n    window.addEventListener('popstate', () => {\n      this.loadFromURL();\n    });\n  }\n\n  /**\n   * Update URL with current filter state\n   * @public\n   */\n  /**\n * Update URL with current filter state\n * @public\n */\nupdateURL() {\n  this.afs.logger.debug(\"Updating URL state\");\n  const params = new URLSearchParams();\n  const state = this.afs.state.getState();  // Get current state of filters\n\n  // Get active filters directly from the Filter instance\n  const activeFilters = this.afs.filter.getActiveFilters();\n\n  // Update the state object with the active filters\n  state.filters.current = activeFilters;\n\n  // Add filters to URL\n  this.addFiltersToURL(params, state);\n  \n  // Add ranges (if applicable) to URL\n  this.addRangesToURL(params, state);\n  \n  // Add search query to URL\n  this.addSearchToURL(params, state);\n  \n  // Add sort state to URL\n  this.addSortToURL(params, state);\n  \n  // Add pagination to URL\n  this.addPaginationToURL(params, state);\n  \n  // Push the updated URL\n  this.pushState(params);  // Push the new URL state to the browser\n}\n\n  /**\n   * Add filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addFiltersToURL(params, state) {\n    const filters = state.filters;\n\n    // Skip if only default filter is active\n    if (filters.current.size === 0 || \n        (filters.current.size === 1 && filters.current.has('*'))) {\n      return;\n    }\n\n    // Group filters by type\n    const filtersByType = {};\n    for (const filter of filters.current) {\n      if (filter !== '*') {\n        const [type, value] = filter.split(':');\n        if (!filtersByType[type]) {\n          filtersByType[type] = new Set();\n        }\n        filtersByType[type].add(value);\n      }\n    }\n\n    // Add filters to params\n    Object.entries(filtersByType).forEach(([type, values]) => {\n      params.set(type, Array.from(values).join(','));\n    });\n\n    // Add filter mode if not default\n    if (filters.mode !== 'OR') {\n      params.set('filterMode', filters.mode.toLowerCase());\n    }\n\n    // Add group mode if groups exist and mode isn't default\n    if (filters.groups.size > 0 && filters.groupMode !== 'OR') {\n      params.set('groupMode', filters.groupMode.toLowerCase());\n    }\n\n    // Add filter groups if they exist\n    filters.groups.forEach((group, groupId) => {\n      params.set(`group_${groupId}`, Array.from(group.filters).join(','));\n      if (group.operator !== 'OR') {\n        params.set(`groupOp_${groupId}`, group.operator.toLowerCase());\n      }\n    });\n  }\n\n  /**\n   * Add range filters to URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addRangesToURL(params, state) {\n    // Handle numeric ranges\n    state.filters.ranges.forEach((range, key) => {\n      const { currentMin, currentMax } = range;\n      if (currentMin !== range.min || currentMax !== range.max) {\n        params.set(`range_${key}`, `${currentMin},${currentMax}`);\n      }\n    });\n\n    // Handle date ranges\n    state.filters.dateRanges.forEach((range, key) => {\n      const { start, end } = range;\n      params.set(`dateRange_${key}`, `${start.toISOString()},${end.toISOString()}`);\n    });\n  }\n\n  /**\n   * Add search parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSearchToURL(params, state) {\n    if (state.search.query) {\n      params.set('search', state.search.query);\n    }\n  }\n\n  /**\n   * Add sort parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addSortToURL(params, state) {\n    if (state.sort.current) {\n      const { key, direction } = state.sort.current;\n      params.set('sort', `${key},${direction}`);\n    }\n  }\n\n  /**\n   * Add pagination parameters to URL\n   * @private\n   * @param {URLSearchParams} params\n   * @param {Object} state\n   */\n  addPaginationToURL(params, state) {\n    const { currentPage, itemsPerPage } = state.pagination;\n\n    if (!this.afs.options.get('pagination.enabled')) {\n      return;\n    }\n\n    if (currentPage > 1) {\n      params.set('page', currentPage.toString());\n    }\n    if (itemsPerPage !== this.afs.options.get('pagination.itemsPerPage')) {\n      params.set('perPage', itemsPerPage.toString());\n    }\n  }\n\n  /**\n   * Update browser URL\n   * @private\n   * @param {URLSearchParams} params\n   */\n  pushState(params) {\n    const queryString = params.toString();\n    const newURL = `${window.location.pathname}${queryString ? '?' + queryString : ''}`;\n    \n    // Only update if URL actually changed\n    if (newURL !== window.location.href) {\n      window.history.pushState({}, '', newURL);\n      this.afs.logger.debug('URL updated:', newURL);\n    }\n  }\n\n  /**\n * Load filter state from URL\n * @public\n */\n  loadFromURL() {\n    this.afs.logger.debug('Loading state from URL');\n    const params = new URLSearchParams(window.location.search);\n  \n    try {\n      // Clear existing filters first\n      if (this.afs.filter) {\n        this.afs.filter.clearAllFilters();\n      }\n  \n      // Process filter mode first\n      const filterMode = params.get('filterMode');\n      if (filterMode && this.afs.filter) {\n        this.afs.filter.setFilterMode(filterMode.toUpperCase());\n      }\n  \n      // Get all parameters that are not special parameters\n      const filterParams = Array.from(params.entries()).filter(([key]) => \n        this.isRegularFilter(key)\n      );\n  \n      if (filterParams.length > 0 && this.afs.filter) {\n        // Remove default '*' filter\n        this.afs.filter.activeFilters.clear();\n  \n        // Process each filter parameter\n        filterParams.forEach(([type, value]) => {\n          if (value) {\n            // Handle comma-separated values if present\n            const values = value.split(',');\n            values.forEach(val => {\n              const filter = `${type}:${val}`;\n              this.afs.filter.addFilter(filter);\n            });\n          }\n        });\n      }\n  \n      // Apply filters before processing other parameters\n      if (this.afs.filter) {\n        this.afs.filter.applyFilters();\n      }\n  \n      // Process other parameters...\n      this.processSearchFromURL(params);\n      this.processSortFromURL(params);\n      this.processPaginationFromURL(params);\n  \n      this.afs.emit('urlStateLoaded', { params: Object.fromEntries(params) });\n      this.afs.logger.info('State loaded from URL');\n    } catch (error) {\n      this.afs.logger.error('Error loading state from URL:', error);\n      // Reset to default state on error\n      if (this.afs.filter) {\n        this.afs.filter.clearAllFilters();\n      }\n    }\n  }\n  \n  /**\n   * Process filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processFiltersFromURL(params) {\n    const state = this.afs.state.getState();\n    let hasFilters = false;\n\n    // Process filter mode\n    const filterMode = params.get('filterMode');\n    if (filterMode) {\n      state.filters.mode = filterMode.toUpperCase();\n    }\n\n    // Process group mode\n    const groupMode = params.get('groupMode');\n    if (groupMode) {\n      state.filters.groupMode = groupMode.toUpperCase();\n    }\n\n    // Process regular filters\n    for (const [type, values] of params.entries()) {\n      if (this.isRegularFilter(type)) {\n        values.split(',').filter(Boolean).forEach(value => {\n          hasFilters = true;\n          state.filters.current.add(`${type}:${value}`);\n        });\n      }\n    }\n\n    // Process filter groups\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('group_')) {\n        const groupId = key.replace('group_', '');\n        const operator = params.get(`groupOp_${groupId}`)?.toUpperCase() || 'OR';\n        state.filters.groups.set(groupId, {\n          filters: new Set(value.split(',')),\n          operator\n        });\n      }\n    }\n\n    // Set default if no filters\n    if (!hasFilters && state.filters.groups.size === 0) {\n      state.filters.current.add('*');\n    }\n  }\n\n  /**\n   * Process range filters from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processRangesFromURL(params) {\n    const state = this.afs.state.getState();\n\n    // Process numeric ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('range_')) {\n        const rangeKey = key.replace('range_', '');\n        const [min, max] = value.split(',').map(Number);\n        state.filters.ranges.set(rangeKey, { currentMin: min, currentMax: max });\n      }\n    }\n\n    // Process date ranges\n    for (const [key, value] of params.entries()) {\n      if (key.startsWith('dateRange_')) {\n        const rangeKey = key.replace('dateRange_', '');\n        const [start, end] = value.split(',').map(str => new Date(str));\n        state.filters.dateRanges.set(rangeKey, { start, end });\n      }\n    }\n  }\n\n  /**\n   * Process search from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSearchFromURL(params) {\n    const searchQuery = params.get('search') || '';\n    this.afs.state.setState('search.query', searchQuery);\n    \n    if (this.afs.options.get('searchInput')) {\n      this.afs.options.get('searchInput').value = searchQuery;\n    }\n  }\n\n  /**\n   * Process sort from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processSortFromURL(params) {\n    const sortParam = params.get('sort');\n    if (sortParam) {\n      const [key, direction] = sortParam.split(',');\n      this.afs.state.setState('sort.current', { key, direction });\n    }\n  }\n\n  /**\n   * Process pagination from URL parameters\n   * @private\n   * @param {URLSearchParams} params\n   */\n  processPaginationFromURL(params) {\n    const page = parseInt(params.get('page')) || 1;\n    const perPage = parseInt(params.get('perPage')) || \n                   this.afs.options.get('pagination.itemsPerPage');\n\n    this.afs.state.setState('pagination', {\n      currentPage: page,\n      itemsPerPage: perPage\n    });\n  }\n\n  /**\n   * Check if parameter is a regular filter\n   * @private\n   * @param {string} param - Parameter name\n   * @returns {boolean}\n   */\n  isRegularFilter(param) {\n    const excludedParams = [\n      'search', 'sort', 'page', 'perPage', 'filterMode', 'groupMode'\n    ];\n    return !excludedParams.includes(param) && \n           !param.startsWith('group_') && \n           !param.startsWith('groupOp_') && \n           !param.startsWith('range_') && \n           !param.startsWith('dateRange_');\n  }\n\n  /**\n   * Clear URL parameters\n   * @public\n   */\n  clearURL() {\n    window.history.pushState({}, '', window.location.pathname);\n    this.afs.state.reset();\n    if (this.afs.filter) {\n      this.afs.filter.clearAllFilters();\n    }\n  }\n\n  /**\n   * Get current URL parameters\n   * @public\n   * @returns {URLSearchParams}\n   */\n  getURLParams() {\n    return new URLSearchParams(window.location.search);\n  }\n\n  /**\n   * Check if URL has parameters\n   * @public\n   * @returns {boolean}\n   */\n  hasParams() {\n    return window.location.search.length > 1;\n  }\n\n  /**\n   * Get parameter value\n   * @public\n   * @param {string} param - Parameter name\n   * @returns {string|null}\n   */\n  getParam(param) {\n    return new URLSearchParams(window.location.search).get(param);\n  }\n}","/**\n * @fileoverview Range filter implementation for AFS\n */\n\nimport { debounce } from \"../utils\";\nimport { StyleManager } from \"../styles/StyleManager\";\n\nexport class RangeFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeRanges = new Map();\n    this.options = this.afs.options.get(\"slider\");\n    if (!this.afs.styleManager) {\n      this.afs.styleManager = new StyleManager(this.afs.options);\n    }\n\n    // Apply styles immediately\n    this.afs.styleManager.applyStyles();\n  }\n\n  /**\n   * @typedef {Object} RangeOptions\n   * @property {string} key - Data attribute key\n   * @property {string} type - Type of range ('number' or 'date')\n   * @property {HTMLElement} container - Container element\n   * @property {number|string} [min] - Minimum value\n   * @property {number|string} [max] - Maximum value\n   * @property {number} [step] - Step value\n   */\n\n  /**\n   * Add range slider\n   * @param {RangeOptions} options - Range slider options\n   */\n  addRangeSlider({ key, type, container, min, max, step = 1, ui }) {\n    this.afs.logger.debug(`Adding range slider for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error(\"Container element required for range slider\");\n      return;\n    }\n\n    // Calculate min/max if not provided\n    const values = this.calculateMinMax(key, type);\n    min = min ?? values.min;\n    max = max ?? values.max;\n\n    // Get global UI options and merge with slider-specific options\n    const globalUiOptions = this.afs.options.get(\"styles.slider.ui\") || {\n      showHistogram: false,\n      bins: 10,\n    };\n    const sliderUiOptions = {\n      ...globalUiOptions,\n      ...ui, // Override with slider-specific options if provided\n    };\n\n    // Only calculate histogram data if enabled\n    const histogramData = sliderUiOptions.showHistogram\n      ? this.calculateHistogramData(key, sliderUiOptions.bins)\n      : { counts: [], binEdges: [], max: 0 };\n\n    // Create slider elements\n    const elements = this.createSliderElements(histogramData, sliderUiOptions);\n    const state = this.initializeState(min, max, step, type);\n\n    // Store histogram data and UI options in state\n    state.ui = sliderUiOptions;\n    if (sliderUiOptions.showHistogram) {\n      state.histogram = histogramData;\n    }\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateSliderUI(key);\n\n    // Setup histogram highlight updates only if enabled\n    if (sliderUiOptions.showHistogram) {\n      this.setupHistogramHighlight(elements, state, histogramData.binEdges);\n    }\n\n    this.afs.logger.info(`Range slider added for ${key}`);\n  }\n  /**\n   * Calculate min and max values from items\n   * @private\n   */\n  calculateMinMax(key, type) {\n    const values = Array.from(this.afs.items)\n      .map((item) => {\n        const value = item.dataset[key];\n        return type === \"date\" ? new Date(value).getTime() : parseFloat(value);\n      })\n      .filter((value) => !isNaN(value));\n\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n    };\n  }\n\n  /**\n   * Create slider DOM elements\n   * @private\n   * @param {Object} histogramData - Histogram data\n   * @param {Object} sliderUiOptions - UI options for this slider\n   */\n  createSliderElements(histogramData, sliderUiOptions) {\n    const styles =\n      this.afs.options.get(\"styles\") || this.afs.styleManager.defaultStyles;\n    const colors = styles.colors || this.afs.styleManager.defaultStyles.colors;\n    const sliderOptions = this.afs.options.get(\"slider\") || {};\n\n    const container = document.createElement(\"div\");\n    container.className = \"afs-range-container\";\n\n    const slider = document.createElement(\"div\");\n    slider.className = sliderOptions.containerClass;\n\n    const track = document.createElement(\"div\");\n    track.className = sliderOptions.trackClass;\n\n    // Only add histogram if enabled in the slider-specific options\n    if (sliderUiOptions?.showHistogram && histogramData?.counts?.length > 0) {\n      const histogram = this.createHistogramBars(histogramData, colors);\n      slider.appendChild(histogram);\n    }\n\n    const selectedRange = document.createElement(\"div\");\n    selectedRange.className = sliderOptions.selectedClass;\n\n    const minThumb = document.createElement(\"div\");\n    minThumb.className = sliderOptions.thumbClass;\n\n    const maxThumb = document.createElement(\"div\");\n    maxThumb.className = sliderOptions.thumbClass;\n\n    const minValue = document.createElement(\"div\");\n    minValue.className = sliderOptions.valueClass;\n\n    const maxValue = document.createElement(\"div\");\n    maxValue.className = sliderOptions.valueClass;\n\n    // Build the slider\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n\n    container.appendChild(slider);\n\n    return {\n      container,\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    };\n  }\n\n  // Add helper method for creating histogram\n  createHistogram(data, colors) {\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    // Create histogram bars\n    data.forEach((value, index) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${value}%`;\n      bar.style.backgroundColor = colors.histogram;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Calculate histogram data from items\n   * @private\n   * @param {string} key - Data attribute key (e.g., 'price')\n   * @param {number} [bins=10] - Number of bins for histogram\n   * @returns {Object} Histogram data and metadata\n   */\n  calculateHistogramData(key, bins = 10) {\n    try {\n      const values = Array.from(this.afs.items)\n        .map((item) => parseFloat(item.dataset[key]))\n        .filter((value) => !isNaN(value));\n\n      if (values.length === 0) {\n        return { counts: [], binEdges: [], max: 0 };\n      }\n\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const binWidth = (max - min) / bins;\n\n      const counts = new Array(bins).fill(0);\n      const binEdges = new Array(bins + 1);\n\n      // Calculate bin edges\n      for (let i = 0; i <= bins; i++) {\n        binEdges[i] = min + i * binWidth;\n      }\n\n      // Count values in each bin\n      values.forEach((value) => {\n        if (value === max) {\n          counts[counts.length - 1]++;\n          return;\n        }\n\n        const binIndex = Math.floor((value - min) / binWidth);\n        counts[binIndex]++;\n      });\n\n      // Normalize heights to be more subtle\n      const maxCount = Math.max(...counts);\n      const normalizedCounts = counts.map(\n        (count) => Math.max(20, Math.round((count / maxCount) * 100)), // Minimum height of 20%\n      );\n\n      return {\n        counts: normalizedCounts,\n        binEdges,\n        max: maxCount,\n        min,\n        max,\n      };\n    } catch (error) {\n      this.afs.logger.error(\"Error calculating histogram:\", error);\n      return { counts: [], binEdges: [], max: 0 };\n    }\n  }\n\n  /**\n   * Setup histogram highlight on range changes\n   * @private\n   */\n  setupHistogramHighlight(elements, state, binEdges) {\n    const bars = elements.slider.querySelectorAll(\".afs-histogram-bar\");\n\n    const updateHistogram = () => {\n      const minVal = state.currentMin;\n      const maxVal = state.currentMax;\n\n      bars.forEach((bar, index) => {\n        const binStart = binEdges[index];\n        const binEnd = binEdges[index + 1];\n\n        // Highlight bars within the selected range\n        if (binStart >= minVal && binEnd <= maxVal) {\n          bar.classList.add(\"active\");\n        } else {\n          bar.classList.remove(\"active\");\n        }\n      });\n    };\n\n    // Update histogram on range changes using AFS instance\n    this.afs.on(\"rangeFilter\", () => updateHistogram());\n\n    // Initial update\n    updateHistogram();\n  }\n\n  /**\n   * Create histogram bars\n   * @private\n   */\n  createHistogramBars(histogramData, colors) {\n    const { counts } = histogramData;\n    const histogram = document.createElement(\"div\");\n    histogram.className = \"afs-histogram\";\n\n    counts.forEach((height) => {\n      const bar = document.createElement(\"div\");\n      bar.className = \"afs-histogram-bar\";\n      bar.style.height = `${height}%`;\n      histogram.appendChild(bar);\n    });\n\n    return histogram;\n  }\n\n  /**\n   * Initialize slider state\n   * @private\n   */\n  initializeState(min, max, step, type) {\n    return {\n      min,\n      max,\n      currentMin: min,\n      currentMax: max,\n      step,\n      type,\n      isDragging: false,\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    const {\n      slider,\n      track,\n      selectedRange,\n      minThumb,\n      maxThumb,\n      minValue,\n      maxValue,\n    } = elements;\n\n    slider.appendChild(track);\n    slider.appendChild(selectedRange);\n    slider.appendChild(minThumb);\n    slider.appendChild(maxThumb);\n    slider.appendChild(minValue);\n    slider.appendChild(maxValue);\n    container.appendChild(slider);\n  }\n\n  /**\n   * Setup event handlers for slider\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    const { minThumb, maxThumb } = elements;\n\n    const handleStart = (isMin) => (e) => {\n      e.preventDefault(); // Prevent scrolling while dragging on mobile\n      state.isDragging = true;\n      \n      // Get the correct event coordinates whether mouse or touch\n      const getEventXY = (event) => {\n        return event.touches ? event.touches[0] : event;\n      };\n\n      const moveHandler = (moveEvent) => {\n        const evt = getEventXY(moveEvent);\n        this.createMoveHandler(elements, state, key, isMin)(evt);\n      };\n\n      const stopHandler = () => {\n        state.isDragging = false;\n        \n        // Remove both mouse and touch event listeners\n        window.removeEventListener('mousemove', moveHandler);\n        window.removeEventListener('mouseup', stopHandler);\n        window.removeEventListener('touchmove', moveHandler);\n        window.removeEventListener('touchend', stopHandler);\n        window.removeEventListener('touchcancel', stopHandler);\n        \n        this.applyFilter(key);\n      };\n\n      // Add both mouse and touch event listeners\n      window.addEventListener('mousemove', moveHandler);\n      window.addEventListener('mouseup', stopHandler);\n      window.addEventListener('touchmove', moveHandler, { passive: false });\n      window.addEventListener('touchend', stopHandler);\n      window.addEventListener('touchcancel', stopHandler);\n    };\n\n    // Add both mouse and touch event listeners to thumbs\n    minThumb.addEventListener('mousedown', handleStart(true));\n    minThumb.addEventListener('touchstart', handleStart(true), { passive: false });\n    maxThumb.addEventListener('mousedown', handleStart(false));\n    maxThumb.addEventListener('touchstart', handleStart(false), { passive: false });\n  }\n\n  /**\n   * Update slider UI\n   * @private\n   */\n  updateSliderUI(key) {\n    const { state, elements } = this.activeRanges.get(key);\n    const { minThumb, maxThumb, selectedRange, minValue, maxValue } = elements;\n\n    // Calculate positions with padding consideration\n    const range = state.max - state.min;\n    const minPos = ((state.currentMin - state.min) / range) * 100;\n    const maxPos = ((state.currentMax - state.min) / range) * 100;\n\n    // Ensure thumbs stay within bounds\n    const clampedMinPos = Math.max(0, Math.min(minPos, 100));\n    const clampedMaxPos = Math.max(0, Math.min(maxPos, 100));\n\n    // Position thumbs\n    minThumb.style.left = `${clampedMinPos}%`;\n    maxThumb.style.left = `${clampedMaxPos}%`;\n\n    // Position selected range\n    selectedRange.style.left = `${clampedMinPos}%`;\n    selectedRange.style.width = `${clampedMaxPos - clampedMinPos}%`;\n\n    // Format values\n    const formatValue =\n      state.type === \"date\"\n        ? (value) => new Date(value).toLocaleDateString()\n        : (value) => value.toFixed(2);\n\n    // Update value labels\n    minValue.textContent = formatValue(state.currentMin);\n    maxValue.textContent = formatValue(state.currentMax);\n\n    // Position value labels considering bounds\n    minValue.style.left = `${clampedMinPos}%`;\n    maxValue.style.left = `${clampedMaxPos}%`;\n\n    // Handle edge cases for value label positioning\n    if (clampedMinPos < 5) {\n      minValue.style.transform = \"translateX(0)\";\n    } else if (clampedMinPos > 95) {\n      minValue.style.transform = \"translateX(-100%)\";\n    } else {\n      minValue.style.transform = \"translateX(-50%)\";\n    }\n\n    if (clampedMaxPos < 5) {\n      maxValue.style.transform = \"translateX(0)\";\n    } else if (clampedMaxPos > 95) {\n      maxValue.style.transform = \"translateX(-100%)\";\n    } else {\n      maxValue.style.transform = \"translateX(-50%)\";\n    }\n  }\n\n  // Also update the createMoveHandler to respect the padding\n  createMoveHandler(elements, state, key, isMin) {\n    this.afs.logger.debug(`Creating move handler for ${key}`);\n\n    const { track } = elements;\n    const PADDING = 5;\n\n    return debounce((e) => {\n      const clientX = e.touches ? e.touches[0].clientX : e.clientX;\n      const rect = track.getBoundingClientRect();\n      const totalWidth = rect.width;\n      const paddingPixels = (PADDING / 100) * totalWidth;\n\n      // Calculate percent with padding consideration\n      const rawPercent =\n        (clientX - rect.left - paddingPixels) /\n        (totalWidth - 2 * paddingPixels);\n      const percent = Math.min(Math.max(0, rawPercent), 1);\n\n      // Calculate value considering the full range\n      const value = state.min + (state.max - state.min) * percent;\n      const stepped = Math.round(value / state.step) * state.step;\n\n      if (isMin) {\n        state.currentMin = Math.min(stepped, state.currentMax);\n      } else {\n        state.currentMax = Math.max(stepped, state.currentMin);\n      }\n\n      this.updateSliderUI(key);\n    }, 16); // ~60fps\n  }\n\n  /**\n   * Apply range filter\n   * @private\n   */\n  applyFilter(key) {\n    this.afs.logger.debug(`Applying range filter for ${key}`);\n\n    const { state } = this.activeRanges.get(key);\n\n    this.afs.items.forEach((item) => {\n      const value =\n        state.type === \"date\"\n          ? new Date(item.dataset[key]).getTime()\n          : parseFloat(item.dataset[key]);\n\n      if (value >= state.currentMin && value <= state.currentMax) {\n        this.afs.showItem(item);\n      } else {\n        this.afs.hideItem(item);\n      }\n    });\n\n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit(\"rangeFilter\", {\n      key,\n      min: state.currentMin,\n      max: state.currentMax,\n    });\n  }\n\n  /**\n   * Get current range values\n   * @param {string} key - Range key\n   * @returns {Object} Current range values\n   */\n  getRangeValues(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return null;\n\n    return {\n      min: range.state.currentMin,\n      max: range.state.currentMax,\n      type: range.state.type,\n    };\n  }\n\n  /**\n   * Set range values\n   * @param {string} key - Range key\n   * @param {number} min - Minimum value\n   * @param {number} max - Maximum value\n   */\n  setRangeValues(key, min, max) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.state.currentMin = min;\n    range.state.currentMax = max;\n    this.updateSliderUI(key);\n    this.applyFilter(key);\n  }\n\n  /**\n   * Remove range slider\n   * @param {string} key - Range key\n   */\n  removeRangeSlider(key) {\n    const range = this.activeRanges.get(key);\n    if (!range) return;\n\n    range.elements.slider.remove();\n    this.activeRanges.delete(key);\n    this.afs.logger.info(`Range slider removed for ${key}`);\n  }\n}\n","/**\n * @fileoverview Date filter implementation for AFS\n */\n\nimport { debounce } from '../utils';\n\nexport class DateFilter {\n  constructor(afs) {\n    this.afs = afs;\n    this.activeDateRanges = new Map();\n    this.defaultFormat = this.afs.options.get('dateFormat') || 'YYYY-MM-DD';\n  }\n\n  /**\n   * @typedef {Object} DateRangeOptions\n   * @property {string} key - Data attribute key\n   * @property {HTMLElement} container - Container element\n   * @property {Date} [minDate] - Minimum date\n   * @property {Date} [maxDate] - Maximum date\n   * @property {string} [format] - Date format (default: YYYY-MM-DD)\n   */\n\n  /**\n   * Add date range filter\n   * @param {DateRangeOptions} options - Date range options\n   */\n  addDateRange({ key, container, minDate, maxDate, format = this.defaultFormat }) {\n    this.afs.logger.debug(`Adding date range for ${key}`);\n\n    if (!container) {\n      this.afs.logger.error('Container element required for date range');\n      return;\n    }\n\n    // Calculate min/max dates if not provided\n    const dates = this.calculateMinMaxDates(key);\n    minDate = minDate ?? dates.min;\n    maxDate = maxDate ?? dates.max;\n\n    // Create date picker elements\n    const elements = this.createDateElements();\n    const state = this.initializeState(minDate, maxDate, format);\n\n    // Add elements to container\n    this.appendElements(container, elements);\n\n    // Setup event handlers\n    this.setupEventHandlers(elements, state, key);\n\n    // Store state\n    this.activeDateRanges.set(key, { state, elements });\n\n    // Initial update\n    this.updateDateUI(key);\n\n    this.afs.logger.info(`Date range added for ${key}`);\n  }\n\n  /**\n   * Calculate min and max dates from items\n   * @private\n   */\n  calculateMinMaxDates(key) {\n    try {\n      const validDates = Array.from(this.afs.items)\n        .map(item => {\n          if (!item || !item.dataset || !item.dataset[key]) {\n            return null;\n          }\n          const date = new Date(item.dataset[key]);\n          return isNaN(date.getTime()) ? null : date;\n        })\n        .filter(date => date !== null);\n  \n      if (validDates.length === 0) {\n        // Return default date range if no valid dates found\n        const today = new Date();\n        return {\n          min: new Date(today.getFullYear(), 0, 1), // January 1st of current year\n          max: new Date(today.getFullYear(), 11, 31) // December 31st of current year\n        };\n      }\n  \n      return {\n        min: new Date(Math.min(...validDates)),\n        max: new Date(Math.max(...validDates))\n      };\n    } catch (error) {\n      this.afs.logger.error('Error calculating date range:', error);\n      // Return default date range on error\n      const today = new Date();\n      return {\n        min: new Date(today.getFullYear(), 0, 1),\n        max: new Date(today.getFullYear(), 11, 31)\n      };\n    }\n  }\n\n  /**\n   * Create date picker elements\n   * @private\n   */\n  createDateElements() {\n    this.afs.logger.debug('Creating date picker elements');\n\n    const container = document.createElement('div');\n    container.className = 'afs-date-range-container';\n\n    const startContainer = document.createElement('div');\n    startContainer.className = 'afs-date-input-wrapper';\n    \n    const startLabel = document.createElement('label');\n    startLabel.textContent = 'Start Date';\n    \n    const startInput = document.createElement('input');\n    startInput.type = 'date';\n    startInput.className = 'afs-date-input start-date';\n\n    const endContainer = document.createElement('div');\n    endContainer.className = 'afs-date-input-wrapper';\n    \n    const endLabel = document.createElement('label');\n    endLabel.textContent = 'End Date';\n    \n    const endInput = document.createElement('input');\n    endInput.type = 'date';\n    endInput.className = 'afs-date-input end-date';\n\n    startContainer.appendChild(startLabel);\n    startContainer.appendChild(startInput);\n    endContainer.appendChild(endLabel);\n    endContainer.appendChild(endInput);\n\n    container.appendChild(startContainer);\n    container.appendChild(endContainer);\n\n    return {\n      container,\n      startInput,\n      endInput\n    };\n  }\n\n  /**\n   * Initialize date filter state\n   * @private\n   */\n  initializeState(minDate, maxDate, format) {\n    return {\n      minDate,\n      maxDate,\n      currentStartDate: minDate,\n      currentEndDate: maxDate,\n      format\n    };\n  }\n\n  /**\n   * Append elements to container\n   * @private\n   */\n  appendElements(container, elements) {\n    container.appendChild(elements.container);\n  }\n\n  /**\n   * Setup event handlers\n   * @private\n   */\n  setupEventHandlers(elements, state, key) {\n    this.afs.logger.debug(`Setting up event handlers for date range ${key}`);\n\n    const { startInput, endInput } = elements;\n\n    const handleDateChange = debounce(() => {\n      const startDate = new Date(startInput.value);\n      const endDate = new Date(endInput.value);\n\n      if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {\n        state.currentStartDate = startDate;\n        state.currentEndDate = endDate;\n        this.applyDateFilter(key);\n      }\n    }, 300);\n\n    startInput.addEventListener('change', handleDateChange);\n    endInput.addEventListener('change', handleDateChange);\n  }\n\n  /**\n   * Update date picker UI\n   * @private\n   */\n  updateDateUI(key) {\n    try {\n      const { state, elements } = this.activeDateRanges.get(key);\n      const { startInput, endInput } = elements;\n  \n      // Format dates for input\n      const formatDate = date => {\n        try {\n          const d = new Date(date);\n          if (isNaN(d.getTime())) {\n            throw new Error('Invalid date');\n          }\n          return d.toISOString().split('T')[0];\n        } catch (error) {\n          this.afs.logger.error('Error formatting date:', error);\n          return '';\n        }\n      };\n  \n      // Set min/max constraints\n      startInput.min = formatDate(state.minDate);\n      startInput.max = formatDate(state.maxDate);\n      endInput.min = formatDate(state.minDate);\n      endInput.max = formatDate(state.maxDate);\n  \n      // Set current values\n      startInput.value = formatDate(state.currentStartDate);\n      endInput.value = formatDate(state.currentEndDate);\n    } catch (error) {\n      this.afs.logger.error('Error updating date UI:', error);\n    }\n  }\n\n  /**\n   * Apply date filter\n   * @private\n   */\n  applyDateFilter(key) {\n    this.afs.logger.info(`Applying date filter for ${key}`);\n    const { state } = this.activeDateRanges.get(key);\n  \n    this.afs.items.forEach(item => {\n      try {\n        // Check if item and dataset exist\n        if (!item || !item.dataset || !item.dataset[key]) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        const itemDate = new Date(item.dataset[key]);\n        \n        // Check if date is valid\n        if (isNaN(itemDate.getTime())) {\n          this.afs.hideItem(item);\n          return;\n        }\n  \n        // Set time to midnight for consistent comparison\n        const startDate = new Date(state.currentStartDate);\n        startDate.setHours(0, 0, 0, 0);\n        \n        const endDate = new Date(state.currentEndDate);\n        endDate.setHours(23, 59, 59, 999);\n        \n        const compareDate = new Date(itemDate);\n        compareDate.setHours(0, 0, 0, 0);\n  \n        if (compareDate >= startDate && compareDate <= endDate) {\n          this.afs.showItem(item);\n        } else {\n          this.afs.hideItem(item);\n        }\n      } catch (error) {\n        this.afs.logger.error('Error filtering item by date:', error);\n        this.afs.hideItem(item);\n      }\n    });\n  \n    this.afs.updateCounter();\n    this.afs.urlManager.updateURL();\n    this.afs.emit('dateFilter', {\n      key,\n      startDate: state.currentStartDate,\n      endDate: state.currentEndDate\n    });\n  }\n\n  /**\n   * Get current date range\n   * @param {string} key - Date range key\n   * @returns {Object} Current date range\n   */\n  getDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return null;\n\n    return {\n      startDate: range.state.currentStartDate,\n      endDate: range.state.currentEndDate\n    };\n  }\n\n  /**\n   * Set date range\n   * @param {string} key - Date range key\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   */\n  setDateRange(key, startDate, endDate) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.state.currentStartDate = startDate;\n    range.state.currentEndDate = endDate;\n    this.updateDateUI(key);\n    this.applyDateFilter(key);\n  }\n\n  /**\n   * Remove date range\n   * @param {string} key - Date range key\n   */\n  removeDateRange(key) {\n    const range = this.activeDateRanges.get(key);\n    if (!range) return;\n\n    range.elements.container.remove();\n    this.activeDateRanges.delete(key);\n    this.afs.logger.info(`Date range removed for ${key}`);\n  }\n}","/**\n * @fileoverview Advanced Filter System - Main Class\n */\nimport { Logger } from \"./core/Logger\";\nimport { Options } from \"./core/Options\";\nimport { State } from \"./core/State\";\nimport { StyleManager } from \"./styles/StyleManager\";\nimport { EventEmitter } from \"./core/EventEmitter\";\n\nimport { Filter } from \"./features/Filter\";\nimport { InputRangeFilter } from \"./features/InputRangeFilter\";\nimport { Search } from \"./features/Search\";\nimport { Sort } from \"./features/Sort\";\nimport { Pagination } from \"./features/Pagination\";\nimport { URLManager } from \"./features/URLManager\";\nimport { RangeFilter } from \"./features/RangeFilter\";\nimport { DateFilter } from \"./features/DateFilter\";\n\nimport { debounce } from \"./utils\";\n\n// Version\nexport const VERSION = '1.2.8';\n\nexport class AFS extends EventEmitter {\n  /**\n   * @param {Object} options - Configuration options\n   */\n  constructor(options = {}) {\n    super();\n    this.initializeCore(options);\n  }\n\n  /**\n   * Initialize core components\n   * @private\n   */\n  initializeCore(options) {\n    try {\n      this.options = new Options(options);\n      \n      // Setup logger with options\n      const debug = this.options.get(\"debug\");\n      const logLevel = this.options.get(\"logLevel\");\n      this.logger = new Logger(debug, logLevel);\n      this.logger.debug(\"Logger initialized with debug:\", debug, \"level:\", logLevel);\n  \n      this.state = new State();\n      this.styleManager = new StyleManager(this.options);\n  \n      this.initializeDOM();\n      this.initializeFeatures();\n      this.setupLifecycle();\n    } catch (error) {\n      console.error(\"AFS initialization error:\", error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize DOM elements\n   * @private\n   */\n  initializeDOM() {\n    this.logger.debug(\"Initializing DOM elements\");\n\n    this.container = document.querySelector(\n      this.options.get(\"containerSelector\"),\n    );\n    if (!this.container) {\n      throw new Error(\n        `Container not found: ${this.options.get(\"containerSelector\")}`,\n      );\n    }\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    if (this.items.length === 0) {\n      this.logger.warn(\"No items found in container\");\n    }\n\n    this.state.setState(\"items.total\", this.items.length);\n    this.state.setState(\"items.visible\", new Set(this.items));\n  }\n\n  /**\n   * Initialize features\n   * @private\n   */\n  initializeFeatures() {\n    this.logger.debug(\"Initializing features\");\n\n    // Then initialize other features\n    this.filter = new Filter(this);\n    this.search = new Search(this);\n    this.sort = new Sort(this);\n    this.rangeFilter = new RangeFilter(this);\n    this.urlManager = new URLManager(this);\n    this.dateFilter = new DateFilter(this);\n    this.pagination = new Pagination(this);\n    this.inputRangeFilter = new InputRangeFilter(this);\n\n    // Apply styles\n    this.styleManager.applyStyles();\n\n    // Load initial state from URL\n    this.urlManager.loadFromURL();\n  }\n\n  /**\n   * Setup lifecycle events\n   * @private\n   */\n  setupLifecycle() {\n    if (this.options.get(\"responsive\")) {\n      window.addEventListener(\"resize\", this.handleResize.bind(this));\n    }\n\n    if (this.options.get(\"preserveState\")) {\n      document.addEventListener(\n        \"visibilitychange\",\n        this.handleVisibilityChange.bind(this),\n      );\n    }\n\n    if (this.options.get(\"observeDOM\")) {\n      this.setupMutationObserver();\n    }\n\n    this.emit(\"initialized\", {\n      itemCount: this.items.length,\n      options: this.options.export(),\n    });\n  }\n\n  // Item Management Methods\n  /**\n   * Show item with animation\n   * @public\n   * @param {HTMLElement} item - Item to show\n   */\n  showItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.add(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Remove hidden class but keep opacity 0 initially\n    item.classList.remove(this.options.get(\"hiddenClass\"));\n\n    // Set initial animation state\n    item.style.opacity = \"0\";\n    item.style.transform = \"scale(0.95)\";\n    item.style.display = \"\"; // Ensure item is not display: none\n\n    // Force reflow before starting animation\n    item.offsetHeight;\n\n    // Add transition class if not present\n    const transitionClass = this.options.get(\"transitionClass\");\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start animation in next frame\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        // Double RAF for reliable animation\n        item.style.opacity = \"1\";\n        item.style.transform = \"scale(1)\";\n      });\n    });\n\n    // Clean up after animation\n    const duration = this.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      // Only clean up if item is still meant to be visible\n      if (visibleItems.has(item)) {\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Hide item with animation\n   * @public\n   * @param {HTMLElement} item - Item to hide\n   */\n  hideItem(item) {\n    // Update state first\n    const visibleItems = this.state.getState().items.visible;\n    visibleItems.delete(item);\n    this.state.setState(\"items.visible\", visibleItems);\n\n    // Add transition class if not present\n    const transitionClass = this.options.get(\"transitionClass\");\n    if (!item.classList.contains(transitionClass)) {\n      item.classList.add(transitionClass);\n    }\n\n    // Start hide animation\n    requestAnimationFrame(() => {\n      item.style.opacity = \"0\";\n      item.style.transform = \"scale(0.95)\";\n    });\n\n    // Add hidden class and clean up after animation\n    const duration = this.options.get(\"animation.duration\") || 300;\n    setTimeout(() => {\n      // Only hide if the item is still meant to be hidden\n      if (!visibleItems.has(item)) {\n        item.classList.add(this.options.get(\"hiddenClass\"));\n        // Clean up styles\n        item.style.transform = \"\";\n        item.style.opacity = \"\";\n      }\n    }, duration);\n  }\n\n  /**\n   * Add new items\n   * @public\n   */\n  addItems(newItems) {\n    const items = Array.isArray(newItems) ? newItems : [newItems];\n    const fragment = document.createDocumentFragment();\n\n    items.forEach((item) => {\n      fragment.appendChild(item);\n      this.state.getState().items.visible.add(item);\n    });\n\n    this.container.appendChild(fragment);\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.filter.applyFilters();\n  }\n\n  /**\n   * Remove items\n   * @public\n   */\n  removeItems(itemsToRemove) {\n    const items = Array.isArray(itemsToRemove)\n      ? itemsToRemove\n      : [itemsToRemove];\n    const visibleItems = this.state.getState().items.visible;\n\n    items.forEach((item) => {\n      visibleItems.delete(item);\n      item.remove();\n    });\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.updateCounter();\n  }\n\n  // State Management Methods\n  /**\n   * Save current state\n   * @public\n   */\n  saveState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    const state = {\n      filters: Array.from(this.filter.getActiveFilters()),\n      search: this.search.getValue(),\n      sort: this.sort.getCurrentSort(),\n      pagination: this.pagination.getPageInfo(),\n      timestamp: Date.now(),\n    };\n\n    localStorage.setItem(\"afs_state\", JSON.stringify(state));\n    this.logger.debug(\"State saved\");\n  }\n\n  /**\n   * Restore saved state\n   * @public\n   */\n  restoreState() {\n    if (!this.options.get(\"preserveState\")) return;\n\n    try {\n      const saved = localStorage.getItem(\"afs_state\");\n      if (!saved) return;\n\n      const state = JSON.parse(saved);\n      if (Date.now() - state.timestamp > this.options.get(\"stateExpiry\")) {\n        localStorage.removeItem(\"afs_state\");\n        return;\n      }\n\n      this.setState(state);\n      this.logger.debug(\"State restored\");\n    } catch (error) {\n      this.logger.error(\"Error restoring state:\", error);\n    }\n  }\n\n  /**\n   * Get current state\n   * @public\n   */\n  getState() {\n    return this.state.export();\n  }\n\n  /**\n   * Set new state\n   * @public\n   */\n  setState(newState) {\n    this.state.import(newState);\n    this.refresh();\n  }\n\n  // Update Methods\n  /**\n   * Update counter display\n   * @public\n   */\n  updateCounter() {\n    // Get counter element\n    const counterElement = document.querySelector(\n      this.options.get(\"counterSelector\"),\n    );\n    if (!counterElement) return;\n\n    try {\n      // Get count values\n      const total = this.items.length;\n      const visible = this.state.getState().items.visible.size;\n      const filtered = total - visible;\n\n      // Get counter options with defaults\n      const counterOpts =\n        this.options.get(\"counter\") || Options.defaults.counter;\n      const template = counterOpts.template || \"Showing {visible} of {total}\";\n      const formatter =\n        counterOpts.formatter || ((num) => num.toLocaleString());\n\n      // Format numbers\n      const formattedVisible = formatter(visible);\n      const formattedTotal = formatter(total);\n      const formattedFiltered = formatter(filtered);\n\n      // Build counter text\n      let counterText = template\n        .replace(\"{visible}\", formattedVisible)\n        .replace(\"{total}\", formattedTotal)\n        .replace(\"{filtered}\", formattedFiltered);\n\n      // Add filtered count if enabled\n      if (filtered > 0 && counterOpts.showFiltered) {\n        const filteredTemplate =\n          counterOpts.filteredTemplate || \"({filtered} filtered)\";\n        counterText +=\n          \" \" + filteredTemplate.replace(\"{filtered}\", formattedFiltered);\n      }\n\n      // Show no results message if applicable\n      if (visible === 0 && counterOpts.noResultsTemplate) {\n        counterText = counterOpts.noResultsTemplate;\n      }\n\n      // Update counter element\n      counterElement.textContent = counterText;\n\n      // Emit event\n      this.emit(\"counterUpdated\", {\n        total,\n        visible,\n        filtered,\n        formattedTotal,\n        formattedVisible,\n        formattedFiltered,\n      });\n    } catch (error) {\n      // Fallback to basic counter if anything fails\n      this.logger.error(\"Error updating counter:\", error);\n      counterElement.textContent = `${\n        this.state.getState().items.visible.size\n      }/${this.items.length}`;\n    }\n  }\n\n  /**\n   * Update options\n   * @public\n   */\n  updateOptions(newOptions) {\n    this.options.update(newOptions);\n    this.styleManager.updateStyles(newOptions);\n    this.refresh();\n  }\n\n  /**\n   * Refresh system\n   * @public\n   */\n  refresh() {\n    this.logger.debug(\"Refreshing AFS\");\n\n    this.items = this.container.querySelectorAll(\n      this.options.get(\"itemSelector\"),\n    );\n    this.state.setState(\"items.total\", this.items.length);\n\n    this.filter.applyFilters();\n    this.search.search(this.search.getValue());\n    this.pagination.update();\n\n    this.emit(\"refreshed\", { itemCount: this.items.length });\n  }\n\n  // Event Handlers\n  /**\n   * Handle resize\n   * @private\n   */\n  handleResize = debounce(() => {\n    this.emit(\"resize\");\n    this.refresh();\n  }, 250);\n\n  /**\n   * Handle visibility change\n   * @private\n   */\n  handleVisibilityChange() {\n    if (document.hidden) {\n      this.emit(\"hidden\");\n      this.saveState();\n    } else {\n      this.emit(\"visible\");\n      this.restoreState();\n    }\n  }\n\n  /**\n   * Setup mutation observer\n   * @private\n   */\n  setupMutationObserver() {\n    const observer = new MutationObserver((mutations) => {\n      if (mutations.some((mutation) => mutation.type === \"childList\")) {\n        this.refresh();\n      }\n    });\n\n    observer.observe(this.container, {\n      childList: true,\n      subtree: true,\n    });\n  }\n\n  // Utility Methods\n  /**\n   * Get version\n   * @public\n   */\n  getVersion() {\n    return VERSION;\n  }\n\n  /**\n   * Check feature support\n   * @public\n   */\n  isFeatureSupported(feature) {\n    const supportedFeatures = {\n      search: !!this.search,\n      pagination: true,\n      animation:\n        typeof document.createElement(\"div\").style.transition !== \"undefined\",\n      urlState: typeof window.history.pushState === \"function\",\n      localStorage: (() => {\n        try {\n          localStorage.setItem(\"test\", \"test\");\n          localStorage.removeItem(\"test\");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      })(),\n    };\n\n    return !!supportedFeatures[feature];\n  }\n\n  /**\n   * Destroy instance\n   * @public\n   */\n  destroy() {\n    this.logger.debug(\"Destroying AFS instance\");\n\n    // Remove event listeners\n    window.removeEventListener(\"resize\", this.handleResize);\n    document.removeEventListener(\n      \"visibilitychange\",\n      this.handleVisibilityChange,\n    );\n\n    // Destroy features\n    this.filter.destroy();\n    this.search.destroy();\n    this.sort.destroy();\n    this.pagination.destroy();\n    this.rangeFilter.destroy();\n\n    // Cleanup\n    this.styleManager.removeStyles();\n    this.state.reset();\n    localStorage.removeItem(\"afs_state\");\n\n    // Reset items\n    this.items.forEach((item) => {\n      item.style = \"\";\n      item.classList.remove(\n        this.options.get(\"hiddenClass\"),\n        this.options.get(\"activeClass\"),\n      );\n    });\n\n    this.emit(\"destroyed\");\n  }\n}\n"],"names":["Logger","constructor","debug","logLevel","this","enabled","level","levels","error","warn","info","_log","args","timestamp","Date","toLocaleTimeString","prefix","toUpperCase","console","log","apply","setDebugMode","previousState","hasOwnProperty","getState","Options","static","containerSelector","itemSelector","filterButtonSelector","filterDropdownSelector","searchInputSelector","counterSelector","sortButtonSelector","activeClass","hiddenClass","activeSortClass","transitionClass","filterMode","groupMode","searchKeys","debounceTime","responsive","preserveState","stateExpiry","observeDOM","dateFormat","counter","template","showFiltered","filteredTemplate","noResultsTemplate","formatter","num","toLocaleString","styles","slider","ui","showHistogram","bins","track","radius","background","selected","thumb","size","histogram","bar","pagination","button","border","borderRadius","padding","color","active","hover","colors","primary","text","textHover","containerClass","trackClass","thumbClass","valueClass","selectedClass","itemsPerPage","container","pageButtonClass","activePageClass","scrollToTop","scrollOffset","scrollBehavior","animation","type","duration","easing","inClass","outClass","userOptions","options","mergeOptions","defaults","initializeStyles","validate","defaultStyles","currentStyles","target","source","result","key","Array","isArray","undefined","requiredSelectors","selector","Error","includes","length","get","path","split","reduce","obj","set","value","parts","last","pop","update","updates","reset","export","State","state","filters","current","Set","groups","Map","ranges","dateRanges","mode","search","query","keys","sort","orders","items","visible","total","currentPage","totalPages","setState","i","from","entries","import","importedState","StyleManager","styleElement","createBaseStyles","animationDuration","animationEasing","primaryColor","backgroundColor","textColor","textHoverColor","rgbValues","match","parseInt","encodeURIComponent","addTransitionStyles","style","document","createElement","textContent","head","appendChild","createRangeStyles","sliderOptions","sliderStyles","createDateStyles","createInputRangeStyles","applyStyles","createPaginationStyles","createSearchStyles","fallbackStyles","paginationOptions","buttonClass","paginationStyles","searchClass","updateStyles","newOptions","removeStyles","remove","EventEmitter","events","onceEvents","on","eventName","callback","has","add","off","once","onceWrapper","delete","emit","forEach","removeAllListeners","clear","listenerCount","Animation","afs","animations","fade","in","opacity","transform","transitionTimingFunction","out","slide","scale","rotate","flip","zoom","bounce","blur","filter","skew","slideInLeft","slideInRight","fadeInUp","fadeInDown","bounceIn","applyShowAnimation","item","animationType","classList","display","visibility","requestAnimationFrame","Object","assign","applyHideAnimation","handleTransitionEnd","removeEventListener","addEventListener","updateOptions","timing","querySelector","setAnimation","Filter","filterButtons","activeFilters","currentFilters","filterGroups","sortOrders","setupFilters","logger","filterSelector","querySelectorAll","filterValue","dataset","bindFilterEvent","dropdown","bindDropdownEvent","setLogic","logic","applyFilters","clearAllFilters","_","allButton","findAllButton","select","filterType","getAttribute","id","replace","toLowerCase","allOption","find","option","endsWith","event","Event","bubbles","cancelable","dispatchEvent","selectedIndex","urlManager","updateURL","selectedValue","existingFilter","startsWith","resetFilters","toggleFilter","animationPromises","promise","Promise","resolve","setTimeout","push","visibleItems","all","then","updateCounter","handleFilterClick","contains","previouslyVisible","itemMatchesFilters","parseFloat","emitFilterEvents","itemCategories","categories","filtersByType","every","values","some","itemMatchesAnyFilter","itemMatchesAllFilters","itemMatchesFilterGroups","groupMatches","map","group","operator","matches","nowVisible","added","removed","addFilterGroup","groupId","validOperator","removeFilterGroup","setGroupMode","validMode","addFilter","removeFilter","setFilterMode","getActiveFilters","getFilterGroups","addFilterButton","sortWithOrder","newOrder","sortType","determineSortType","a","b","valueA","getSortValue","valueB","compareValues","reorderItems","order","shuffle","j","Math","floor","random","itemCount","isNaN","test","getTime","comparison","fragment","createDocumentFragment","getCurrentSortOrder","clearSortOrders","checkbox","checked","setValue","refresh","removeFilterButton","destroy","debounce","func","wait","immediate","timeout","context","callNow","clearTimeout","later","InputRangeFilter","activeRanges","addInputRange","min","max","step","label","calculateMinMax","elements","createInputElements","initializeState","appendElements","setupEventHandlers","updateInputUI","className","labelElement","minWrapper","minLabel","minInput","maxWrapper","maxLabel","maxInput","currentMin","currentMax","handleInputChange","minValue","maxValue","applyFilter","hideItem","itemValue","showItem","getRange","range","setRange","removeInputRange","Search","searchInput","minSearchLength","highlightClass","setupSearch","searchSelector","bindSearchEvents","debouncedSearch","e","clearSearch","preventDefault","normalizedQuery","normalizeQuery","regex","createSearchRegex","searchText","getItemSearchText","highlightMatches","removeHighlights","trim","pattern","Boolean","word","join","RegExp","words","highlightedText","wordRegex","innerHTML","highlight","replaceWith","getValue","updateConfig","handleClear","handleEnter","Sort","sortButtons","setupSort","sortSelector","buttons","sortKey","direction","sortDirection","bindSortEvent","sortData","updateSortButtonState","btn","indicator","isFinite","prototype","call","date","String","modifier","needsReordering","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","sortMultiple","criteria","criterion","index","sortTypes","sortWithComparator","comparator","comparatorName","name","buttonCount","data","getCurrentSort","addSortButton","removeSortButton","Pagination","setupPagination","itemsContainer","bindEvents","closest","page","goToPage","ceil","currentState","updateVisibility","renderPagination","startIndex","endIndex","itemsToShow","slice","controls","createPaginationControls","showPrevNext","prevButton","createPageButton","disabled","class","calculatePageRange","start","createEllipsis","end","nextButton","span","maxButtons","targetPage","previousPage","window","scrollTo","top","offsetTop","behavior","setPaginationMode","showAllItems","URLManager","defaultParams","URLSearchParams","setupPopStateHandler","loadFromURL","params","addFiltersToURL","addRangesToURL","addSearchToURL","addSortToURL","addPaginationToURL","pushState","toISOString","queryString","newURL","location","pathname","href","history","filterParams","isRegularFilter","val","processSearchFromURL","processSortFromURL","processPaginationFromURL","fromEntries","processFiltersFromURL","hasFilters","processRangesFromURL","rangeKey","Number","str","searchQuery","sortParam","perPage","param","clearURL","getURLParams","hasParams","getParam","RangeFilter","styleManager","addRangeSlider","sliderUiOptions","histogramData","calculateHistogramData","counts","binEdges","createSliderElements","updateSliderUI","setupHistogramHighlight","createHistogramBars","selectedRange","minThumb","maxThumb","createHistogram","height","binWidth","fill","maxCount","count","round","bars","updateHistogram","minVal","maxVal","isDragging","handleStart","isMin","moveHandler","moveEvent","evt","touches","createMoveHandler","stopHandler","passive","maxPos","clampedMinPos","clampedMaxPos","left","width","formatValue","toLocaleDateString","toFixed","clientX","rect","getBoundingClientRect","totalWidth","paddingPixels","PADDING","stepped","getRangeValues","setRangeValues","removeRangeSlider","DateFilter","activeDateRanges","defaultFormat","addDateRange","minDate","maxDate","format","dates","calculateMinMaxDates","createDateElements","updateDateUI","validDates","today","getFullYear","startContainer","startLabel","startInput","endContainer","endLabel","endInput","currentStartDate","currentEndDate","handleDateChange","startDate","endDate","applyDateFilter","formatDate","d","itemDate","setHours","compareDate","getDateRange","setDateRange","removeDateRange","VERSION","super","initializeCore","initializeDOM","initializeFeatures","setupLifecycle","rangeFilter","dateFilter","inputRangeFilter","handleResize","bind","handleVisibilityChange","setupMutationObserver","addItems","newItems","removeItems","itemsToRemove","saveState","getPageInfo","now","localStorage","setItem","JSON","stringify","restoreState","saved","getItem","parse","removeItem","newState","counterElement","filtered","counterOpts","formattedVisible","formattedTotal","formattedFiltered","counterText","hidden","MutationObserver","mutations","mutation","observe","childList","subtree","getVersion","isFeatureSupported","feature","transition","urlState"],"mappings":"6BAIO,MAAMA,EACXC,WAAAA,CAAYC,GAAQ,EAAOC,EAAW,QACpCC,KAAKC,QAAUH,EACfE,KAAKE,MAAQH,EACbC,KAAKG,OAAS,CACZC,MAAO,EACPC,KAAM,EACNC,KAAM,EACNR,MAAO,EAOX,CAMAS,CAAAA,CAAKL,KAAUM,GAEb,IAAc,UAAVN,GAAqBF,KAAKC,UAEPD,KAAKG,OAAOD,IADPF,KAAKG,OAAOH,KAAKE,OAGJ,CACrC,MAAMO,GAAY,IAAIC,MAAOC,qBACvBC,EAAS,QAAQV,EAAMW,kBAGPC,QAAQZ,IAAUY,QAAQC,KAClCC,KAAMF,QAAUF,EAAQH,KAAcD,EACtD,CAEJ,CAMAJ,KAAAA,IAASI,GAEPR,KAAKO,EAAK,WAAYC,EACxB,CAMAH,IAAAA,IAAQG,GACNR,KAAKO,EAAK,UAAWC,EACvB,CAMAF,IAAAA,IAAQE,GACNR,KAAKO,EAAK,UAAWC,EACvB,CAMAV,KAAAA,IAASU,GACPR,KAAKO,EAAK,WAAYC,EACxB,CAMAS,YAAAA,CAAahB,EAASC,EAAQ,QAC5B,MAAMgB,EAAgBlB,KAAKC,QAC3BD,KAAKC,UAAkBA,EAEnBD,KAAKG,OAAOgB,eAAejB,KAC7BF,KAAKE,MAAQA,IAIXF,KAAKC,SAAWiB,IAClBlB,KAAKO,EAAK,OACR,cAAcP,KAAKC,QAAU,UAAY,0BAA0BD,KAAKE,QAG9E,CAOAkB,QAAAA,GACE,MAAO,CACLnB,QAASD,KAAKC,QACdC,MAAOF,KAAKE,MAEhB,ECrGK,MAAMmB,EAiCXC,gBAAkB,CAEhBC,kBAAmB,wBACnBC,aAAc,mBACdC,qBAAsB,kBACtBC,uBAAwB,uBACxBC,oBAAqB,qBACrBC,gBAAiB,sBACjBC,mBAAoB,gBAGpBC,YAAa,SACbC,YAAa,SACbC,gBAAiB,cACjBC,gBAAiB,iBAGjBC,WAAY,KACZC,UAAW,MACXC,WAAY,CAAC,SACbC,aAAc,IAGdvC,OAAO,EACPC,SAAU,OAGVuC,YAAY,EACZC,eAAe,EACfC,YAAa,MACbC,YAAY,EAGZC,WAAY,aAEZC,QAAS,CACPC,SAAU,+BACVC,cAAc,EACdC,iBAAkB,wBAClBC,kBAAmB,iBACnBC,UAAYC,GAAQA,EAAIC,kBAI1BC,OAAQ,CACNC,OAAQ,CAENC,GAAI,CACFC,eAAe,EACfC,KAAM,GACNC,MAAO,CACLC,OAAQ,IACRC,WAAY,WAEdC,SAAU,CACRD,WAAY,QAEdE,MAAO,CACLH,OAAQ,MACRI,KAAM,OACNH,WAAY,QAEdI,UAAW,CACTJ,WAAY,UACZK,IAAK,CACHL,WAAY,WAKpBM,WAAY,CACVX,GAAI,CACFY,OAAQ,CACNP,WAAY,cACZQ,OAAQ,iBACRC,aAAc,MACdC,QAAS,WACTC,MAAO,OACPC,OAAQ,CACNZ,WAAY,OACZW,MAAO,QAETE,MAAO,CACLb,WAAY,OACZW,MAAO,WAKfG,OAAQ,CACNC,QAAS,OACTf,WAAY,UACZgB,KAAM,OACNC,UAAW,SAKfvB,OAAQ,CACNwB,eAAgB,mBAChBC,WAAY,kBACZC,WAAY,kBACZC,WAAY,kBACZC,cAAe,sBAIjBhB,WAAY,CACV/D,SAAS,EACTgF,aAAc,GACdC,UAAW,4BACXC,gBAAiB,kBACjBC,gBAAiB,kBACjBR,eAAgB,iBAChBS,aAAa,EACbC,aAAc,GACdC,eAAgB,UAIlBC,UAAW,CACTC,KAAM,OACNC,SAAU,IACVC,OAAQ,WACRC,QAAS,sBACTC,SAAU,wBASdhG,WAAAA,CAAYiG,EAAc,IACxB9F,KAAK+F,QAAU/F,KAAKgG,aAAa3E,EAAQ4E,SAAUH,GACnD9F,KAAKkG,mBACLlG,KAAKmG,UACP,CAMAD,gBAAAA,GACE,MAAME,EAAgB/E,EAAQ4E,SAAS9C,OACjCkD,EAAgBrG,KAAK+F,QAAQ5C,QAAU,CAAE,EAE/CnD,KAAK+F,QAAQ5C,OAASnD,KAAKgG,aAAaI,EAAeC,GAGvDrG,KAAK+F,QAAQ5C,OAAOqB,OAAS,IACxB4B,EAAc5B,UACb6B,EAAc7B,QAAU,CAAE,EAElC,CASAwB,YAAAA,CAAaM,EAAQC,GACnB,MAAMC,EAAS,IAAKF,GAEpB,IAAK,MAAMG,KAAOF,EAEE,OAAhBA,EAAOE,IACgB,iBAAhBF,EAAOE,IACbC,MAAMC,QAAQJ,EAAOE,SAQGG,IAAhBL,EAAOE,KAEhBD,EAAOC,GAAOF,EAAOE,KAPhBH,EAAOG,IAA+B,iBAAhBH,EAAOG,KAChCD,EAAOC,GAAO,CAAE,GAGlBD,EAAOC,GAAOzG,KAAKgG,aAAaQ,EAAOC,GAAMF,EAAOE,KAOxD,OAAOD,CACT,CAOAL,QAAAA,GAEE,MAAMU,EAAoB,CAAC,oBAAqB,gBAChD,IAAK,MAAMC,KAAYD,EACrB,GAAsC,iBAA3B7G,KAAK+F,QAAQe,GACtB,MAAUC,MAASD,EAAH,qBAKpB,GAC8C,iBAArC9G,KAAK+F,QAAQP,WAAWE,UAC/B1F,KAAK+F,QAAQP,WAAWE,SAAW,EAEnC,MAAUqB,MAAM,gDAIlB,IAAK,CAAC,KAAM,OAAOC,SAAShH,KAAK+F,QAAQ7D,WAAWrB,eAClD,MAAUkG,MAAM,2CAIlB,IAAK,CAAC,KAAM,OAAOC,SAAShH,KAAK+F,QAAQ5D,UAAUtB,eACjD,MAAUkG,MAAM,0CAIlB,IACGL,MAAMC,QAAQ3G,KAAK+F,QAAQ3D,aACO,IAAnCpC,KAAK+F,QAAQ3D,WAAW6E,OAExB,MAAUF,MAAM,wCAIlB,GAAI/G,KAAK+F,QAAQpD,QAAS,CACxB,GAA6C,iBAAlC3C,KAAK+F,QAAQpD,QAAQC,SAC9B,MAAUmE,MAAM,qCAE+B,kBAAtC/G,KAAK+F,QAAQpD,QAAQE,eAC9B7C,KAAK+F,QAAQpD,QAAQE,cAAe,GAEQ,mBAAnC7C,KAAK+F,QAAQpD,QAAQK,YAC9BhD,KAAK+F,QAAQpD,QAAQK,UAAaC,GAAQA,EAAIC,iBAElD,MACElD,KAAK+F,QAAQpD,QAAU,IAAKtB,EAAQ4E,SAAStD,QAEjD,CAOAuE,GAAAA,CAAIC,GACF,OAAOA,EAAKC,MAAM,KAAKC,QAAO,CAACC,EAAKb,IAAQa,IAAMb,IAAMzG,KAAK+F,QAC/D,CAOAwB,GAAAA,CAAIJ,EAAMK,GACR,MAAMC,EAAQN,EAAKC,MAAM,KACnBM,EAAOD,EAAME,MACJF,EAAMJ,QAAO,CAACC,EAAKb,KAC1BA,KAAOa,IAAMA,EAAIb,GAAO,CAAE,GACzBa,EAAIb,KACVzG,KAAK+F,SAED2B,GAAQF,EACfxH,KAAKmG,UACP,CAMAyB,MAAAA,CAAOC,GACL7H,KAAK+F,QAAU/F,KAAKgG,aAAahG,KAAK+F,QAAS8B,GAC/C7H,KAAKmG,UACP,CAKA2B,KAAAA,GACE9H,KAAK+F,QAAU,IAAK1E,EAAQ4E,SAC9B,CAMA8B,SACE,MAAO,IAAK/H,KAAK+F,QACnB,ECrUK,MAAMiC,EACXnI,WAAAA,GACEG,KAAKiI,MAAQ,CACXC,QAAS,CACPC,QAAS,IAAIC,IAAI,CAAC,MAClBC,OAAQ,IAAIC,IACZC,OAAQ,IAAID,IACZE,WAAY,IAAIF,IAChBG,KAAM,KACNtG,UAAW,MAEbuG,OAAQ,CACNC,MAAO,GACPC,KAAM,CAAC,UAETC,KAAM,CACJC,OAAQ,CAAE,EACVX,QAAS,MAEXY,MAAO,CACLC,QAAS,IAAIZ,IACba,MAAO,GAETjF,WAAY,CACVkF,YAAa,EACbjE,aAAc,GACdkE,WAAY,GAGlB,CAMA/H,QAAAA,GACE,OAAOpB,KAAKiI,KACd,CAOAmB,QAAAA,CAASjC,EAAMK,GACb,MAAMC,EAAQN,EAAKC,MAAM,KACzB,IAAIe,EAAUnI,KAAKiI,MAEnB,IAAK,IAAIoB,EAAI,EAAGA,EAAI5B,EAAMR,OAAS,EAAGoC,IAC9B5B,EAAM4B,KAAMlB,IAChBA,EAAQV,EAAM4B,IAAM,CAAE,GAExBlB,EAAUA,EAAQV,EAAM4B,IAG1BlB,EAAQV,EAAMA,EAAMR,OAAS,IAAMO,CACrC,CAMAO,SACE,MAAO,CACLG,QAAS,CACPC,QAASzB,MAAM4C,KAAKtJ,KAAKiI,MAAMC,QAAQC,SACvCE,OAAQ3B,MAAM4C,KAAKtJ,KAAKiI,MAAMC,QAAQG,OAAOkB,WAC7ChB,OAAQ7B,MAAM4C,KAAKtJ,KAAKiI,MAAMC,QAAQK,OAAOgB,WAC7Cf,WAAY9B,MAAM4C,KAAKtJ,KAAKiI,MAAMC,QAAQM,WAAWe,WACrDd,KAAMzI,KAAKiI,MAAMC,QAAQO,KACzBtG,UAAWnC,KAAKiI,MAAMC,QAAQ/F,WAEhCuG,OAAQ,IAAK1I,KAAKiI,MAAMS,QACxBG,KAAM,IAAK7I,KAAKiI,MAAMY,MACtB7E,WAAY,IAAKhE,KAAKiI,MAAMjE,YAEhC,CAMAwF,MAAAA,CAAOC,GACDA,EAAcvB,UAChBlI,KAAKiI,MAAMC,QAAQC,QAAU,IAAIC,IAAIqB,EAAcvB,QAAQC,SAC3DnI,KAAKiI,MAAMC,QAAQG,OAAS,IAAIC,IAAImB,EAAcvB,QAAQG,QAC1DrI,KAAKiI,MAAMC,QAAQK,OAAS,IAAID,IAAImB,EAAcvB,QAAQK,QAC1DvI,KAAKiI,MAAMC,QAAQM,WAAa,IAAIF,IAAImB,EAAcvB,QAAQM,YAC9DxI,KAAKiI,MAAMC,QAAQO,KAAOgB,EAAcvB,QAAQO,KAChDzI,KAAKiI,MAAMC,QAAQ/F,UAAYsH,EAAcvB,QAAQ/F,WAGnDsH,EAAcf,SAChB1I,KAAKiI,MAAMS,OAAS,IAAKe,EAAcf,SAGrCe,EAAcZ,OAChB7I,KAAKiI,MAAMY,KAAO,IAAKY,EAAcZ,OAGnCY,EAAczF,aAChBhE,KAAKiI,MAAMjE,WAAa,IAAKyF,EAAczF,YAE/C,CAKA8D,KAAAA,GACE9H,KAAKiI,MAAQ,CACXC,QAAS,CACPC,QAAS,IAAIC,IAAI,CAAC,MAClBC,OAAQ,IAAIC,IACZC,OAAQ,IAAID,IACZE,WAAY,IAAIF,IAChBG,KAAM,KACNtG,UAAW,MAEbuG,OAAQ,CACNC,MAAO,GACPC,KAAM,CAAC,UAETC,KAAM,CACJC,OAAQ,CAAE,EACVX,QAAS,MAEXY,MAAO,CACLC,QAAS,IAAIZ,IACba,MAAO,GAETjF,WAAY,CACVkF,YAAa,EACbjE,aAAc,GACdkE,WAAY,GAGlB,ECxIK,MAAMO,EAIX7J,WAAAA,CAAYkG,GACV/F,KAAK+F,QAAUA,EACf/F,KAAK2J,aAAe,IACtB,CAOAC,gBAAAA,GACE,MAAM7H,EAAc/B,KAAK+F,QAAQmB,IAAI,gBAAkB,SACjD1F,EAAexB,KAAK+F,QAAQmB,IAAI,iBAAmB,mBACnDzF,EACJzB,KAAK+F,QAAQmB,IAAI,yBAA2B,kBACxCpF,EAAc9B,KAAK+F,QAAQmB,IAAI,gBAAkB,SACjD2C,EAAoB7J,KAAK+F,QAAQmB,IAAI,uBAAyB,QAC9D4C,EAAkB9J,KAAK+F,QAAQmB,IAAI,qBAAuB,WAC1DxF,EACJ1B,KAAK+F,QAAQmB,IAAI,2BAA6B,uBAG1C6C,EAAe/J,KAAK+F,QAAQmB,IAAI,0BAA4B,OAC5D8C,EACJhK,KAAK+F,QAAQmB,IAAI,6BAA+B,UAC5C+C,EAAYjK,KAAK+F,QAAQmB,IAAI,uBAAyB,OACtDgD,EAAiBlK,KAAK+F,QAAQmB,IAAI,4BAA8B,OAGhEiD,EAAYJ,EAAaK,MAC7B,4CAcF,MAAO,kCAEJrI,kFAKDP,yGAIsBqI,KAAqBC,mCACnBD,KAAqBC,gCACxBD,KAAqBC,oBAG1CtI,KAAgBO,sVAgBhBN,WACAC,oHAIoBsI,uGAIXC,qDAESJ,KAAqBC,oOAWvCrI,iBACAC,kCACgBqI,+BACIA,oBACXG,2CAITzI,iBACAC,wDAEgBqI,mCA7EAI,EACd,QAAQE,SAASF,EAAU,GAAI,QAAQE,SACrCF,EAAU,GACV,QACIE,SAASF,EAAU,GAAI,YAC7B,+DA6EF1I,KAAwBK,gCACJiI,2BACJA,oBACPG,8CAITzI,oBACAC,0FAGoBsI,wDAIpBtI,oNAzFiB4I,mBAAmBL,oKAkGpCvI,mKAhG+IwI,iOA2G7IzI,aACAC,qFAMN,CAMA6I,mBAAAA,GACE,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,YAAc,iSAWpBF,SAASG,KAAKC,YAAYL,EAC5B,CAOAM,iBAAAA,GACE,MAAM3H,EAASnD,KAAK+F,QAAQmB,IAAI,UAC1B6D,EAAgB/K,KAAK+F,QAAQmB,IAAI,WAAa,CAAE,EAChD8D,EAAe7H,EAAOC,OACtBoB,EAASrB,EAAOqB,OAQtB,MAAO,yCANgBuG,EAAcnG,gBAAkB,yJACpCmG,EAAclG,YAAc,kKAqB/BmG,EAAa3H,GAAGG,MAAME,YAAcc,EAAOd,qCACxCsH,EAAa3H,GAAGG,MAAMC,QAAU,uBArBhCsH,EAAcjG,YAAc,iFA2BpCkG,EAAa3H,GAAGO,MAAMC,MAAQ,0BAC7BmH,EAAa3H,GAAGO,MAAMC,MAAQ,8BAC1BmH,EAAa3H,GAAGO,MAAMF,YAAcc,EAAOC,kCACxCuG,EAAa3H,GAAGO,MAAMH,QAAU,6GA7BhCsH,EAAchG,YAAc,+IAwCpCP,EAAOE,wBAvCIqG,EAAc/F,eAAiB,4FA6CrCgG,EAAa3H,GAAGM,SAASD,YAAcc,EAAOC,4YAqB1DuG,EAAa3H,GAAGS,UAAUJ,YAAcc,EAAOd,yJAQ/CsH,EAAa3H,GAAGS,UAAUC,IAAIL,YAAcc,EAAOC,qBAIzD,CAOAwG,gBAAAA,GACE,MAAMzG,EAASxE,KAAK+F,QAAQmB,IAAI,UAAU1C,OAE1C,MAAO,mSAeIA,EAAOE,4IAOIF,EAAOd,wFAGlBc,EAAOE,qIAMAF,EAAOC,qBAG3B,CAOAyG,sBAAAA,GACE,MAAM1G,EAASxE,KAAK+F,QAAQmB,IAAI,UAAU1C,OAC1C,MAAO,sVAeUA,EAAOE,uKAOIF,EAAOd,0GAGlBc,EAAOE,0JAMAF,EAAOC,2BAGjC,CAMA0G,WAAAA,GACE,IACE,MAAMhI,EAAS,yDAGbnD,KAAKuK,2DAGLvK,KAAK4J,gEAGL5J,KAAK8K,gEAGL9K,KAAKiL,8DAGLjL,KAAKoL,gEAGLpL,KAAKqL,iEAGLrL,KAAKkL,iCAGHlL,KAAK2J,aACP3J,KAAK2J,aAAagB,YAAcxH,GAEhCnD,KAAK2J,aAAec,SAASC,cAAc,SAC3C1K,KAAK2J,aAAagB,YAAcxH,EAChCsH,SAASG,KAAKC,YAAY7K,KAAK2J,cAElC,CAAC,MAAOvJ,GAEP,MAAMkL,EAAiBtL,KAAK4J,mBACxB5J,KAAK2J,aACP3J,KAAK2J,aAAagB,YAAcW,GAEhCtL,KAAK2J,aAAec,SAASC,cAAc,SAC3C1K,KAAK2J,aAAagB,YAAcW,EAChCb,SAASG,KAAKC,YAAY7K,KAAK2J,cAEnC,CACF,CAOAyB,sBAAAA,GACE,MAAMjI,EAASnD,KAAK+F,QAAQmB,IAAI,UAC1BqE,EAAoBvL,KAAK+F,QAAQmB,IAAI,eAAiB,CAAE,EACxD1C,EAASxE,KAAK+F,QAAQmB,IAAI,UAAU1C,OAGpCgH,EAAcD,EAAkBpG,iBAAmB,kBAGnDsG,EAAmBtI,EAAOa,WAEhC,MAAO,YANgBuH,EAAkB3G,gBAAkB,iJActD4G,yBACUC,EAAiBpI,GAAGY,OAAOG,SAAW,gCAE/CqH,EAAiBpI,GAAGY,OAAOC,QAAU,aAAeM,EAAOC,oCAE5CgH,EAAiBpI,GAAGY,OAAOE,cAAgB,kGAG9CsH,EAAiBpI,GAAGY,OAAOP,YAAc,kCAC9C+H,EAAiBpI,GAAGY,OAAOI,OAASG,EAAOC,+BAGnD+G,kCAECC,EAAiBpI,GAAGY,OAAOM,MAAMb,YAAcc,EAAOC,4BAE/CgH,EAAiBpI,GAAGY,OAAOM,MAAMF,OAAS,+BAGlDmH,KA/BeD,EAAkBnG,iBAAmB,4CAiCnDqG,EAAiBpI,GAAGY,OAAOK,OAAOZ,YAAcc,EAAOC,4BAEhDgH,EAAiBpI,GAAGY,OAAOK,OAAOD,OAAS,+BAGnDmH,kFAKP,CAOAH,kBAAAA,GACE,MAAMK,EAAc1L,KAAK+F,QAAQmB,IAAI,qBAAuB,aACtD1C,EAASxE,KAAK+F,QAAQmB,IAAI,UAAU1C,OAE1C,MAAO,YACFkH,yDAEmBlH,EAAOd,kKAO1BgI,4DAEelH,EAAOC,yBAG7B,CAOAkH,YAAAA,CAAaC,GACX5L,KAAK+F,QAAU6F,EACf5L,KAAKmL,aACP,CAMAU,YAAAA,GACM7L,KAAK2J,eACP3J,KAAK2J,aAAamC,SAClB9L,KAAK2J,aAAe,KAExB,ECpgBK,MAAMoC,EACXlM,WAAAA,GACEG,KAAKgM,OAAS,IAAI1D,IAClBtI,KAAKiM,WAAa,IAAI3D,GACxB,CAQA4D,EAAAA,CAAGC,EAAWC,GAQZ,OAPKpM,KAAKgM,OAAOK,IAAIF,IACnBnM,KAAKgM,OAAOzE,IAAI4E,EAAW,IAAI/D,KAGjCpI,KAAKgM,OAAO9E,IAAIiF,GAAWG,IAAIF,GAGxB,IAAMpM,KAAKuM,IAAIJ,EAAWC,EACnC,CAQAI,IAAAA,CAAKL,EAAWC,GACd,MAAMK,EAAcA,IAAIjM,KACtBR,KAAKuM,IAAIJ,EAAWM,GACpBL,EAASpL,MAAMhB,KAAMQ,EAAK,EAQ5B,OALKR,KAAKiM,WAAWI,IAAIF,IACvBnM,KAAKiM,WAAW1E,IAAI4E,EAAW,IAAI7D,KAGrCtI,KAAKiM,WAAW/E,IAAIiF,GAAW5E,IAAI6E,EAAUK,GACtCzM,KAAKkM,GAAGC,EAAWM,EAC5B,CAOAF,GAAAA,CAAIJ,EAAWC,GAYb,GAVIpM,KAAKgM,OAAOK,IAAIF,KAClBnM,KAAKgM,OAAO9E,IAAIiF,GAAWO,OAAON,GAGM,IAApCpM,KAAKgM,OAAO9E,IAAIiF,GAAWtI,MAC7B7D,KAAKgM,OAAOU,OAAOP,IAKnBnM,KAAKiM,WAAWI,IAAIF,GAAY,CAClC,MAAMM,EAAczM,KAAKiM,WAAW/E,IAAIiF,GAAWjF,IAAIkF,GACnDK,IACFzM,KAAKgM,OAAO9E,IAAIiF,IAAYO,OAAOD,GACnCzM,KAAKiM,WAAW/E,IAAIiF,GAAWO,OAAON,IAII,IAAxCpM,KAAKiM,WAAW/E,IAAIiF,GAAWtI,MACjC7D,KAAKiM,WAAWS,OAAOP,EAE3B,CACF,CAOAQ,IAAAA,CAAKR,KAAc3L,GACbR,KAAKgM,OAAOK,IAAIF,IAClBnM,KAAKgM,OAAO9E,IAAIiF,GAAWS,SAAQR,IACjC,IACEA,EAASpL,MAAMhB,KAAMQ,EACtB,CAAC,MAAOJ,GAET,IAGN,CAMAyM,kBAAAA,CAAmBV,GACbA,GACFnM,KAAKgM,OAAOU,OAAOP,GACnBnM,KAAKiM,WAAWS,OAAOP,KAEvBnM,KAAKgM,OAAOc,QACZ9M,KAAKiM,WAAWa,QAEpB,CAOAC,aAAAA,CAAcZ,GACZ,OAAQnM,KAAKgM,OAAO9E,IAAIiF,IAAYtI,MAAQ,IACpC7D,KAAKiM,WAAW/E,IAAIiF,IAAYtI,MAAQ,EAClD,ECjHK,MAAMmJ,EACXnN,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK+F,QAAU/F,KAAKiN,IAAIlH,QACxB/F,KAAKkN,WAAa,CAChBC,KAAM,CACJC,GAAI,CACFC,QAAS,EACTC,UAAW,WACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,cACXC,yBAA0B,aAG9BE,MAAO,CACLL,GAAI,CACFC,QAAS,EACTC,UAAW,gBACXC,yBAA0B,eAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,mBACXC,yBAA0B,gBAG9BG,MAAO,CACLN,GAAI,CACFC,QAAS,EACTC,UAAW,WACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,aACXC,yBAA0B,aAG9BI,OAAQ,CACNP,GAAI,CACFC,QAAS,EACTC,UAAW,wBACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,2BACXC,yBAA0B,aAG9BK,KAAM,CACJR,GAAI,CACFC,QAAS,EACTC,UAAW,aACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,kBACXC,yBAA0B,aAG9BM,KAAM,CACJT,GAAI,CACFC,QAAS,EACTC,UAAW,aACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,aACXC,yBAA0B,aAG9BO,OAAQ,CACNV,GAAI,CACFC,QAAS,EACTC,UAAW,gBACX9H,UAAW,mDAEbgI,IAAK,CACHH,QAAS,EACTC,UAAW,oBACX9H,UAAW,0BAGfuI,KAAM,CACJX,GAAI,CACFC,QAAS,EACTW,OAAQ,UACRT,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTW,OAAQ,YACRT,yBAA0B,aAG9BU,KAAM,CACJb,GAAI,CACFC,QAAS,EACTC,UAAW,aACXC,yBAA0B,eAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,cACXC,yBAA0B,gBAG9BW,YAAa,CACXd,GAAI,CACFC,QAAS,EACTC,UAAW,gBACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,oBACXC,yBAA0B,aAG9BY,aAAc,CACZf,GAAI,CACFC,QAAS,EACTC,UAAW,gBACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,mBACXC,yBAA0B,aAG9Ba,SAAU,CACRhB,GAAI,CACFC,QAAS,EACTC,UAAW,gBACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,mBACXC,yBAA0B,aAG9Bc,WAAY,CACVjB,GAAI,CACFC,QAAS,EACTC,UAAW,gBACXC,yBAA0B,WAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,oBACXC,yBAA0B,aAG9Be,SAAU,CACRlB,GAAI,CACFC,QAAS,EACTC,UAAW,cACXC,yBAA0B,yCAE5BC,IAAK,CACHH,QAAS,EACTC,UAAW,aACXC,yBAA0B,aAIlC,CAOAgB,kBAAAA,CAAmBC,EAAMC,EAAgB,QACvC,MAAMjJ,EACJxF,KAAKkN,WAAWuB,IAAgBrB,IAAMpN,KAAKkN,WAAWC,KAAKC,GAG7DoB,EAAKE,UAAUpC,IAAI,kBAGnBkC,EAAKhE,MAAMmE,QAAU,GACrBH,EAAKhE,MAAMoE,WAAa,UAMxBC,uBAAsB,KACpBC,OAAOC,OAAOP,EAAKhE,MAAO,CACxB6C,QAAS,IACTC,UAAW,cACXqB,QAAS,KAOXE,uBAAsB,KACpBC,OAAOC,OAAOP,EAAKhE,MAAOhF,EAAU,GACpC,GAEN,CAOAwJ,kBAAAA,CAAmBR,EAAMC,EAAgB,QACvC,MAAMjJ,EACJxF,KAAKkN,WAAWuB,IAAgBjB,KAAOxN,KAAKkN,WAAWC,KAAKK,IAG9DgB,EAAKE,UAAUpC,IAAI,kBAGnBuC,uBAAsB,KACpBC,OAAOC,OAAOP,EAAKhE,MAAOhF,GAE1B,MAAMyJ,EAAsBA,KACrBjP,KAAKiN,IAAIhF,MAAM7G,WAAW2H,MAAMC,QAAQqD,IAAImC,KAC/CA,EAAKhE,MAAMmE,QAAU,OACrBH,EAAKhE,MAAMoE,WAAa,UAE1BJ,EAAKU,oBAAoB,gBAAiBD,EAAoB,EAGhET,EAAKW,iBAAiB,gBAAiBF,EAAqB,CAC1DzC,MAAM,GACN,GAEN,CAMA4C,aAAAA,CAAcrJ,GACZ,MAAML,EAAWK,EAAQL,UAAY,IAC/B2J,EAAStJ,EAAQsJ,QAAU,cAE3B7E,EAAQC,SAAS6E,cAAc,mBACjC9E,IACFA,EAAMG,YAAc,4EAEcjF,OAAc2J,+CACZ3J,OAAc2J,4CACjB3J,OAAc2J,6CAInD,CAMAE,YAAAA,CAAad,GACPzO,KAAKkN,WAAWuB,IAClBzO,KAAKiN,IAAIlH,QAAQwB,IAAI,iBAAkBkH,EAE3C,EC7QK,MAAMe,EAIX3P,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAKwF,UAAY,IAAIwH,EAAUC,GAC/BjN,KAAKyP,cAAgB,IAAInH,IACzBtI,KAAK0P,cAAgB,IAAItH,IAAI,CAAC,MAC9BpI,KAAK2P,eAAiB,IAAIvH,IAAI,CAAC,MAC/BpI,KAAK4P,aAAe,IAAItH,IACxBtI,KAAK6P,WAAa,IAAIvH,IACtBtI,KAAK8P,cACP,CAMAA,YAAAA,GACE9P,KAAKiN,IAAI8C,OAAOjQ,MAAM,sBACtB,MAAMkQ,EAAiBhQ,KAAKiN,IAAIlH,QAAQmB,IAAI,wBAC5C,IAAK8I,EAAgB,OAGrBvF,SAASwF,iBAAiBD,GAAgBpD,SAAS3I,IACjD,MAAMiM,EAAcjM,EAAOkM,QAAQnC,OAC9BkC,GAQLlQ,KAAKyP,cAAclI,IAAItD,EAAQiM,GAC/BlQ,KAAKoQ,gBAAgBnM,IARnBjE,KAAKiN,IAAI8C,OAAO1P,KACd,+CACA4D,EAMwB,IAI9B,MAAMvC,EAAyB1B,KAAKiN,IAAIlH,QAAQmB,IAAI,0BAChDxF,GACF+I,SAASwF,iBAAiBvO,GAAwBkL,SAASyD,IACzDrQ,KAAKsQ,kBAAkBD,EAAS,IAIpCrQ,KAAKiN,IAAI8C,OAAOjQ,MAAM,sBACxB,CAOAyQ,QAAAA,CAASC,GACP,GAAqB,kBAAVA,EAETxQ,KAAKiN,IAAIlH,QAAQwB,IAAI,aAAciJ,EAAQ,MAAQ,UAC9C,CACL,MAAM/H,EAAO+H,EAAM3P,cACnB,IAAI,CAAC,KAAM,OAAOmG,SAASyB,GAIzB,YADAzI,KAAKiN,IAAI8C,OAAO1P,KAAK,wBAAwBmQ,GAF7CxQ,KAAKiN,IAAIlH,QAAQwB,IAAI,aAAckB,EAKvC,CAEAzI,KAAKiN,IAAI8C,OAAOjQ,MACd,wBAAwBE,KAAKiN,IAAIlH,QAAQmB,IAAI,eAE/ClH,KAAKyQ,cACP,CAMFC,eAAAA,GACE1Q,KAAKiN,IAAI8C,OAAOjQ,MAAM,8CAGtBE,KAAK0P,cAAc5C,QACnB9M,KAAK0P,cAAcpD,IAAI,KAGvBtM,KAAKyP,cAAc7C,SAAQ,CAAC+D,EAAG1M,KAC3BA,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAe,IAIhElH,KAAK4P,aAAa9C,QAGlB,MAAM8D,EAAY5Q,KAAK6Q,gBACnBD,GACAA,EAAUlC,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAIjD,MAAMxF,EAAyB1B,KAAKiN,IAAIlH,QAAQmB,IAAI,2BAA6B,uBACjFuD,SAASwF,iBAAiBvO,GAAwBkL,SAAQkE,IAEtD,MAAMC,EAAaD,EAAOE,aAAa,qBACtBF,EAAOG,GAAGC,QAAQ,SAAU,IAAIC,cAG3CC,EAAY1K,MAAM4C,KAAKwH,EAAO/K,SAASsL,MAAKC,IAC9C,MAAM9J,EAAQ8J,EAAO9J,MACrB,MAAiB,MAAVA,GACAA,IAAauJ,EAAH,QACVvJ,EAAM+J,SAAS,OAAO,IAGjC,GAAIH,EAAW,CAEXN,EAAOtJ,MAAQ4J,EAAU5J,MAGzB,MAAMgK,EAAQ,IAAIC,MAAM,SAAU,CAC9BC,SAAS,EACTC,YAAY,IAEhBb,EAAOc,cAAcJ,EACzB,KAAO,CAEHV,EAAOe,cAAgB,EAGvB,MAAML,EAAQ,IAAIC,MAAM,SAAU,CAC9BC,SAAS,EACTC,YAAY,IAEhBb,EAAOc,cAAcJ,EACzB,KAIJxR,KAAK6P,WAAW/C,QAGhB9M,KAAKyQ,eACLzQ,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,kBAEd3M,KAAKiN,IAAI8C,OAAOjQ,MAAM,wCACxB,CAOEwQ,iBAAAA,CAAkBD,GAChBrQ,KAAKiN,IAAI8C,OAAOjQ,MAAM,oCAAqCuQ,GAE3DA,EAASlB,iBAAiB,UAAU,KAChC,MAAM6C,EAAgB3B,EAAS7I,OACxBuJ,GAAciB,EAAc5K,MAAM,KAGnB,MAAlB4K,GAA0BA,EAAcT,SAAS,SACjDvR,KAAK0P,cAAchD,OAAO,KAI9B1M,KAAK0P,cAAc9C,SAAQqF,IACnBA,EAAeC,WAAcnB,EAAH,MAC1B/Q,KAAK0P,cAAchD,OAAOuF,EAC9B,IAIkB,MAAlBD,GAAyBA,EAAcT,SAAS,QAGhB,IAA5BvR,KAAK0P,cAAc7L,MACnB7D,KAAK0P,cAAcpD,IAAI,KAI3BtM,KAAK0P,cAAcpD,IAAI0F,GAG3BhS,KAAKyQ,eACLzQ,KAAKiN,IAAI6E,WAAWC,YAGpB/R,KAAKiN,IAAIN,KAAK,gBAAiB,CAC3BlH,KAAMsL,EACNvJ,MAAOwK,EACPtC,cAAehJ,MAAM4C,KAAKtJ,KAAK0P,gBACjC,GAEV,CAOEU,eAAAA,CAAgBnM,GACdjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,kCAAmCmE,GAEzDA,EAAOkL,iBAAiB,SAAS,KAC/B,MAAMe,EAAclQ,KAAKyP,cAAcvI,IAAIjD,GAEtCiM,IAEe,MAAhBA,EACFlQ,KAAKmS,eAELnS,KAAKoS,aAAalC,EAAajM,GAIjCjE,KAAKiN,IAAI6E,WAAWC,YAAW,GAEnC,CAMAI,YAAAA,GACEnS,KAAKiN,IAAI8C,OAAOjQ,MAAM,qBAGtBE,KAAK0P,cAAc5C,QAGnB9M,KAAKyP,cAAc7C,SAAQ,CAAC+D,EAAG1M,KAC7BA,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAe,IAI9DlH,KAAK0P,cAAcpD,IAAI,KACvB,MAAMsE,EAAY5Q,KAAK6Q,gBACnBD,GACFA,EAAUlC,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAI/ClH,KAAK4P,aAAa9C,QAGlB,MAAMuF,EAAoB,GAG1BrS,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACrB,MAAM8D,EAAU,IAAIC,SAAQC,IAC1BhE,EAAKE,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAC3CsH,EAAKhE,MAAMmE,QAAU,QAErBE,uBAAsB,KACpB7O,KAAKwF,UAAU+I,mBAAmBC,EAAMxO,KAAKiN,IAAIlH,QAAQmB,IAAI,mBAE7DuL,WAAWD,EAASxS,KAAKiN,IAAIlH,QAAQmB,IAAI,uBAAyB,IAAI,GACtE,IAEJmL,EAAkBK,KAAKJ,EAAQ,IAIjC,MAAMK,EAAe,IAAIvK,IAAIpI,KAAKiN,IAAIlE,OACtC/I,KAAKiN,IAAIhF,MAAMmB,SAAS,gBAAiBuJ,GAGzCJ,QAAQK,IAAIP,GAAmBQ,MAAK,KAElC7S,KAAKiN,IAAI6F,gBAGT9S,KAAKiN,IAAI6E,WAAWC,YAGpB/R,KAAKiN,IAAIN,KAAK,eAAe,GAEjC,CAOAkE,aAAAA,GACE,IAAK,MAAO5M,EAAQuD,KAAUxH,KAAKyP,cAAclG,UAC/C,GAAc,MAAV/B,EAAe,OAAOvD,EAG5B,OAAO,IACT,CAEA8O,iBAAAA,CAAkB9O,GAChB,MAAMiM,EAAcjM,EAAOkM,QAAQnC,OACnChO,KAAKiN,IAAI8C,OAAOjQ,MAAM,kBAAmBoQ,GAErB,MAAhBA,EACFlQ,KAAKmS,eAELnS,KAAKoS,aAAalC,EAAajM,GAGjCjE,KAAKgO,SAGLhO,KAAK+R,WACP,CAQAK,YAAAA,CAAalC,EAAajM,GAExBjE,KAAK0P,cAAchD,OAAO,KAC1B,MAAMkE,EAAY5Q,KAAK6Q,gBAMvB,GALID,GACFA,EAAUlC,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAI9CjD,EAAOyK,UAAUsE,SAAShT,KAAKiN,IAAIlH,QAAQmB,IAAI,iBAKjD,GAJAjD,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAC7ClH,KAAK0P,cAAchD,OAAOwD,GAGM,IAA5BlQ,KAAK0P,cAAc7L,KAErB,YADA7D,KAAKmS,oBAIPlO,EAAOyK,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAC1ClH,KAAK0P,cAAcpD,IAAI4D,GAGzBlQ,KAAKyQ,eAGLzQ,KAAKiN,IAAIN,KAAK,gBAAiB,CAC7BqB,OAAQkC,EACRR,cAAehJ,MAAM4C,KAAKtJ,KAAK0P,iBAGjC1P,KAAKiN,IAAI8C,OAAOjQ,MAAM,kBAAmBoQ,EAC3C,CAMDO,YAAAA,GACG,MAAMf,EAAgBhJ,MAAM4C,KAAKtJ,KAAK0P,eACtC1P,KAAKiN,IAAI8C,OAAOjQ,MAAM,kBAAmB4P,GAEzC,MAAMuD,EAAoB,IAAI7K,IAAIpI,KAAKiN,IAAIhF,MAAM7G,WAAW2H,MAAMC,SAC5D2J,EAAe,IAAIvK,IAGzBpI,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,KACfxO,KAAK0P,cAAcrD,IAAI,MAAQrM,KAAKkT,mBAAmB1E,KACvDmE,EAAarG,IAAIkC,EACrB,IAIJxO,KAAKiN,IAAIhF,MAAMmB,SAAS,gBAAiBuJ,GAGzC,MAAMN,EAAoB,GAG1BrS,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACnB,MAAM8D,EAAU,IAAIC,SAAQC,IACpBG,EAAatG,IAAImC,IAEjBA,EAAKE,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAC3C2H,uBAAsB,KAClB7O,KAAKwF,UAAU+I,mBAAmBC,EAAMxO,KAAKiN,IAAIlH,QAAQmB,IAAI,mBAC7DuL,WAAWD,EAASW,WAAWnT,KAAKiN,IAAIlH,QAAQmB,IAAI,wBAA0B,IAAI,MAItFsH,EAAKE,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBACxC2H,uBAAsB,KAClB7O,KAAKwF,UAAUwJ,mBAAmBR,EAAMxO,KAAKiN,IAAIlH,QAAQmB,IAAI,mBAC7DuL,WAAWD,EAASW,WAAWnT,KAAKiN,IAAIlH,QAAQmB,IAAI,wBAA0B,IAAI,IAE1F,IAEJmL,EAAkBK,KAAKJ,EAAQ,IAInCC,QAAQK,IAAIP,GAAmBQ,MAAK,KAEhCF,EAAa/F,SAAQ4B,IACjBA,EAAKhE,MAAMmE,QAAU,QACrBH,EAAKhE,MAAM6C,QAAU,GAAG,IAI5BrN,KAAKiN,IAAI6F,gBACT9S,KAAKiN,IAAI6E,WAAWC,YAEpB/R,KAAKiN,IAAIN,KAAK,iBAAkB,CAC5B+C,gBACAiD,aAAcA,EAAa9O,MAC7B,IAIN7D,KAAKoT,iBAAiBH,EAAmBN,EAC7C,CAQEO,kBAAAA,CAAmB1E,GAEjB,GAAIxO,KAAK0P,cAAcrD,IAAI,KACvB,OAAO,EAIX,MAAMgH,EAAiB7E,EAAK2B,QAAQmD,YAAYlM,MAAM,MAAQ,GAGxDmM,EAAgB,CAAE,EAUxB,OATAvT,KAAK0P,cAAc9C,SAAQoB,IACvB,MAAOvI,EAAM+B,GAASwG,EAAO5G,MAAM,KAC9BmM,EAAc9N,KACf8N,EAAc9N,GAAQ,IAAI2C,KAE9BmL,EAAc9N,GAAM6G,IAAI9E,EAAM,IAI3BsH,OAAOvF,QAAQgK,GAAeC,OAAM,EAAE/N,EAAMgO,KAExC/M,MAAM4C,KAAKmK,GAAQC,MAAKlM,GAEpB6L,EAAerM,SADA,GAAGvB,KAAQ+B,QAI7C,CAQEmM,oBAAAA,CAAqBN,GACnB,OAAO3M,MAAM4C,KAAKtJ,KAAK0P,eAAegE,MAAM1F,GAC3B,MAAXA,GACGqF,EAAehH,IAAI2B,IAE9B,CAQA4F,qBAAAA,CAAsBP,GACpB,OAAO3M,MAAM4C,KAAKtJ,KAAK0P,eAAe8D,OAAOxF,GAC5B,MAAXA,GACGqF,EAAehH,IAAI2B,IAE9B,CAQA6F,uBAAAA,CAAwBR,GACtB,MAAMS,EAAepN,MAAM4C,KAAKtJ,KAAK4P,aAAa6D,UAAUM,KAAKC,GACpC,IAAvBA,EAAM9L,QAAQrE,OAEQ,OAAnBmQ,EAAMC,SACTvN,MAAM4C,KAAK0K,EAAM9L,SAASwL,MAAM1F,GAAWqF,EAAehH,IAAI2B,KAC9DtH,MAAM4C,KAAK0K,EAAM9L,SAASsL,OAAOxF,GAC/BqF,EAAehH,IAAI2B,QAI3B,MAA6C,OAAtChO,KAAKiN,IAAIlH,QAAQmB,IAAI,aACxB4M,EAAaJ,MAAMQ,GAAYA,IAC/BJ,EAAaN,OAAOU,GAAYA,GACtC,CAQAd,gBAAAA,CAAiBH,EAAmBkB,GAElC,MAAMC,EAAQ,IAAIhM,IAChB,IAAI+L,GAAYnG,QAAQQ,IAAUyE,EAAkB5G,IAAImC,MAEpD6F,EAAU,IAAIjM,IAClB,IAAI6K,GAAmBjF,QAAQQ,IAAU2F,EAAW9H,IAAImC,MAI1DxO,KAAKiN,IAAIN,KAAK,SAAU,CACtB+C,cAAehJ,MAAM4C,KAAKtJ,KAAK0P,eAC/BiD,aAAcwB,EAAWtQ,KACzBuQ,MAAOA,EAAMvQ,KACbwQ,QAASA,EAAQxQ,OAIfuQ,EAAMvQ,KAAO,GACf7D,KAAKiN,IAAIN,KAAK,aAAc,CAAE5D,MAAOqL,IAEnCC,EAAQxQ,KAAO,GACjB7D,KAAKiN,IAAIN,KAAK,cAAe,CAAE5D,MAAOsL,GAE1C,CASAC,cAAAA,CAAeC,EAASrM,EAAS+L,EAAW,MAG1C,GAFAjU,KAAKiN,IAAI8C,OAAOjQ,MAAM,wBAAwByU,IAEzC7N,MAAMC,QAAQuB,GAEjB,YADAlI,KAAKiN,IAAI8C,OAAO3P,MAAM,4BAIxB,MAAMoU,EAAgBP,EAASpT,cAC1B,CAAC,MAAO,MAAMmG,SAASwN,KAC1BxU,KAAKiN,IAAI8C,OAAO1P,KAAK,qBAAqB4T,uBAC1CA,EAAW,MAGbjU,KAAK4P,aAAarI,IAAIgN,EAAS,CAC7BrM,QAAS,IAAIE,IAAIF,GACjB+L,SAAUO,IAGZxU,KAAKyQ,cACP,CAOAgE,iBAAAA,CAAkBF,GACZvU,KAAK4P,aAAalD,OAAO6H,KAC3BvU,KAAKiN,IAAI8C,OAAOjQ,MAAM,yBAAyByU,GAEhB,IAA3BvU,KAAK4P,aAAa/L,KACpB7D,KAAKmS,eAELnS,KAAKyQ,eAGX,CAOAiE,YAAAA,CAAajM,GACX,MAAMkM,EAAYlM,EAAK5H,cACnB,CAAC,MAAO,MAAMmG,SAAS2N,IACzB3U,KAAKiN,IAAIlH,QAAQwB,IAAI,YAAaoN,GAClC3U,KAAKiN,IAAI8C,OAAOjQ,MAAM,sBAAsB6U,GAC5C3U,KAAKyQ,gBAELzQ,KAAKiN,IAAI8C,OAAO1P,KAAK,uBAAuBoI,EAEhD,CAOAmM,SAAAA,CAAU5G,GAGR,GAFAhO,KAAKiN,IAAI8C,OAAOjQ,MAAM,kBAAkBkO,GAEzB,MAAXA,EAEF,YADAhO,KAAKmS,eAKP,MAAOpB,GAAc/C,EAAO5G,MAAM,KAGlCpH,KAAK0P,cAAc9C,SAAQqF,IACrBA,EAAeC,WAAcnB,EAAH,MAC5B/Q,KAAK0P,cAAchD,OAAOuF,EAC5B,IAIFjS,KAAK0P,cAAchD,OAAO,KAG1B1M,KAAK0P,cAAcpD,IAAI0B,GAGvBhO,KAAKyP,cAAc7C,SAAQ,CAACpF,EAAOvD,KAC7BuD,IAAUwG,EACZ/J,EAAOyK,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBACvB,MAAVM,GACTvD,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAC/C,IAGFlH,KAAKyQ,cACP,CAOAoE,YAAAA,CAAa7G,GACXhO,KAAKiN,IAAI8C,OAAOjQ,MAAM,oBAAoBkO,GAE1ChO,KAAK0P,cAAchD,OAAOsB,GAG1BhO,KAAKyP,cAAc7C,SAAQ,CAACpF,EAAOvD,KAC7BuD,IAAUwG,GACZ/J,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAC/C,IAI8B,IAA5BlH,KAAK0P,cAAc7L,KACrB7D,KAAKmS,eAELnS,KAAKyQ,cAET,CAOAqE,aAAAA,CAAcrM,GACZzI,KAAKiN,IAAI8C,OAAOjQ,MAAM,2BAA2B2I,GAEjD,MAAMkM,EAAYlM,EAAK5H,cACnB,CAAC,MAAO,MAAMmG,SAAS2N,IACzB3U,KAAKiN,IAAIlH,QAAQwB,IAAI,aAAcoN,GACnC3U,KAAKiN,IAAI8C,OAAOjQ,MAAM,uBAAuB6U,GAC7C3U,KAAKyQ,gBAELzQ,KAAKiN,IAAI8C,OAAO1P,KAAK,wBAAwBoI,EAEjD,CAOAsM,gBAAAA,GACE,OAAO,IAAI3M,IAAIpI,KAAK0P,cACtB,CAOAsF,eAAAA,GACE,OAAO,IAAI1M,IAAItI,KAAK4P,aACtB,CAQAqF,eAAAA,CAAgBhR,EAAQ+J,GACjBA,GAKLhO,KAAKyP,cAAclI,IAAItD,EAAQ+J,GAC/BhO,KAAKoQ,gBAAgBnM,GACrBjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,4BAA4BkO,IANhDhO,KAAKiN,IAAI8C,OAAO1P,KAAK,8CAOzB,CAOAwU,YAAAA,CAAa7G,GACXhO,KAAKiN,IAAI8C,OAAOjQ,MAAM,oBAAoBkO,GAE1ChO,KAAK0P,cAAchD,OAAOsB,GAG1BhO,KAAKyP,cAAc7C,SAAQ,CAACpF,EAAOvD,KAC7BuD,IAAUwG,GACZ/J,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAC/C,IAI8B,IAA5BlH,KAAK0P,cAAc7L,KACrB7D,KAAKmS,eAELnS,KAAKyQ,cAET,CAOAyE,aAAAA,CAAczO,GACZzG,KAAKiN,IAAI8C,OAAOjQ,MAAM,cAAc2G,GAEpC,IACE,MAAMsC,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAI5BoM,EAA4B,SADbnV,KAAK6P,WAAW3I,IAAIT,IAAQ,OACP,OAAS,MACnDzG,KAAK6P,WAAWtI,IAAId,EAAK0O,GAGzB,MAAMC,EAAWpV,KAAKqV,kBAAkBtM,EAAM,GAAItC,GAkBlD,OAfAsC,EAAMF,MAAK,CAACyM,EAAGC,KACb,MAAMC,EAASxV,KAAKyV,aAAaH,EAAG7O,EAAK2O,GACnCM,EAAS1V,KAAKyV,aAAaF,EAAG9O,EAAK2O,GAEzC,OAAOpV,KAAK2V,cAAcH,EAAQE,EAAQP,EAAS,IAIrDnV,KAAK4V,aAAa7M,GAGlB/I,KAAKiN,IAAIN,KAAK,OAAQ,CAAElG,MAAKoP,MAAOV,IAEpCnV,KAAKiN,IAAI8C,OAAOzP,KAAK,mBAAmBmG,QAAU0O,WAE3CA,CACR,CAAC,MAAO/U,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,cAAeA,GAC9B,IACT,CACF,CAMA0V,OAAAA,GACE9V,KAAKiN,IAAI8C,OAAOjQ,MAAM,mBAEtB,IACE,MAAMiJ,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAGlC,IAAK,IAAIM,EAAIN,EAAM9B,OAAS,EAAGoC,EAAI,EAAGA,IAAK,CACzC,MAAM0M,EAAIC,KAAKC,MAAMD,KAAKE,UAAY7M,EAAI,KACzCN,EAAMM,GAAIN,EAAMgN,IAAM,CAAChN,EAAMgN,GAAIhN,EAAMM,GAC1C,CAGArJ,KAAK4V,aAAa7M,GAGlB/I,KAAK6P,WAAW/C,QAEhB9M,KAAKiN,IAAIN,KAAK,WAAY,CACxBwJ,UAAWpN,EAAM9B,SAGnBjH,KAAKiN,IAAI8C,OAAOjQ,MAAM,8BACvB,CAAC,MAAOM,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,iBAAkBA,EAC1C,CACF,CASAiV,iBAAAA,CAAkB7G,EAAM/H,GACtBzG,KAAKiN,IAAI8C,OAAOjQ,MAAM,6BAA6B2G,GAEnD,MAAMe,EAAQgH,EAAK2B,QAAQ1J,GAE3B,OAAKe,EACA4O,MAAM5O,GACP,qBAAqB6O,KAAK7O,GAAe,OAEtC,SAHmB,SADP,QAKrB,CAUAiO,YAAAA,CAAajH,EAAM/H,EAAKhB,GACtB,MAAM+B,EAAQgH,EAAK2B,QAAQ1J,GAE3B,OAAQhB,GACN,IAAK,SACH,OAAO0N,WAAW3L,IAAU,EAC9B,IAAK,OACH,OAAO,IAAI9G,KAAK8G,GAAO8O,WAAa,EACtC,QACE,OAAQ9O,GAAS,IAAI2J,cAE3B,CAUAwE,aAAAA,CAAcL,EAAGC,EAAGM,GAElB,GAAIP,QAA+B,MAAiB,QAAVO,EAAkB,GAAM,EAClE,GAAIN,QAA+B,MAAiB,QAAVM,GAAkB,EAAK,EAGjE,MAAMU,EAAajB,EAAIC,GAAM,EAAGD,EAAIC,EAAI,EAAI,EAC5C,MAAiB,QAAVM,EAAkBU,GAAcA,CACzC,CAOAX,YAAAA,CAAa7M,GACX,MAAMyN,EAAW/L,SAASgM,yBAC1B1N,EAAM6D,SAAS4B,GAASgI,EAAS3L,YAAY2D,KAC7CxO,KAAKiN,IAAI/H,UAAU2F,YAAY2L,EACjC,CAQAE,mBAAAA,CAAoBjQ,GAClB,OAAOzG,KAAK6P,WAAW3I,IAAIT,IAAQ,KACrC,CAMAkQ,eAAAA,GACE3W,KAAKiN,IAAI8C,OAAOjQ,MAAM,4BAEtBE,KAAK6P,WAAW/C,QAChB9M,KAAKiN,IAAIN,KAAK,cAChB,CAMA+D,eAAAA,GACE1Q,KAAKiN,IAAI8C,OAAOjQ,MAAM,mCAGtBE,KAAK0P,cAAc5C,QACnB9M,KAAK0P,cAAcpD,IAAI,KAGvBtM,KAAKyP,cAAc7C,SAAQ,CAAC+D,EAAG1M,KAC7BA,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAe,IAI9D,MAAM0J,EAAY5Q,KAAK6Q,gBACnBD,GACFA,EAAUlC,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAI5BuD,SAASwF,iBAAiB,0BAClCrD,SAASgK,IACdA,EAASlI,UAAUsE,SAAShT,KAAKiN,IAAIlH,QAAQmB,IAAI,kBACnD0P,EAASC,SAAU,EACnBD,EAASlI,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBACjD,IAIElH,KAAKiN,IAAIvE,QACX1I,KAAKiN,IAAIvE,OAAOoO,SAAS,IAI3B9W,KAAK4P,aAAa9C,QAClB9M,KAAK6P,WAAW/C,QAGhB9M,KAAKyQ,eAGDzQ,KAAKiN,IAAI6E,YACX9R,KAAKiN,IAAI6E,WAAWC,YAItB/R,KAAKiN,IAAIN,KAAK,kBAEd3M,KAAKiN,IAAI8C,OAAOzP,KAAK,sBACvB,CAMAyW,OAAAA,GACE/W,KAAKiN,IAAI8C,OAAOjQ,MAAM,mBAEtBE,KAAKyQ,eACLzQ,KAAKiN,IAAI6F,eACX,CAEAkE,kBAAAA,CAAmB/S,GACjBjE,KAAKyP,cAAc/C,OAAOzI,GAC1BA,EAAOiL,oBAAoB,QAASlP,KAAK+S,kBAC3C,CAMAkE,OAAAA,GACEjX,KAAKyP,cAAc7C,SAAQ,CAAC+D,EAAG1M,KAC7BjE,KAAKgX,mBAAmB/S,EAAO,IAEjCjE,KAAKyP,cAAc3C,QACnB9M,KAAK0P,cAAc5C,QACnB9M,KAAK4P,aAAa9C,QAClB9M,KAAKiN,IAAI8C,OAAOjQ,MAAM,iCACxB,ECp9BK,MAAMoX,EAAWA,CAACC,EAAMC,EAAMC,GAAY,KAC7C,IAAIC,EACJ,OAAO,YAA6B9W,GAClC,MAAM+W,EAAUvX,KAKVwX,EAAUH,IAAcC,EAC9BG,aAAaH,GACbA,EAAU7E,YANIiF,KACZJ,EAAU,KACLD,GAAWF,EAAKnW,MAAMuW,EAAS/W,EAAK,GAIf4W,GACxBI,GAASL,EAAKnW,MAAMuW,EAAS/W,EAClC,CAAA,ECjBE,MAAMmX,EACX9X,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK4X,aAAe,IAAItP,GAC1B,CAgBAuP,aAAAA,EAAcpR,IAAEA,EAAGvB,UAAEA,EAAS4S,IAAEA,EAAGC,IAAEA,EAAGC,KAAEA,EAAO,EAACC,MAAEA,EAAQ,KAG1D,GAFAjY,KAAKiN,IAAI8C,OAAOjQ,MAAM,0BAA0B2G,IAE3CvB,EAEH,YADAlF,KAAKiN,IAAI8C,OAAO3P,MAAM,8CAKxB,MAAMqT,EAASzT,KAAKkY,gBAAgBzR,GACpCqR,EAAMA,GAAOrE,EAAOqE,IACpBC,EAAMA,GAAOtE,EAAOsE,IAGpB,MAAMI,EAAWnY,KAAKoY,oBAAoBH,GACpChQ,EAAQjI,KAAKqY,gBAAgBP,EAAKC,EAAKC,GAG7ChY,KAAKsY,eAAepT,EAAWiT,GAG/BnY,KAAKuY,mBAAmBJ,EAAUlQ,EAAOxB,GAGzCzG,KAAK4X,aAAarQ,IAAId,EAAK,CAAEwB,QAAOkQ,aAGpCnY,KAAKwY,cAAc/R,GAEnBzG,KAAKiN,IAAI8C,OAAOzP,KAAK,yBAAyBmG,EAChD,CAMAyR,eAAAA,CAAgBzR,GACd,IACE,MAAMgN,EAAS/M,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAChCgL,KAAIvF,IACH,IAAKA,IAASA,EAAK2B,UAAY3B,EAAK2B,QAAQ1J,GAC1C,OAAO,KAET,MAAMe,EAAQ2L,WAAW3E,EAAK2B,QAAQ1J,IACtC,OAAO2P,MAAM5O,GAAS,KAAOA,CAAK,IAEnCwG,QAAOxG,GAAmB,OAAVA,IAEnB,OAAsB,IAAlBiM,EAAOxM,OACF,CACL6Q,IAAK,EACLC,IAAK,KAIF,CACLD,IAAK9B,KAAK8B,OAAOrE,GACjBsE,IAAK/B,KAAK+B,OAAOtE,GAEpB,CAAC,MAAOrT,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,2BAA4BA,GAC3C,CACL0X,IAAK,EACLC,IAAK,IAET,CACF,CAUFK,mBAAAA,CAAoBH,GAClB,MAAM/S,EAAYuF,SAASC,cAAc,OAGzC,GAFAxF,EAAUuT,UAAY,4BAElBR,EAAO,CACP,MAAMS,EAAejO,SAASC,cAAc,OAC5CgO,EAAaD,UAAY,wBACzBC,EAAa/N,YAAcsN,EAC3B/S,EAAU2F,YAAY6N,EAC1B,CAGA,MAAMC,EAAalO,SAASC,cAAc,OAC1CiO,EAAWF,UAAY,oBAEvB,MAAMG,EAAWnO,SAASC,cAAc,SACxCkO,EAASjO,YAAc,MACvBiO,EAASH,UAAY,kBAErB,MAAMI,EAAWpO,SAASC,cAAc,SACxCmO,EAASpT,KAAO,SAChBoT,EAASJ,UAAY,gBAErBE,EAAW9N,YAAY+N,GACvBD,EAAW9N,YAAYgO,GAGvB,MAAMC,EAAarO,SAASC,cAAc,OAC1CoO,EAAWL,UAAY,oBAEvB,MAAMM,EAAWtO,SAASC,cAAc,SACxCqO,EAASpO,YAAc,MACvBoO,EAASN,UAAY,kBAErB,MAAMO,EAAWvO,SAASC,cAAc,SAUxC,OATAsO,EAASvT,KAAO,SAChBuT,EAASP,UAAY,gBAErBK,EAAWjO,YAAYkO,GACvBD,EAAWjO,YAAYmO,GAEvB9T,EAAU2F,YAAY8N,GACtBzT,EAAU2F,YAAYiO,GAEf,CACH5T,YACA2T,WACAG,WAEN,CAMEX,eAAAA,CAAgBP,EAAKC,EAAKC,GACxB,MAAO,CACLF,MACAC,MACAC,OACAiB,WAAYnB,EACZoB,WAAYnB,EAEhB,CAMAO,cAAAA,CAAepT,EAAWiT,GACxBjT,EAAU2F,YAAYsN,EAASjT,UACjC,CAMAqT,kBAAAA,CAAmBJ,EAAUlQ,EAAOxB,GAClC,MAAMoS,SAAEA,EAAQG,SAAEA,GAAab,EAEzBgB,EAAoBjC,GAAS,KACjC,MAAMkC,EAAWjG,WAAW0F,EAASrR,OAC/B6R,EAAWlG,WAAW6F,EAASxR,OAEhC4O,MAAMgD,IAAchD,MAAMiD,KAC7BpR,EAAMgR,WAAajD,KAAK+B,IAAI9P,EAAM6P,IAAK9B,KAAK8B,IAAIuB,EAAUD,IAC1DnR,EAAMiR,WAAalD,KAAK8B,IAAI7P,EAAM8P,IAAK/B,KAAK+B,IAAIqB,EAAUC,IAC1DrZ,KAAKwY,cAAc/R,GACnBzG,KAAKsZ,YAAY7S,GACnB,GACC,KAEHoS,EAAS1J,iBAAiB,QAASgK,GACnCH,EAAS7J,iBAAiB,QAASgK,EACrC,CAMAX,aAAAA,CAAc/R,GACZ,IACE,MAAMwB,MAAEA,EAAKkQ,SAAEA,GAAanY,KAAK4X,aAAa1Q,IAAIT,IAC5CoS,SAAEA,EAAQG,SAAEA,GAAab,EAG/BU,EAASf,IAAM7P,EAAM6P,IACrBe,EAASd,IAAM9P,EAAM8P,IACrBc,EAASb,KAAO/P,EAAM+P,KACtBgB,EAASlB,IAAM7P,EAAM6P,IACrBkB,EAASjB,IAAM9P,EAAM8P,IACrBiB,EAAShB,KAAO/P,EAAM+P,KAGtBa,EAASrR,MAAQS,EAAMgR,WACvBD,EAASxR,MAAQS,EAAMiR,UACxB,CAAC,MAAO9Y,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,2BAA4BA,EACpD,CACF,CAMAkZ,WAAAA,CAAY7S,GACVzG,KAAKiN,IAAI8C,OAAOzP,KAAK,6BAA6BmG,GAClD,MAAMwB,MAAEA,GAAUjI,KAAK4X,aAAa1Q,IAAIT,GAExCzG,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACrB,IACE,IAAKA,IAASA,EAAK2B,UAAY3B,EAAK2B,QAAQ1J,GAE1C,YADAzG,KAAKiN,IAAIsM,SAAS/K,GAIpB,MAAMgL,EAAYrG,WAAW3E,EAAK2B,QAAQ1J,IAC1C,GAAI2P,MAAMoD,GAER,YADAxZ,KAAKiN,IAAIsM,SAAS/K,GAIhBgL,GAAavR,EAAMgR,YAAcO,GAAavR,EAAMiR,WACtDlZ,KAAKiN,IAAIwM,SAASjL,GAElBxO,KAAKiN,IAAIsM,SAAS/K,EAErB,CAAC,MAAOpO,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,wBAAyBA,GAC/CJ,KAAKiN,IAAIsM,SAAS/K,EACpB,KAGFxO,KAAKiN,IAAI6F,gBACT9S,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,mBAAoB,CAChClG,MACAqR,IAAK7P,EAAMgR,WACXlB,IAAK9P,EAAMiR,YAEf,CAOAQ,QAAAA,CAASjT,GACP,MAAMkT,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GACpC,OAAKkT,EAEE,CACL7B,IAAK6B,EAAM1R,MAAMgR,WACjBlB,IAAK4B,EAAM1R,MAAMiR,YAJA,IAMrB,CAQAU,QAAAA,CAASnT,EAAKqR,EAAKC,GACjB,MAAM4B,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GAC/BkT,IAELA,EAAM1R,MAAMgR,WAAanB,EACzB6B,EAAM1R,MAAMiR,WAAanB,EACzB/X,KAAKwY,cAAc/R,GACnBzG,KAAKsZ,YAAY7S,GACnB,CAMAoT,gBAAAA,CAAiBpT,GACf,MAAMkT,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GAC/BkT,IAELA,EAAMxB,SAASjT,UAAU4G,SACzB9L,KAAK4X,aAAalL,OAAOjG,GACzBzG,KAAKiN,IAAI8C,OAAOzP,KAAK,2BAA2BmG,GAClD,EC5SK,MAAMqT,EAIXja,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK+Z,YAAc,KACnB/Z,KAAKoC,WAAa,CAAC,SACnBpC,KAAKga,gBAAkB,EACvBha,KAAKia,eAAiB,gBACtBja,KAAKka,aACP,CAMAA,WAAAA,GACE,MAAMC,EAAiBna,KAAKiN,IAAIlH,QAAQmB,IAAI,uBACvCiT,IAELna,KAAK+Z,YAActP,SAAS6E,cAAc6K,GACrCna,KAAK+Z,aAMV/Z,KAAKoC,WAAapC,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAiBlH,KAAKoC,WAC7DpC,KAAKga,gBAAkBha,KAAKiN,IAAIlH,QAAQmB,IAAI,oBAAsBlH,KAAKga,gBAGvEha,KAAKoa,mBACLpa,KAAKiN,IAAI8C,OAAOjQ,MAAM,qCAVpBE,KAAKiN,IAAI8C,OAAO1P,KAAK,2BAA2B8Z,GAWpD,CAMAC,gBAAAA,GACE,IAAKpa,KAAK+Z,YAAa,OAGvB,MAAMM,EAAkBnD,GAAUoD,IAChCta,KAAK0I,OAAO4R,EAAEhU,OAAOkB,MAAM,GAC1BxH,KAAKiN,IAAIlH,QAAQmB,IAAI,iBAAmB,KAG3ClH,KAAK+Z,YAAY5K,iBAAiB,QAASkL,GAG3Cra,KAAK+Z,YAAY5K,iBAAiB,UAAWmL,IACtCA,EAAEhU,OAAOkB,OACZxH,KAAKua,aACP,IAIFva,KAAK+Z,YAAY5K,iBAAiB,YAAamL,IAC/B,UAAVA,EAAE7T,MACJ6T,EAAEE,iBACFxa,KAAK0I,OAAO4R,EAAEhU,OAAOkB,OACvB,GAEJ,CAOAkB,MAAAA,CAAOC,GACL3I,KAAKiN,IAAI8C,OAAOjQ,MAAM,qBAAsB6I,GAC5C,MAAM8R,EAAkBza,KAAK0a,eAAe/R,GAG5C3I,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgBqR,GACxC,IAAIvG,EAAU,EAGd,GAAKuG,EAML,GAAIA,EAAgBxT,OAASjH,KAAKga,gBAChCha,KAAKiN,IAAI8C,OAAOjQ,MAAM,8BADxB,CAKA,IAEE,MAAM6a,EAAQ3a,KAAK4a,kBAAkBH,GAGrCza,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACrB,MAAMqM,EAAa7a,KAAK8a,kBAAkBtM,GACpBmM,EAAMtE,KAAKwE,IAG/B7a,KAAKiN,IAAIwM,SAASjL,GAClBxO,KAAK+a,iBAAiBvM,EAAMmM,GAC5BzG,MAEAlU,KAAKiN,IAAIsM,SAAS/K,GAClBxO,KAAKgb,iBAAiBxM,GACxB,IAIFxO,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,SAAU,CACtBhE,MAAO8R,EACPvG,UACAjL,MAAOjJ,KAAKiN,IAAIlE,MAAM9B,SAGxBjH,KAAKiN,IAAI8C,OAAOzP,KAAK,0BAA0B4T,YAChD,CAAC,MAAO9T,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,gBAAiBA,EACzC,CAGAqS,YAAW,KACTzS,KAAKiN,IAAI6F,eAAe,GACvB9S,KAAKiN,IAAIlH,QAAQmB,IAAI,qBArCxB,MARElH,KAAKua,aA8CT,CAQAG,cAAAA,CAAe/R,GACb,OAAOA,EACJwI,cACA8J,OACA/J,QAAQ,OAAQ,IACrB,CAQA0J,iBAAAA,CAAkBjS,GAEhB,MAMMuS,EANevS,EAAMuI,QAAQ,sBAAuB,QAG/B9J,MAAM,KAAK4G,OAAOmN,SAI1CpH,KAAIqH,GAAQ,WAAWA,OACvBC,KAAK,IAER,OAAWC,OAAOJ,EAAS,IAC7B,CAQAJ,iBAAAA,CAAkBtM,GAChB,OAAOxO,KAAKoC,WACT2R,KAAItN,GAAO+H,EAAK2B,QAAQ1J,IAAQ,KAChC4U,KAAK,KACLlK,aACL,CAQA4J,gBAAAA,CAAiBvM,EAAMmM,GAChB3a,KAAKiN,IAAIlH,QAAQmB,IAAI,qBAE1BlH,KAAKoC,WAAWwK,SAAQnG,IACtB,MAAMH,EAASkI,EAAKc,cAAc,qBAAqB7I,OACvD,IAAKH,EAAQ,OAEb,MAAM5B,EAAO4B,EAAOqE,YACd4Q,EAAQvb,KAAKiN,IAAIhF,MAAM7G,WAAWsH,OAAOC,MAAMvB,MAAM,KAE3D,IAAIoU,EAAkB9W,EACtB6W,EAAM3O,SAAQwO,IACZ,IAAKA,EAAM,OACX,MAAMK,EAAgBH,OAAO,IAAIF,KAAS,MAC1CI,EAAkBA,EAAgBtK,QAChCuK,EACA,gBAAgBzb,KAAKia,4BACtB,IAGH3T,EAAOoV,UAAYF,CAAe,GAEtC,CAOAR,gBAAAA,CAAiBxM,GACVxO,KAAKiN,IAAIlH,QAAQmB,IAAI,qBAE1BlH,KAAKoC,WAAWwK,SAAQnG,IACtB,MAAMH,EAASkI,EAAKc,cAAc,qBAAqB7I,OAClDH,GAEcA,EAAO2J,iBAAiB,IAAIjQ,KAAKia,gBACzCrN,SAAQ+O,IAEjBA,EAAUC,YADGD,EAAUhR,YACI,GAC3B,GAEN,CAMA4P,WAAAA,GACEva,KAAKiN,IAAI8C,OAAOjQ,MAAM,mBAGlBE,KAAK+Z,cACP/Z,KAAK+Z,YAAYvS,MAAQ,IAI3BxH,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgB,IAGxCpJ,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACrBxO,KAAKiN,IAAIwM,SAASjL,GAClBxO,KAAKgb,iBAAiBxM,EAAK,IAI7BxO,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,iBAGd8F,YAAW,KACTzS,KAAKiN,IAAI6F,eAAe,GACvB9S,KAAKiN,IAAIlH,QAAQmB,IAAI,qBAC1B,CAOA4P,QAAAA,CAAStP,GACHxH,KAAK+Z,cACP/Z,KAAK+Z,YAAYvS,MAAQA,GAE3BxH,KAAK0I,OAAOlB,EACd,CAOAqU,QAAAA,GACE,OAAO7b,KAAKiN,IAAIhF,MAAM7G,WAAWsH,OAAOC,KAC1C,CAOAmT,YAAAA,EAAa1Z,WACXA,EAAU4X,gBACVA,EAAeC,eACfA,EAAc5X,aACdA,GACE,IACED,IAAYpC,KAAKoC,WAAaA,GAC9B4X,IAAiBha,KAAKga,gBAAkBA,GACxCC,IAAgBja,KAAKia,eAAiBA,GACtC5X,GACFrC,KAAKoa,kBAET,CAMAnD,OAAAA,GACMjX,KAAK+Z,cACP/Z,KAAK+Z,YAAY7K,oBAAoB,QAASlP,KAAKqa,iBACnDra,KAAK+Z,YAAY7K,oBAAoB,SAAUlP,KAAK+b,aACpD/b,KAAK+Z,YAAY7K,oBAAoB,WAAYlP,KAAKgc,cAExDhc,KAAKua,aACP,ECvTK,MAAM0B,EAIXpc,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAKkc,YAAc,IAAI5T,IACvBtI,KAAKmc,WACP,CAMAA,SAAAA,GACE,MAAMC,EAAepc,KAAKiN,IAAIlH,QAAQmB,IAAI,sBAC1C,IAAKkV,EAAc,OAGnB,MAAMC,EAAU5R,SAASwF,iBAAiBmM,GAEnB,IAAnBC,EAAQpV,QAKZoV,EAAQzP,SAAS3I,IACf,MAAMwC,EAAMxC,EAAOkM,QAAQmM,QACtB7V,GAQLzG,KAAKkc,YAAY3U,IAAItD,EAAQ,CAC3BwC,MACA8V,UAAWtY,EAAOkM,QAAQqM,eAAiB,QAG7Cxc,KAAKyc,cAAcxY,IAZjBjE,KAAKiN,IAAI8C,OAAO1P,KACd,+CACA4D,EAUsB,IAG5BjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,mCAtBpBE,KAAKiN,IAAI8C,OAAO1P,KAAK,uCAAwC+b,EAuBjE,CAOAK,aAAAA,CAAcxY,GACZjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,gCAAiCmE,GAEvDA,EAAOkL,iBAAiB,SAAS,KAC/B,MAAMuN,EAAW1c,KAAKkc,YAAYhV,IAAIjD,GACjCyY,IAGLA,EAASH,UAAmC,QAAvBG,EAASH,UAAsB,OAAS,MAC7Dvc,KAAKkc,YAAY3U,IAAItD,EAAQyY,GAG7B1c,KAAK2c,sBAAsB1Y,EAAQyY,GAGnC1c,KAAK6I,KAAK6T,EAASjW,IAAKiW,EAASH,WAAU,GAE/C,CAQAI,qBAAAA,CAAsB1Y,EAAQyY,GAE5B1c,KAAKkc,YAAYtP,SAAQ,CAAC+D,EAAGiM,KAC3BA,EAAIlO,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,mBAAmB,IAI/DjD,EAAOyK,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,oBAG1C,MAAM2V,EAAY5Y,EAAOqL,cAAc,mBACnCuN,IACFA,EAAUlS,YAAqC,QAAvB+R,EAASH,UAAsB,IAAM,IAEjE,CASA1T,IAAAA,CAAKpC,EAAK8V,EAAY,OACpBvc,KAAKiN,IAAI8C,OAAOjQ,MAAM,cAAc2G,QAAU8V,WAE9C,IACE,IAAK9V,EACH,MAAUM,MAAM,wBAGb,CAAC,MAAO,QAAQC,SAASuV,EAAUpL,iBACtCnR,KAAKiN,IAAI8C,OAAO1P,KAAK,2BAA2Bkc,0BAChDA,EAAY,OAIdvc,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgB,CAAE3C,MAAK8V,cAG/C,MAAMxT,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAElC,GAAqB,IAAjBA,EAAM9B,OAER,OADAjH,KAAKiN,IAAI8C,OAAOzP,KAAK,qBACd,EAIT,MAAM8U,EAAWpV,KAAKqV,kBAAkBtM,EAAM,GAAItC,GAuBlD,OAtBAzG,KAAKiN,IAAI8C,OAAOjQ,MAAM,iCAAiC2G,OAAS2O,KAGhErM,EAAMF,MAAK,CAACyM,EAAGC,KACb,IACE,MAAMC,EAASxV,KAAKyV,aAAaH,EAAG7O,EAAK2O,GACnCM,EAAS1V,KAAKyV,aAAaF,EAAG9O,EAAK2O,GACzC,OAAOpV,KAAK2V,cAAcH,EAAQE,EAAQ6G,EAC3C,CAAC,MAAOnc,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,gCAAiCA,GAChD,CACT,KAIFJ,KAAK4V,aAAa7M,GAGlB/I,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,OAAQ,CAAElG,MAAK8V,YAAWnH,WAAUe,UAAWpN,EAAM9B,SAEnEjH,KAAKiN,IAAI8C,OAAOzP,KAAK,UAAUyI,EAAM9B,mBAAmBR,KAAO8V,MAAcnH,OACtE,CACR,CAAC,MAAOhV,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,cAAeA,IAC9B,CACT,CACF,CASAiV,iBAAAA,CAAkB7G,EAAM/H,GAEtB,IAAK+H,EAEH,OADAxO,KAAKiN,IAAI8C,OAAO1P,KAAK,0DAA0DoG,GACxE,SAIT,IAAK+H,EAAK2B,WAAa1J,KAAO+H,EAAK2B,SAEjC,OADAnQ,KAAKiN,IAAI8C,OAAO1P,KAAK,6BAA6BoG,EAAO+H,GAClD,SAGT,MAAMhH,EAAQgH,EAAK2B,QAAQ1J,GAG3B,OAAIe,SAAmD,KAAVA,EACpC,UAIJ4O,MAAMjD,WAAW3L,KAAWsV,SAAStV,GAAe,SACrD,qBAAqB6O,KAAK7O,GAGpB4O,MADK,IAAI1V,KAAK8G,GACH8O,WAAsB,SAAT,OAG3B,QACT,CAUAb,YAAAA,CAAajH,EAAM/H,EAAKhB,GAEtB,IAAK+I,EAEH,OADAxO,KAAKiN,IAAI8C,OAAO1P,KAAK,kCACd,KAIT,IAAKmO,EAAK2B,UAAYrB,CAAOiO,EAAU5b,eAAe6b,KAAKxO,EAAK2B,QAAS1J,GAEvE,OADAzG,KAAKiN,IAAI8C,OAAO1P,KAAK,2BAA2BoG,YAAe+H,GAC/C,WAAT/I,GAAiC,SAATA,EAAJ,EAA0B,GAGvD,MAAM+B,EAAQgH,EAAK2B,QAAQ1J,GAG3B,GAAIe,SAAmD,KAAVA,EAC3C,MAAgB,WAAT/B,GAAiC,SAATA,EAAJ,EAA0B,GAGvD,OAAQA,GACN,IAAK,SACH,MAAMxC,EAAMkQ,WAAW3L,GACvB,OAAO4O,MAAMnT,GAAO,EAAIA,EAC1B,IAAK,OACH,MAAMga,EAAO,IAAIvc,KAAK8G,GAAO8O,UAC7B,OAAOF,MAAM6G,GAAQ,EAAIA,EAC3B,QACE,OAAczV,EAAP0V,IAAc/L,cAE3B,CAUAwE,aAAAA,CAAcL,EAAGC,EAAGgH,GAClB,MAAMY,EAAyB,QAAdZ,EAAsB,GAAM,EAE7C,OAAIjH,IAAMC,EAAU,EAChBD,QAAsC,EACtCC,SAAwC,EAErCD,EAAIC,EAAI4H,GAAYA,CAC7B,CAOAvH,YAAAA,CAAa7M,GACX,MAAMxH,EAAoBvB,KAAKiN,IAAIlH,QAAQmB,IAAI,qBACzChC,EAAYuF,SAAS6E,cAAc/N,GAEzC,IAAK2D,EAEH,YADAlF,KAAKiN,IAAI8C,OAAO3P,MAAM,uBAAwBmB,GAMhD,IAAI6b,GAAkB,EAGtB,IAAK,IAAI/T,EAAI,EAAGA,EAAIN,EAAM9B,OAAS,EAAGoC,IACpC,KAAMN,EAAMM,GAAGgU,wBAAwBtU,EAAMM,EAAI,IAAMiU,KAAKC,6BAA8B,CACxFH,GAAkB,EAClB,KACF,CAGF,IAAKA,EAEH,YADApd,KAAKiN,IAAI8C,OAAOjQ,MAAM,2DAKxB,MAAM0W,EAAW/L,SAASgM,yBAC1B1N,EAAM6D,SAAQ4B,GAAQgI,EAAS3L,YAAY2D,KAC3CtJ,EAAU2F,YAAY2L,GAEtBxW,KAAKiN,IAAI8C,OAAOjQ,MAAM,aAAaiJ,EAAM9B,eAC3C,CAQAuW,YAAAA,CAAaC,GACXzd,KAAKiN,IAAI8C,OAAOjQ,MAAM,gCAAiC2d,GAEvD,IAEE,IAAK/W,MAAMC,QAAQ8W,IAAiC,IAApBA,EAASxW,OACvC,MAAUF,MAAM,2CAIlB0W,EAAS7Q,SAAQ,CAAC8Q,EAAWC,KAC3B,IAAKD,EAAUjX,IACb,MAAUM,MAAM,2BAA2B4W,0BAGzCD,EAAUnB,YAAc,CAAC,MAAO,QAAQvV,SAAS0W,EAAUnB,UAAUpL,iBACvEnR,KAAKiN,IAAI8C,OAAO1P,KAAK,uCAAuCsd,MAAUD,EAAUnB,kCAChFmB,EAAUnB,UAAY,MACxB,IAGF,MAAMxT,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAElC,GAAqB,IAAjBA,EAAM9B,OAER,OADAjH,KAAKiN,IAAI8C,OAAOzP,KAAK,qBACd,EAIT,MAAMsd,EAAY,CAAE,EAuCpB,OAtCAH,EAAS7Q,SAAQ8Q,IACVE,EAAUF,EAAUjX,OACvBmX,EAAUF,EAAUjX,KAAOzG,KAAKqV,kBAAkBtM,EAAM,GAAI2U,EAAUjX,KACxE,IAGFsC,EAAMF,MAAK,CAACyM,EAAGC,KACb,IAAK,MAAM9O,IAAEA,EAAG8V,UAAEA,EAAY,SAAWkB,EACvC,IACE,MAAMhY,EAAOmY,EAAUnX,IAAQ,SACzB+O,EAASxV,KAAKyV,aAAaH,EAAG7O,EAAKhB,GACnCiQ,EAAS1V,KAAKyV,aAAaF,EAAG9O,EAAKhB,GAEnC8Q,EAAavW,KAAK2V,cAAcH,EAAQE,EAAQ6G,GACtD,GAAmB,IAAfhG,EAAkB,OAAOA,CAC9B,CAAC,MAAOnW,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,kCAAkCqG,KAAQrG,EAElE,CAEF,OAAO,CAAC,IAGVJ,KAAK4V,aAAa7M,GAGd0U,EAASxW,OAAS,GACpBjH,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgBqU,EAAS,IAGnDzd,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,YAAa,CACzB8Q,WACAtH,UAAWpN,EAAM9B,OACjB2W,cAGF5d,KAAKiN,IAAI8C,OAAOzP,KAAK,gBAAgByI,EAAM9B,qBAAqBwW,EAASxW,oBAClE,CACR,CAAC,MAAO7G,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,uBAAwBA,IACvC,CACT,CACF,CASAyd,kBAAAA,CAAmBpX,EAAKqX,GACtB9d,KAAKiN,IAAI8C,OAAOjQ,MAAM,cAAc2G,4BAEpC,IAEE,IAAKA,EACH,MAAUM,MAAM,wBAGlB,GAA0B,mBAAf+W,EACT,MAAU/W,MAAM,iCAGlB,MAAMgC,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAElC,OAAqB,IAAjBA,EAAM9B,QACRjH,KAAKiN,IAAI8C,OAAOzP,KAAK,qBACd,IAGTyI,EAAMF,MAAK,CAACyM,EAAGC,KACb,IAEE,OAAKD,EAAEnF,SAAYoF,EAAEpF,SAAa1J,KAAO6O,EAAEnF,SAAc1J,KAAO8O,EAAEpF,QAO3D2N,EAFQxI,EAAEnF,QAAQ1J,GACV8O,EAAEpF,QAAQ1J,KALvBzG,KAAKiN,IAAI8C,OAAO1P,KAAK,0BAA0BoG,yCACxC,EAMV,CAAC,MAAOrG,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,8BAA+BA,GAC9C,CACT,KAGFJ,KAAK4V,aAAa7M,GAIlB/I,KAAKiN,IAAIN,KAAK,aAAc,CAC1BlG,MACAsX,eAAgBD,EAAWE,MAAQ,YACnC7H,UAAWpN,EAAM9B,SAGnBjH,KAAKiN,IAAI8C,OAAOzP,KAAK,iBAAiByI,EAAM9B,mBAAmBR,MACxD,EACR,CAAC,MAAOrG,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,qBAAsBA,IACrC,CACT,CACF,CAOA0V,OAAAA,GACE9V,KAAKiN,IAAI8C,OAAOjQ,MAAM,mBAEtB,IACE,MAAMiJ,EAAQrC,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAElC,GAAqB,IAAjBA,EAAM9B,OAER,OADAjH,KAAKiN,IAAI8C,OAAOzP,KAAK,wBACd,EAGT,GAAqB,IAAjByI,EAAM9B,OAER,OADAjH,KAAKiN,IAAI8C,OAAOzP,KAAK,+CACd,EAGTN,KAAKiN,IAAI8C,OAAOjQ,MAAM,aAAaiJ,EAAM9B,gBAGzC,IAAK,IAAIoC,EAAIN,EAAM9B,OAAS,EAAGoC,EAAI,EAAGA,IAAK,CACzC,MAAM0M,EAAIC,KAAKC,MAAMD,KAAKE,UAAY7M,EAAI,KACzCN,EAAMM,GAAIN,EAAMgN,IAAM,CAAChN,EAAMgN,GAAIhN,EAAMM,GAC1C,CAkBA,OAhBArJ,KAAK4V,aAAa7M,GAGlB/I,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgB,MAGxCpJ,KAAKkc,YAAYtP,SAAQ,CAAC+D,EAAG1M,KAC3BA,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,oBAC7C,MAAM2V,EAAY5Y,EAAOqL,cAAc,mBACnCuN,IAAWA,EAAUlS,YAAc,GAAE,IAG3C3K,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,UAAW,CAAEwJ,UAAWpN,EAAM9B,SAE5CjH,KAAKiN,IAAI8C,OAAOzP,KAAK,YAAYyI,EAAM9B,iBAChC,CACR,CAAC,MAAO7G,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,iBAAkBA,IACjC,CACT,CACF,CAOA0H,KAAAA,GACE9H,KAAKiN,IAAI8C,OAAOjQ,MAAM,kBAEtB,IAEEE,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgB,MAGxCpJ,KAAKkc,YAAYtP,SAAQ,CAAC+D,EAAG1M,KAC3BA,EAAOyK,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,oBAC7C,MAAM2V,EAAY5Y,EAAOqL,cAAc,mBACnCuN,IAAWA,EAAUlS,YAAc,GAAE,IAI3C,IAAIsT,EAAc,EAWlB,OAVAje,KAAKkc,YAAYtP,SAAQ,CAACsR,EAAMja,KAC9Bia,EAAK3B,UAAY,MACjBvc,KAAKkc,YAAY3U,IAAItD,EAAQia,GAC7BD,GAAa,IAGfje,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,YAAa,CAAEsR,gBAE7Bje,KAAKiN,IAAI8C,OAAOzP,KAAK,eAAe2d,0CAC7B,CACR,CAAC,MAAO7d,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,oBAAqBA,IACpC,CACT,CACF,CAOA+d,cAAAA,GACE,OAAOne,KAAKiN,IAAIhF,MAAM7G,WAAWyH,KAAKV,OACxC,CASAiW,aAAAA,CAAcna,EAAQwC,EAAK8V,EAAY,OAChC9V,GAKLzG,KAAKkc,YAAY3U,IAAItD,EAAQ,CAAEwC,MAAK8V,cACpCvc,KAAKyc,cAAcxY,GACnBjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,yBAAyB2G,IAN7CzG,KAAKiN,IAAI8C,OAAO1P,KAAK,wCAOzB,CAOAge,gBAAAA,CAAiBpa,GACXjE,KAAKkc,YAAY7P,IAAIpI,KACvBA,EAAOiL,oBAAoB,QAASlP,KAAKyc,eACzCzc,KAAKkc,YAAYxP,OAAOzI,GACxBjE,KAAKiN,IAAI8C,OAAOjQ,MAAM,uBAE1B,CAMAmX,OAAAA,GACEjX,KAAKkc,YAAYtP,SAAQ,CAAC+D,EAAG1M,KAC3BjE,KAAKqe,iBAAiBpa,EAAO,IAE/BjE,KAAKkc,YAAYpP,QACjB9M,KAAKiN,IAAI8C,OAAOjQ,MAAM,+BACxB,EC5jBK,MAAMwe,EAIXze,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAKkF,UAAY,KACjBlF,KAAKwF,UAAY,IAAIwH,EAAUC,GAC/BjN,KAAK+F,QAAU/F,KAAKiN,IAAIlH,QAAQmB,IAAI,cACpClH,KAAKue,iBACP,CAMAA,eAAAA,GAEE,GADAve,KAAKiN,IAAI8C,OAAOjQ,MAAM,0BACjBE,KAAKiN,IAAIlH,QAAQmB,IAAI,sBAAuB,OAGjDlH,KAAKkF,UAAYuF,SAASC,cAAc,OACxC1K,KAAKkF,UAAUuT,UAAYzY,KAAK+F,QAAQnB,eAExC,MAAM4Z,EAAiB/T,SAAS6E,cAC9BtP,KAAKiN,IAAIlH,QAAQmB,IAAI,yBAElBsX,GAILA,EAAe3T,YAAY7K,KAAKkF,WAGhClF,KAAKiN,IAAIhF,MAAMmB,SAAS,aAAc,CACpCF,YAAa,EACbjE,aAAcjF,KAAK+F,QAAQd,aAC3BkE,WAAY,IAGdnJ,KAAKye,aACLze,KAAK4H,SACL5H,KAAKiN,IAAI8C,OAAOjQ,MAAM,2BAdpBE,KAAKiN,IAAI8C,OAAO3P,MAAM,6BAe1B,CAMAqe,UAAAA,GACEze,KAAKiN,IAAIf,GAAG,UAAU,IAAMlM,KAAK4H,WACjC5H,KAAKiN,IAAIf,GAAG,UAAU,IAAMlM,KAAK4H,WACjC5H,KAAKiN,IAAIf,GAAG,QAAQ,IAAMlM,KAAK4H,WAE/B5H,KAAKkF,UAAUiK,iBAAiB,SAAUmL,IACxC,MAAMrW,EAASqW,EAAEhU,OAAOoY,QAAQ,UAChC,IAAKza,EAAQ,OAEb,MAAM0a,EAAO1a,EAAOkM,QAAQwO,KACxBA,GACF3e,KAAK4e,SAASvU,SAASsU,EAAM,IAC/B,GAEJ,CAMA/W,MAAAA,GACE,MAAM+K,EAAejM,MAAM4C,KAAKtJ,KAAKiN,IAAIhF,MAAM7G,WAAW2H,MAAMC,SAC1D/D,EAAejF,KAAKiN,IAAIhF,MAAM7G,WAAW4C,WAAWiB,aACpDkE,EAAa6M,KAAK+B,IACtB,EACA/B,KAAK6I,KAAKlM,EAAa1L,OAAShC,IAI5B6Z,EAAe9e,KAAKiN,IAAIhF,MAAM7G,WAAW4C,WAC/C,IAAIkF,EAAc4V,EAAa5V,YAG3BA,EAAcC,IAChBD,EAAcC,GAIhBnJ,KAAKiN,IAAIhF,MAAMmB,SAAS,aAAc,IACjC0V,EACH5V,cACAC,eAIFnJ,KAAK+e,iBAAiBpM,GACtB3S,KAAKgf,mBACLhf,KAAKiN,IAAI6E,WAAWC,YAEpB/R,KAAKiN,IAAIN,KAAK,aAAc,CAC1BzD,cACAC,aACAlE,eACA0N,aAAcA,EAAa1L,QAE/B,CAMA8X,gBAAAA,CAAiBpM,GACf,MAAMzJ,YAAEA,EAAWjE,aAAEA,GAAiBjF,KAAKiN,IAAIhF,MAAM7G,WAAW4C,WAC1Dib,GAAc/V,EAAc,GAAKjE,EACjCia,EAAWD,EAAaha,EAG9BjF,KAAKiN,IAAIlE,MAAM6D,SAAS4B,IACtBA,EAAKhE,MAAMmE,QAAU,OACrBH,EAAKE,UAAUpC,IAAItM,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAe,IAIzD,MAAMiY,EAAcxM,EAAayM,MAAMH,EAAYC,GAGxB,IAAvBC,EAAYlY,QAAgB0L,EAAa1L,OAAS,EAGpDjH,KAAK4e,SAAS,GAKhB/P,uBAAsB,KACpBsQ,EAAYvS,SAAS4B,IAEnBA,EAAKhE,MAAMmE,QAAU,GACrBH,EAAKE,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAG3C2H,uBAAsB,KACpB7O,KAAKwF,UAAU+I,mBACbC,EACAxO,KAAK+F,QAAQ0I,eAAiB,OAC/B,GACD,GACF,GAEN,CAMAuQ,gBAAAA,GACE,MAAM9V,YAAEA,EAAWC,WAAEA,GAAenJ,KAAKiN,IAAIhF,MAAM7G,WAAW4C,WAI9D,GAFAhE,KAAKkF,UAAUwW,UAAY,GAEvBvS,GAAc,EAEhB,YADAnJ,KAAKkF,UAAUsF,MAAMmE,QAAU,QAIjC3O,KAAKkF,UAAUsF,MAAMmE,QAAU,OAC/B,MAAM0Q,EAAWrf,KAAKsf,yBAAyBpW,EAAaC,GAC5DnJ,KAAKkF,UAAU2F,YAAYwU,EAC7B,CASAC,wBAAAA,CAAyBpW,EAAaC,GACpC,MAAMqN,EAAW/L,SAASgM,yBAE1B,GAAIzW,KAAK+F,QAAQwZ,aAAc,CAC7B,MAAMC,EAAaxf,KAAKyf,iBAAiB,IAAKvW,EAAc,EAAG,CAC7DwW,SAA0B,IAAhBxW,EACVyW,MAAO,wBAETnJ,EAAS3L,YAAY2U,EACvB,CAEAhJ,EAAS3L,YACP7K,KAAKyf,iBAAiB,IAAK,EAAG,CAAEnb,OAAwB,IAAhB4E,KAG1C,MAAMyQ,EAAQ3Z,KAAK4f,mBAAmB1W,EAAaC,GAE/CwQ,EAAMkG,MAAQ,GAAGrJ,EAAS3L,YAAY7K,KAAK8f,kBAE/C,IAAK,IAAIzW,EAAIsQ,EAAMkG,MAAOxW,GAAKsQ,EAAMoG,IAAK1W,IAC9B,IAANA,GAAWA,IAAMF,GACrBqN,EAAS3L,YACP7K,KAAKyf,iBAAiBpW,KAAcA,EAAG,CAAE/E,OAAQ4E,IAAgBG,KAarE,GATIsQ,EAAMoG,IAAM5W,EAAa,GAAGqN,EAAS3L,YAAY7K,KAAK8f,kBAEtD3W,EAAa,GACfqN,EAAS3L,YACP7K,KAAKyf,iBAAiBtW,KAAuBA,EAAY,CACvD7E,OAAQ4E,IAAgBC,KAI1BnJ,KAAK+F,QAAQwZ,aAAc,CAC7B,MAAMS,EAAahgB,KAAKyf,iBAAiB,IAAKvW,EAAc,EAAG,CAC7DwW,SAAUxW,IAAgBC,EAC1BwW,MAAO,wBAETnJ,EAAS3L,YAAYmV,EACvB,CAEA,OAAOxJ,CACT,CAMAiJ,gBAAAA,CACE/a,EACAia,GACAra,OAAEA,GAAS,EAAKob,SAAEA,GAAW,EAAOC,MAAOlH,EAAY,IAAO,IAE9D,MAAMxU,EAASwG,SAASC,cAAc,UAUtC,OATAzG,EAAO0G,YAAcjG,EACrBT,EAAOkM,QAAQwO,KAAOA,EACtB1a,EAAOyK,UAAUpC,IAAItM,KAAK+F,QAAQZ,iBAAmB,mBAEjDsT,GAAWxU,EAAOyK,UAAUpC,IAAImM,GAChCnU,GACFL,EAAOyK,UAAUpC,IAAItM,KAAK+F,QAAQX,iBAAmB,mBACnDsa,IAAUzb,EAAOyb,UAAW,GAEzBzb,CACT,CAEA6b,cAAAA,GACE,MAAMG,EAAOxV,SAASC,cAAc,QAGpC,OAFAuV,EAAKtV,YAAc,MACnBsV,EAAKvR,UAAUpC,IAAI,2BACZ2T,CACT,CAEAL,kBAAAA,CAAmB1W,EAAaC,GAC9B,MAAM+W,EAAalgB,KAAK+F,QAAQma,YAAc,EAG9C,IAAIL,EAAQ7J,KAAK+B,IAAI,EAAG7O,EAFJ8M,KAAKC,OAAOiK,EAAa,GAAK,IAG9CH,EAAM/J,KAAK8B,IAAI3O,EAAa,EAAG0W,EAAQK,EAAa,GAKxD,OAHIH,EAAMF,EAAQK,EAAa,IAC7BL,EAAQ7J,KAAK+B,IAAI,EAAGgI,GAAOG,EAAa,KAEnC,CAAEL,QAAOE,MAClB,CAMAnB,QAAAA,CAASD,GACP,MAAM1W,EAAQjI,KAAKiN,IAAIhF,MAAM7G,WAAW4C,WAClCmc,EAAanK,KAAK+B,IAAI,EAAG/B,KAAK8B,IAAI6G,EAAM1W,EAAMkB,aAEhDgX,IAAelY,EAAMiB,cAGzBlJ,KAAKiN,IAAIhF,MAAMmB,SAAS,yBAA0B+W,GAMlDngB,KAAK4H,SAGD5H,KAAK+F,QAAQV,aACfoN,YAAW,IAAMzS,KAAKqF,eAAe,KAIvCrF,KAAKiN,IAAIN,KAAK,cAAe,CAC3ByT,aAAcnY,EAAMiB,YACpBA,YAAaiX,EACbhX,WAAYlB,EAAMkB,aAEtB,CAEA9D,WAAAA,GACE,MAAMH,EAAYuF,SAAS6E,cACzBtP,KAAKiN,IAAIlH,QAAQmB,IAAI,yBAElBhC,EAKLmb,OAAOC,SAAS,CACdC,IAAKrb,EAAUsb,UAAYxgB,KAAK+F,QAAQT,aACxCmb,SAAU,WANVzgB,KAAKiN,IAAI8C,OAAO1P,KAAK,8BAQzB,CAMAqgB,iBAAAA,CAAkBzgB,GAChBD,KAAKiN,IAAI8C,OAAOjQ,MAAM,+BAA+BG,GAGrDD,KAAKiN,IAAIlH,QAAQwB,IAAI,qBAAsBtH,GAEvCA,EAEFD,KAAKue,mBAGLve,KAAKkF,UAAU4G,SACf9L,KAAK2gB,gBAIP3gB,KAAKiN,IAAIN,KAAK,wBAAyB,CAAE1M,WAC3C,CAMA0gB,YAAAA,GACE,MAAMhO,EAAejM,MAAM4C,KAAKtJ,KAAKiN,IAAIhF,MAAM7G,WAAW2H,MAAMC,SAEhE6F,uBAAsB,KACpB8D,EAAa/F,SAAQ4B,IACnBA,EAAKhE,MAAMmE,QAAU,GACrBH,EAAKE,UAAU5C,OAAO9L,KAAKiN,IAAIlH,QAAQmB,IAAI,gBAE3C2H,uBAAsB,KACpB7O,KAAKwF,UAAU+I,mBAAmBC,EAAMxO,KAAK+F,QAAQ0I,eAAiB,OAAO,GAC7E,GACF,GAEN,EChWK,MAAMmS,EAIX/gB,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK6gB,cAAgB,IAAIC,gBACzB9gB,KAAK+gB,uBAGLtO,YAAW,KACTzS,KAAKghB,aAAa,GACjB,EACL,CAMAD,oBAAAA,GACEV,OAAOlR,iBAAiB,YAAY,KAClCnP,KAAKghB,aAAa,GAEtB,CAUFjP,SAAAA,GACE/R,KAAKiN,IAAI8C,OAAOjQ,MAAM,sBACtB,MAAMmhB,EAAS,IAAIH,gBACb7Y,EAAQjI,KAAKiN,IAAIhF,MAAM7G,WAGvBsO,EAAgB1P,KAAKiN,IAAIe,OAAO+G,mBAGtC9M,EAAMC,QAAQC,QAAUuH,EAGxB1P,KAAKkhB,gBAAgBD,EAAQhZ,GAG7BjI,KAAKmhB,eAAeF,EAAQhZ,GAG5BjI,KAAKohB,eAAeH,EAAQhZ,GAG5BjI,KAAKqhB,aAAaJ,EAAQhZ,GAG1BjI,KAAKshB,mBAAmBL,EAAQhZ,GAGhCjI,KAAKuhB,UAAUN,EACjB,CAQEC,eAAAA,CAAgBD,EAAQhZ,GACtB,MAAMC,EAAUD,EAAMC,QAGtB,GAA6B,IAAzBA,EAAQC,QAAQtE,MACU,IAAzBqE,EAAQC,QAAQtE,MAAcqE,EAAQC,QAAQkE,IAAI,KACrD,OAIF,MAAMkH,EAAgB,CAAE,EACxB,IAAK,MAAMvF,KAAU9F,EAAQC,QAC3B,GAAe,MAAX6F,EAAgB,CAClB,MAAOvI,EAAM+B,GAASwG,EAAO5G,MAAM,KAC9BmM,EAAc9N,KACjB8N,EAAc9N,GAAQ,IAAI2C,KAE5BmL,EAAc9N,GAAM6G,IAAI9E,EAC1B,CAIFsH,OAAOvF,QAAQgK,GAAe3G,SAAQ,EAAEnH,EAAMgO,MAC5CwN,EAAO1Z,IAAI9B,EAAMiB,MAAM4C,KAAKmK,GAAQ4H,KAAK,KAAK,IAI3B,OAAjBnT,EAAQO,MACVwY,EAAO1Z,IAAI,aAAcW,EAAQO,KAAK0I,eAIpCjJ,EAAQG,OAAOxE,KAAO,GAA2B,OAAtBqE,EAAQ/F,WACrC8e,EAAO1Z,IAAI,YAAaW,EAAQ/F,UAAUgP,eAI5CjJ,EAAQG,OAAOuE,SAAQ,CAACoH,EAAOO,KAC7B0M,EAAO1Z,IAAI,SAASgN,EAAW7N,MAAM4C,KAAK0K,EAAM9L,SAASmT,KAAK,MACvC,OAAnBrH,EAAMC,UACRgN,EAAO1Z,IAAI,WAAWgN,EAAWP,EAAMC,SAAS9C,cAClD,GAEJ,CAQAgQ,cAAAA,CAAeF,EAAQhZ,GAErBA,EAAMC,QAAQK,OAAOqE,SAAQ,CAAC+M,EAAOlT,KACnC,MAAMwS,WAAEA,EAAUC,WAAEA,GAAeS,EAC/BV,IAAeU,EAAM7B,KAAOoB,IAAeS,EAAM5B,KACnDkJ,EAAO1Z,IAAI,SAASd,EAAO,GAAGwS,KAAcC,IAC9C,IAIFjR,EAAMC,QAAQM,WAAWoE,SAAQ,CAAC+M,EAAOlT,KACvC,MAAMoZ,MAAEA,EAAKE,IAAEA,GAAQpG,EACvBsH,EAAO1Z,IAAI,aAAad,EAAO,GAAGoZ,EAAM2B,iBAAiBzB,EAAIyB,gBAAgB,GAEjF,CAQAJ,cAAAA,CAAeH,EAAQhZ,GACjBA,EAAMS,OAAOC,OACfsY,EAAO1Z,IAAI,SAAUU,EAAMS,OAAOC,MAEtC,CAQA0Y,YAAAA,CAAaJ,EAAQhZ,GACnB,GAAIA,EAAMY,KAAKV,QAAS,CACtB,MAAM1B,IAAEA,EAAG8V,UAAEA,GAActU,EAAMY,KAAKV,QACtC8Y,EAAO1Z,IAAI,OAAQ,GAAGd,KAAO8V,IAC/B,CACF,CAQA+E,kBAAAA,CAAmBL,EAAQhZ,GACzB,MAAMiB,YAAEA,EAAWjE,aAAEA,GAAiBgD,EAAMjE,WAEvChE,KAAKiN,IAAIlH,QAAQmB,IAAI,wBAItBgC,EAAc,GAChB+X,EAAO1Z,IAAI,OAAQ2B,MAEjBjE,IAAiBjF,KAAKiN,IAAIlH,QAAQmB,IAAI,4BACxC+Z,EAAO1Z,IAAI,UAAWtC,MAE1B,CAOAsc,SAAAA,CAAUN,GACR,MAAMQ,EAAcR,KACdS,EAAS,GAAGrB,OAAOsB,SAASC,WAAWH,EAAc,IAAMA,EAAc,KAG3EC,IAAWrB,OAAOsB,SAASE,OAC7BxB,OAAOyB,QAAQP,UAAU,CAAA,EAAI,GAAIG,GACjC1hB,KAAKiN,IAAI8C,OAAOjQ,MAAM,eAAgB4hB,GAE1C,CAMAV,WAAAA,GACEhhB,KAAKiN,IAAI8C,OAAOjQ,MAAM,0BACtB,MAAMmhB,EAAS,IAAIH,gBAAgBT,OAAOsB,SAASjZ,QAEnD,IAEM1I,KAAKiN,IAAIe,QACXhO,KAAKiN,IAAIe,OAAO0C,kBAIlB,MAAMxO,EAAa+e,EAAO/Z,IAAI,cAC1BhF,GAAclC,KAAKiN,IAAIe,QACzBhO,KAAKiN,IAAIe,OAAO8G,cAAc5S,EAAWrB,eAI3C,MAAMkhB,EAAerb,MAAM4C,KAAK2X,EAAO1X,WAAWyE,QAAO,EAAEvH,KACzDzG,KAAKgiB,gBAAgBvb,KAGnBsb,EAAa9a,OAAS,GAAKjH,KAAKiN,IAAIe,SAEtChO,KAAKiN,IAAIe,OAAO0B,cAAc5C,QAG9BiV,EAAanV,SAAQ,EAAEnH,EAAM+B,MACvBA,GAEaA,EAAMJ,MAAM,KACpBwF,SAAQqV,IAEbjiB,KAAKiN,IAAIe,OAAO4G,UADD,GAAGnP,KAAQwc,IACO,GAErC,KAKAjiB,KAAKiN,IAAIe,QACXhO,KAAKiN,IAAIe,OAAOyC,eAIlBzQ,KAAKkiB,qBAAqBjB,GAC1BjhB,KAAKmiB,mBAAmBlB,GACxBjhB,KAAKoiB,yBAAyBnB,GAE9BjhB,KAAKiN,IAAIN,KAAK,iBAAkB,CAAEsU,OAAQnS,OAAOuT,YAAYpB,KAC7DjhB,KAAKiN,IAAI8C,OAAOzP,KAAK,wBACtB,CAAC,MAAOF,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,gCAAiCA,GAEnDJ,KAAKiN,IAAIe,QACXhO,KAAKiN,IAAIe,OAAO0C,iBAEpB,CACF,CAOA4R,qBAAAA,CAAsBrB,GACpB,MAAMhZ,EAAQjI,KAAKiN,IAAIhF,MAAM7G,WAC7B,IAAImhB,GAAa,EAGjB,MAAMrgB,EAAa+e,EAAO/Z,IAAI,cAC1BhF,IACF+F,EAAMC,QAAQO,KAAOvG,EAAWrB,eAIlC,MAAMsB,EAAY8e,EAAO/Z,IAAI,aACzB/E,IACF8F,EAAMC,QAAQ/F,UAAYA,EAAUtB,eAItC,IAAK,MAAO4E,EAAMgO,KAAWwN,EAAO1X,UAC9BvJ,KAAKgiB,gBAAgBvc,IACvBgO,EAAOrM,MAAM,KAAK4G,OAAOmN,SAASvO,SAAQpF,IACxC+a,GAAa,EACbta,EAAMC,QAAQC,QAAQmE,IAAI,GAAG7G,KAAQ+B,IAAQ,IAMnD,IAAK,MAAOf,EAAKe,KAAUyZ,EAAO1X,UAChC,GAAI9C,EAAIyL,WAAW,UAAW,CAC5B,MAAMqC,EAAU9N,EAAIyK,QAAQ,SAAU,IAChC+C,EAAWgN,EAAO/Z,IAAI,WAAWqN,IAAY1T,eAAiB,KACpEoH,EAAMC,QAAQG,OAAOd,IAAIgN,EAAS,CAChCrM,QAAS,IAAIE,IAAIZ,EAAMJ,MAAM,MAC7B6M,YAEJ,CAIGsO,GAA4C,IAA9Bta,EAAMC,QAAQG,OAAOxE,MACtCoE,EAAMC,QAAQC,QAAQmE,IAAI,IAE9B,CAOAkW,oBAAAA,CAAqBvB,GACnB,MAAMhZ,EAAQjI,KAAKiN,IAAIhF,MAAM7G,WAG7B,IAAK,MAAOqF,EAAKe,KAAUyZ,EAAO1X,UAChC,GAAI9C,EAAIyL,WAAW,UAAW,CAC5B,MAAMuQ,EAAWhc,EAAIyK,QAAQ,SAAU,KAChC4G,EAAKC,GAAOvQ,EAAMJ,MAAM,KAAK2M,IAAI2O,QACxCza,EAAMC,QAAQK,OAAOhB,IAAIkb,EAAU,CAAExJ,WAAYnB,EAAKoB,WAAYnB,GACpE,CAIF,IAAK,MAAOtR,EAAKe,KAAUyZ,EAAO1X,UAChC,GAAI9C,EAAIyL,WAAW,cAAe,CAChC,MAAMuQ,EAAWhc,EAAIyK,QAAQ,aAAc,KACpC2O,EAAOE,GAAOvY,EAAMJ,MAAM,KAAK2M,KAAI4O,GAAO,IAAIjiB,KAAKiiB,KAC1D1a,EAAMC,QAAQM,WAAWjB,IAAIkb,EAAU,CAAE5C,QAAOE,OAClD,CAEJ,CAOAmC,oBAAAA,CAAqBjB,GACnB,MAAM2B,EAAc3B,EAAO/Z,IAAI,WAAa,GAC5ClH,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgBwZ,GAEpC5iB,KAAKiN,IAAIlH,QAAQmB,IAAI,iBACvBlH,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAeM,MAAQob,EAEhD,CAOAT,kBAAAA,CAAmBlB,GACjB,MAAM4B,EAAY5B,EAAO/Z,IAAI,QAC7B,GAAI2b,EAAW,CACb,MAAOpc,EAAK8V,GAAasG,EAAUzb,MAAM,KACzCpH,KAAKiN,IAAIhF,MAAMmB,SAAS,eAAgB,CAAE3C,MAAK8V,aACjD,CACF,CAOA6F,wBAAAA,CAAyBnB,GACvB,MAAMtC,EAAOtU,SAAS4W,EAAO/Z,IAAI,UAAY,EACvC4b,EAAUzY,SAAS4W,EAAO/Z,IAAI,aACrBlH,KAAKiN,IAAIlH,QAAQmB,IAAI,2BAEpClH,KAAKiN,IAAIhF,MAAMmB,SAAS,aAAc,CACpCF,YAAayV,EACb1Z,aAAc6d,GAElB,CAQAd,eAAAA,CAAgBe,GAId,QAHuB,CACrB,SAAU,OAAQ,OAAQ,UAAW,aAAc,aAE9B/b,SAAS+b,IACxBA,EAAM7Q,WAAW,WACjB6Q,EAAM7Q,WAAW,aACjB6Q,EAAM7Q,WAAW,WACjB6Q,EAAM7Q,WAAW,cAC3B,CAMA8Q,QAAAA,GACE3C,OAAOyB,QAAQP,UAAU,CAAA,EAAI,GAAIlB,OAAOsB,SAASC,UACjD5hB,KAAKiN,IAAIhF,MAAMH,QACX9H,KAAKiN,IAAIe,QACXhO,KAAKiN,IAAIe,OAAO0C,iBAEpB,CAOAuS,YAAAA,GACE,OAAO,IAAInC,gBAAgBT,OAAOsB,SAASjZ,OAC7C,CAOAwa,SAAAA,GACE,OAAO7C,OAAOsB,SAASjZ,OAAOzB,OAAS,CACzC,CAQAkc,QAAAA,CAASJ,GACP,OAAO,IAAIjC,gBAAgBT,OAAOsB,SAASjZ,QAAQxB,IAAI6b,EACzD,EChbK,MAAMK,EACXvjB,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK4X,aAAe,IAAItP,IACxBtI,KAAK+F,QAAU/F,KAAKiN,IAAIlH,QAAQmB,IAAI,UAC/BlH,KAAKiN,IAAIoW,eACZrjB,KAAKiN,IAAIoW,aAAe,IAAI3Z,EAAa1J,KAAKiN,IAAIlH,UAIpD/F,KAAKiN,IAAIoW,aAAalY,aACxB,CAgBAmY,cAAAA,EAAe7c,IAAEA,EAAGhB,KAAEA,EAAIP,UAAEA,EAAS4S,IAAEA,EAAGC,IAAEA,EAAGC,KAAEA,EAAO,EAAC3U,GAAEA,IAGzD,GAFArD,KAAKiN,IAAI8C,OAAOjQ,MAAM,2BAA2B2G,IAE5CvB,EAEH,YADAlF,KAAKiN,IAAI8C,OAAO3P,MAAM,+CAKxB,MAAMqT,EAASzT,KAAKkY,gBAAgBzR,EAAKhB,GACzCqS,EAAMA,GAAOrE,EAAOqE,IACpBC,EAAMA,GAAOtE,EAAOsE,IAGpB,MAIMwL,EAAkB,IAJAvjB,KAAKiN,IAAIlH,QAAQmB,IAAI,qBAAuB,CAClE5D,eAAe,EACfC,KAAM,OAIHF,GAICmgB,EAAgBD,EAAgBjgB,cAClCtD,KAAKyjB,uBAAuBhd,EAAK8c,EAAgBhgB,MACjD,CAAEmgB,OAAQ,GAAIC,SAAU,GAAI5L,IAAK,GAG/BI,EAAWnY,KAAK4jB,qBAAqBJ,EAAeD,GACpDtb,EAAQjI,KAAKqY,gBAAgBP,EAAKC,EAAKC,EAAMvS,GAGnDwC,EAAM5E,GAAKkgB,EACPA,EAAgBjgB,gBAClB2E,EAAMnE,UAAY0f,GAIpBxjB,KAAKsY,eAAepT,EAAWiT,GAG/BnY,KAAKuY,mBAAmBJ,EAAUlQ,EAAOxB,GAGzCzG,KAAK4X,aAAarQ,IAAId,EAAK,CAAEwB,QAAOkQ,aAGpCnY,KAAK6jB,eAAepd,GAGhB8c,EAAgBjgB,eAClBtD,KAAK8jB,wBAAwB3L,EAAUlQ,EAAOub,EAAcG,UAG9D3jB,KAAKiN,IAAI8C,OAAOzP,KAAK,0BAA0BmG,EACjD,CAKAyR,eAAAA,CAAgBzR,EAAKhB,GACnB,MAAMgO,EAAS/M,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAChCgL,KAAKvF,IACJ,MAAMhH,EAAQgH,EAAK2B,QAAQ1J,GAC3B,MAAgB,SAAThB,EAAkB,IAAI/E,KAAK8G,GAAO8O,UAAYnD,WAAW3L,EAAM,IAEvEwG,QAAQxG,IAAW4O,MAAM5O,KAE5B,MAAO,CACLsQ,IAAK9B,KAAK8B,OAAOrE,GACjBsE,IAAK/B,KAAK+B,OAAOtE,GAErB,CAQAmQ,oBAAAA,CAAqBJ,EAAeD,GAClC,MAEM/e,GADJxE,KAAKiN,IAAIlH,QAAQmB,IAAI,WAAalH,KAAKiN,IAAIoW,aAAajd,eACpC5B,QAAUxE,KAAKiN,IAAIoW,aAAajd,cAAc5B,OAC9DuG,EAAgB/K,KAAKiN,IAAIlH,QAAQmB,IAAI,WAAa,CAAE,EAEpDhC,EAAYuF,SAASC,cAAc,OACzCxF,EAAUuT,UAAY,sBAEtB,MAAMrV,EAASqH,SAASC,cAAc,OACtCtH,EAAOqV,UAAY1N,EAAcnG,eAEjC,MAAMpB,EAAQiH,SAASC,cAAc,OAIrC,GAHAlH,EAAMiV,UAAY1N,EAAclG,WAG5B0e,GAAiBjgB,eAAiBkgB,GAAeE,QAAQzc,OAAS,EAAG,CACvE,MAAMnD,EAAY9D,KAAK+jB,oBAAoBP,EAAehf,GAC1DpB,EAAOyH,YAAY/G,EACrB,CAEA,MAAMkgB,EAAgBvZ,SAASC,cAAc,OAC7CsZ,EAAcvL,UAAY1N,EAAc/F,cAExC,MAAMif,EAAWxZ,SAASC,cAAc,OACxCuZ,EAASxL,UAAY1N,EAAcjG,WAEnC,MAAMof,EAAWzZ,SAASC,cAAc,OACxCwZ,EAASzL,UAAY1N,EAAcjG,WAEnC,MAAMsU,EAAW3O,SAASC,cAAc,OACxC0O,EAASX,UAAY1N,EAAchG,WAEnC,MAAMsU,EAAW5O,SAASC,cAAc,OAaxC,OAZA2O,EAASZ,UAAY1N,EAAchG,WAGnC3B,EAAOyH,YAAYrH,GACnBJ,EAAOyH,YAAYmZ,GACnB5gB,EAAOyH,YAAYoZ,GACnB7gB,EAAOyH,YAAYqZ,GACnB9gB,EAAOyH,YAAYuO,GACnBhW,EAAOyH,YAAYwO,GAEnBnU,EAAU2F,YAAYzH,GAEf,CACL8B,YACA9B,SACAI,QACAwgB,gBACAC,WACAC,WACA9K,WACAC,WAEJ,CAGA8K,eAAAA,CAAgBjG,EAAM1Z,GACpB,MAAMV,EAAY2G,SAASC,cAAc,OAYzC,OAXA5G,EAAU2U,UAAY,gBAGtByF,EAAKtR,SAAQ,CAACpF,EAAOmW,KACnB,MAAM5Z,EAAM0G,SAASC,cAAc,OACnC3G,EAAI0U,UAAY,oBAChB1U,EAAIyG,MAAM4Z,OAAY5c,EAAH,IACnBzD,EAAIyG,MAAMR,gBAAkBxF,EAAOV,UACnCA,EAAU+G,YAAY9G,EAAI,IAGrBD,CACT,CASA2f,sBAAAA,CAAuBhd,EAAKlD,EAAO,IACjC,IACE,MAAMkQ,EAAS/M,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OAChCgL,KAAKvF,GAAS2E,WAAW3E,EAAK2B,QAAQ1J,MACtCuH,QAAQxG,IAAW4O,MAAM5O,KAE5B,GAAsB,IAAlBiM,EAAOxM,OACT,MAAO,CAAEyc,OAAQ,GAAIC,SAAU,GAAI5L,IAAK,GAG1C,MAAMD,EAAM9B,KAAK8B,OAAOrE,GAClBsE,EAAM/B,KAAK+B,OAAOtE,GAClB4Q,GAAYtM,EAAMD,GAAOvU,EAEzBmgB,EAAahd,MAAMnD,GAAM+gB,KAAK,GAC9BX,EAAejd,MAAMnD,EAAO,GAGlC,IAAK,IAAI8F,EAAI,EAAGA,GAAK9F,EAAM8F,IACzBsa,EAASta,GAAKyO,EAAMzO,EAAIgb,EAI1B5Q,EAAO7G,SAASpF,IACVA,IAAUuQ,EAMd2L,EADiB1N,KAAKC,OAAOzO,EAAQsQ,GAAOuM,MAJ1CX,EAAOA,EAAOzc,OAAS,IAKP,IAIpB,MAAMsd,EAAWvO,KAAK+B,OAAO2L,GAK7B,MAAO,CACLA,OALuBA,EAAO3P,KAC7ByQ,GAAUxO,KAAK+B,IAAI,GAAI/B,KAAKyO,MAAOD,EAAQD,EAAY,QAKxDZ,WACA5L,IAAKwM,EACLzM,MACAC,MAEH,CAAC,MAAO3X,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,+BAAgCA,GAC/C,CAAEsjB,OAAQ,GAAIC,SAAU,GAAI5L,IAAK,EAC1C,CACF,CAMA+L,uBAAAA,CAAwB3L,EAAUlQ,EAAO0b,GACvC,MAAMe,EAAOvM,EAAS/U,OAAO6M,iBAAiB,sBAExC0U,EAAkBA,KACtB,MAAMC,EAAS3c,EAAMgR,WACf4L,EAAS5c,EAAMiR,WAErBwL,EAAK9X,SAAQ,CAAC7I,EAAK4Z,KACAgG,EAAShG,IAIViH,GAHDjB,EAAShG,EAAQ,IAGIkH,EAClC9gB,EAAI2K,UAAUpC,IAAI,UAElBvI,EAAI2K,UAAU5C,OAAO,SACvB,GACA,EAIJ9L,KAAKiN,IAAIf,GAAG,eAAe,IAAMyY,MAGjCA,GACF,CAMAZ,mBAAAA,CAAoBP,EAAehf,GACjC,MAAMkf,OAAEA,GAAWF,EACb1f,EAAY2G,SAASC,cAAc,OAUzC,OATA5G,EAAU2U,UAAY,gBAEtBiL,EAAO9W,SAASwX,IACd,MAAMrgB,EAAM0G,SAASC,cAAc,OACnC3G,EAAI0U,UAAY,oBAChB1U,EAAIyG,MAAM4Z,OAAYA,EAAH,IACnBtgB,EAAU+G,YAAY9G,EAAI,IAGrBD,CACT,CAMAuU,eAAAA,CAAgBP,EAAKC,EAAKC,EAAMvS,GAC9B,MAAO,CACLqS,MACAC,MACAkB,WAAYnB,EACZoB,WAAYnB,EACZC,OACAvS,OACAqf,YAAY,EAEhB,CAMAxM,cAAAA,CAAepT,EAAWiT,GACxB,MAAM/U,OACJA,EAAMI,MACNA,EAAKwgB,cACLA,EAAaC,SACbA,EAAQC,SACRA,EAAQ9K,SACRA,EAAQC,SACRA,GACElB,EAEJ/U,EAAOyH,YAAYrH,GACnBJ,EAAOyH,YAAYmZ,GACnB5gB,EAAOyH,YAAYoZ,GACnB7gB,EAAOyH,YAAYqZ,GACnB9gB,EAAOyH,YAAYuO,GACnBhW,EAAOyH,YAAYwO,GACnBnU,EAAU2F,YAAYzH,EACxB,CAMAmV,kBAAAA,CAAmBJ,EAAUlQ,EAAOxB,GAClC,MAAMwd,SAAEA,EAAQC,SAAEA,GAAa/L,EAEzB4M,EAAeC,GAAW1K,IAC9BA,EAAEE,iBACFvS,EAAM6c,YAAa,EAGnB,MAIMG,EAAeC,IACnB,MAAMC,GALY3T,EAKK0T,GAJVE,QAAU5T,EAAM4T,QAAQ,GAAK5T,EADxBA,MAMlBxR,KAAKqlB,kBAAkBlN,EAAUlQ,EAAOxB,EAAKue,EAA7ChlB,CAAoDmlB,EAAI,EAGpDG,EAAcA,KAClBrd,EAAM6c,YAAa,EAGnBzE,OAAOnR,oBAAoB,YAAa+V,GACxC5E,OAAOnR,oBAAoB,UAAWoW,GACtCjF,OAAOnR,oBAAoB,YAAa+V,GACxC5E,OAAOnR,oBAAoB,WAAYoW,GACvCjF,OAAOnR,oBAAoB,cAAeoW,GAE1CtlB,KAAKsZ,YAAY7S,EAAI,EAIvB4Z,OAAOlR,iBAAiB,YAAa8V,GACrC5E,OAAOlR,iBAAiB,UAAWmW,GACnCjF,OAAOlR,iBAAiB,YAAa8V,EAAa,CAAEM,SAAS,IAC7DlF,OAAOlR,iBAAiB,WAAYmW,GACpCjF,OAAOlR,iBAAiB,cAAemW,EAAY,EAIrDrB,EAAS9U,iBAAiB,YAAa4V,GAAY,IACnDd,EAAS9U,iBAAiB,aAAc4V,GAAY,GAAO,CAAEQ,SAAS,IACtErB,EAAS/U,iBAAiB,YAAa4V,GAAY,IACnDb,EAAS/U,iBAAiB,aAAc4V,GAAY,GAAQ,CAAEQ,SAAS,GACzE,CAMA1B,cAAAA,CAAepd,GACb,MAAMwB,MAAEA,EAAKkQ,SAAEA,GAAanY,KAAK4X,aAAa1Q,IAAIT,IAC5Cwd,SAAEA,EAAQC,SAAEA,EAAQF,cAAEA,EAAa5K,SAAEA,EAAQC,SAAEA,GAAalB,EAG5DwB,EAAQ1R,EAAM8P,IAAM9P,EAAM6P,IAE1B0N,GAAWvd,EAAMiR,WAAajR,EAAM6P,KAAO6B,EAAS,IAGpD8L,EAAgBzP,KAAK+B,IAAI,EAAG/B,KAAK8B,KAJtB7P,EAAMgR,WAAahR,EAAM6P,KAAO6B,EAAS,IAIP,MAC7C+L,EAAgB1P,KAAK+B,IAAI,EAAG/B,KAAK8B,IAAI0N,EAAQ,MAGnDvB,EAASzZ,MAAMmb,KAAUF,EAAH,IACtBvB,EAAS1Z,MAAMmb,KAAUD,EAAH,IAGtB1B,EAAcxZ,MAAMmb,KAAUF,EAAH,IAC3BzB,EAAcxZ,MAAMob,MAAWF,EAAgBD,EAAnB,IAG5B,MAAMI,EACW,SAAf5d,EAAMxC,KACD+B,GAAU,IAAI9G,KAAK8G,GAAOse,qBAC1Bte,GAAUA,EAAMue,QAAQ,GAG/B3M,EAASzO,YAAckb,EAAY5d,EAAMgR,YACzCI,EAAS1O,YAAckb,EAAY5d,EAAMiR,YAGzCE,EAAS5O,MAAMmb,KAAUF,EAAH,IACtBpM,EAAS7O,MAAMmb,KAAUD,EAAH,IAIpBtM,EAAS5O,MAAM8C,UADbmY,EAAgB,EACS,gBAClBA,EAAgB,GACE,oBAEA,mBAI3BpM,EAAS7O,MAAM8C,UADboY,EAAgB,EACS,gBAClBA,EAAgB,GACE,oBAEA,kBAE/B,CAGAL,iBAAAA,CAAkBlN,EAAUlQ,EAAOxB,EAAKue,GACtChlB,KAAKiN,IAAI8C,OAAOjQ,MAAM,6BAA6B2G,GAEnD,MAAMjD,MAAEA,GAAU2U,EAGlB,OAAOjB,GAAUoD,IACf,MAAM0L,EAAU1L,EAAE8K,QAAU9K,EAAE8K,QAAQ,GAAGY,QAAU1L,EAAE0L,QAC/CC,EAAOziB,EAAM0iB,wBACbC,EAAaF,EAAKL,MAClBQ,EAAiBC,IAAiBF,EAUlCG,EAAUtQ,KAAKyO,OADPxc,EAAM6P,KAAO7P,EAAM8P,IAAM9P,EAAM6P,KAH7B9B,KAAK8B,IAAI9B,KAAK+B,IAAI,GAF/BiO,EAAUC,EAAKN,KAAOS,IACtBD,EAAa,EAAIC,IAC8B,IAIfne,EAAM+P,MAAQ/P,EAAM+P,KAEnDgN,EACF/c,EAAMgR,WAAajD,KAAK8B,IAAIwO,EAASre,EAAMiR,YAE3CjR,EAAMiR,WAAalD,KAAK+B,IAAIuO,EAASre,EAAMgR,YAG7CjZ,KAAK6jB,eAAepd,EAAI,GACvB,GACL,CAMA6S,WAAAA,CAAY7S,GACVzG,KAAKiN,IAAI8C,OAAOjQ,MAAM,6BAA6B2G,GAEnD,MAAMwB,MAAEA,GAAUjI,KAAK4X,aAAa1Q,IAAIT,GAExCzG,KAAKiN,IAAIlE,MAAM6D,SAAS4B,IACtB,MAAMhH,EACW,SAAfS,EAAMxC,KACF,IAAI/E,KAAK8N,EAAK2B,QAAQ1J,IAAM6P,UAC5BnD,WAAW3E,EAAK2B,QAAQ1J,IAE1Be,GAASS,EAAMgR,YAAczR,GAASS,EAAMiR,WAC9ClZ,KAAKiN,IAAIwM,SAASjL,GAElBxO,KAAKiN,IAAIsM,SAAS/K,EACpB,IAGFxO,KAAKiN,IAAI6F,gBACT9S,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,cAAe,CAC3BlG,MACAqR,IAAK7P,EAAMgR,WACXlB,IAAK9P,EAAMiR,YAEf,CAOAqN,cAAAA,CAAe9f,GACb,MAAMkT,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GACpC,OAAKkT,EAEE,CACL7B,IAAK6B,EAAM1R,MAAMgR,WACjBlB,IAAK4B,EAAM1R,MAAMiR,WACjBzT,KAAMkU,EAAM1R,MAAMxC,MALD,IAOrB,CAQA+gB,cAAAA,CAAe/f,EAAKqR,EAAKC,GACvB,MAAM4B,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GAC/BkT,IAELA,EAAM1R,MAAMgR,WAAanB,EACzB6B,EAAM1R,MAAMiR,WAAanB,EACzB/X,KAAK6jB,eAAepd,GACpBzG,KAAKsZ,YAAY7S,GACnB,CAMAggB,iBAAAA,CAAkBhgB,GAChB,MAAMkT,EAAQ3Z,KAAK4X,aAAa1Q,IAAIT,GAC/BkT,IAELA,EAAMxB,SAAS/U,OAAO0I,SACtB9L,KAAK4X,aAAalL,OAAOjG,GACzBzG,KAAKiN,IAAI8C,OAAOzP,KAAK,4BAA4BmG,GACnD,ECliBK,MAAMigB,EACX7mB,WAAAA,CAAYoN,GACVjN,KAAKiN,IAAMA,EACXjN,KAAK2mB,iBAAmB,IAAIre,IAC5BtI,KAAK4mB,cAAgB5mB,KAAKiN,IAAIlH,QAAQmB,IAAI,eAAiB,YAC7D,CAeA2f,YAAAA,EAAapgB,IAAEA,EAAGvB,UAAEA,EAAS4hB,QAAEA,EAAOC,QAAEA,EAAOC,OAAEA,EAAShnB,KAAK4mB,gBAG7D,GAFA5mB,KAAKiN,IAAI8C,OAAOjQ,MAAM,yBAAyB2G,IAE1CvB,EAEH,YADAlF,KAAKiN,IAAI8C,OAAO3P,MAAM,6CAKxB,MAAM6mB,EAAQjnB,KAAKknB,qBAAqBzgB,GACxCqgB,EAAUA,GAAWG,EAAMnP,IAC3BiP,EAAUA,GAAWE,EAAMlP,IAG3B,MAAMI,EAAWnY,KAAKmnB,qBAChBlf,EAAQjI,KAAKqY,gBAAgByO,EAASC,EAASC,GAGrDhnB,KAAKsY,eAAepT,EAAWiT,GAG/BnY,KAAKuY,mBAAmBJ,EAAUlQ,EAAOxB,GAGzCzG,KAAK2mB,iBAAiBpf,IAAId,EAAK,CAAEwB,QAAOkQ,aAGxCnY,KAAKonB,aAAa3gB,GAElBzG,KAAKiN,IAAI8C,OAAOzP,KAAK,wBAAwBmG,EAC/C,CAMAygB,oBAAAA,CAAqBzgB,GACnB,IACE,MAAM4gB,EAAa3gB,MAAM4C,KAAKtJ,KAAKiN,IAAIlE,OACpCgL,KAAIvF,IACH,IAAKA,IAASA,EAAK2B,UAAY3B,EAAK2B,QAAQ1J,GAC1C,OAAO,KAET,MAAMwW,EAAO,IAAIvc,KAAK8N,EAAK2B,QAAQ1J,IACnC,OAAO2P,MAAM6G,EAAK3G,WAAa,KAAO2G,CAAI,IAE3CjP,QAAOiP,GAAiB,OAATA,IAElB,GAA0B,IAAtBoK,EAAWpgB,OAAc,CAE3B,MAAMqgB,EAAQ,IAAI5mB,KAClB,MAAO,CACLoX,IAAK,IAAIpX,KAAK4mB,EAAMC,cAAe,EAAG,GACtCxP,IAAK,IAAIrX,KAAK4mB,EAAMC,cAAe,GAAI,IAE3C,CAEA,MAAO,CACLzP,IAAK,IAAIpX,KAAKsV,KAAK8B,OAAOuP,IAC1BtP,IAAK,IAAIrX,KAAKsV,KAAK+B,OAAOsP,IAE7B,CAAC,MAAOjnB,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,gCAAiCA,GAEvD,MAAMknB,EAAQ,IAAI5mB,KAClB,MAAO,CACLoX,IAAK,IAAIpX,KAAK4mB,EAAMC,cAAe,EAAG,GACtCxP,IAAK,IAAIrX,KAAK4mB,EAAMC,cAAe,GAAI,IAE3C,CACF,CAMAJ,kBAAAA,GACEnnB,KAAKiN,IAAI8C,OAAOjQ,MAAM,iCAEtB,MAAMoF,EAAYuF,SAASC,cAAc,OACzCxF,EAAUuT,UAAY,2BAEtB,MAAM+O,EAAiB/c,SAASC,cAAc,OAC9C8c,EAAe/O,UAAY,yBAE3B,MAAMgP,EAAahd,SAASC,cAAc,SAC1C+c,EAAW9c,YAAc,aAEzB,MAAM+c,EAAajd,SAASC,cAAc,SAC1Cgd,EAAWjiB,KAAO,OAClBiiB,EAAWjP,UAAY,4BAEvB,MAAMkP,EAAeld,SAASC,cAAc,OAC5Cid,EAAalP,UAAY,yBAEzB,MAAMmP,EAAWnd,SAASC,cAAc,SACxCkd,EAASjd,YAAc,WAEvB,MAAMkd,EAAWpd,SAASC,cAAc,SAYxC,OAXAmd,EAASpiB,KAAO,OAChBoiB,EAASpP,UAAY,0BAErB+O,EAAe3c,YAAY4c,GAC3BD,EAAe3c,YAAY6c,GAC3BC,EAAa9c,YAAY+c,GACzBD,EAAa9c,YAAYgd,GAEzB3iB,EAAU2F,YAAY2c,GACtBtiB,EAAU2F,YAAY8c,GAEf,CACLziB,YACAwiB,aACAG,WAEJ,CAMAxP,eAAAA,CAAgByO,EAASC,EAASC,GAChC,MAAO,CACLF,UACAC,UACAe,iBAAkBhB,EAClBiB,eAAgBhB,EAChBC,SAEJ,CAMA1O,cAAAA,CAAepT,EAAWiT,GACxBjT,EAAU2F,YAAYsN,EAASjT,UACjC,CAMAqT,kBAAAA,CAAmBJ,EAAUlQ,EAAOxB,GAClCzG,KAAKiN,IAAI8C,OAAOjQ,MAAM,4CAA4C2G,GAElE,MAAMihB,WAAEA,EAAUG,SAAEA,GAAa1P,EAE3B6P,EAAmB9Q,GAAS,KAChC,MAAM+Q,EAAY,IAAIvnB,KAAKgnB,EAAWlgB,OAChC0gB,EAAU,IAAIxnB,KAAKmnB,EAASrgB,OAE7B4O,MAAM6R,EAAU3R,YAAeF,MAAM8R,EAAQ5R,aAChDrO,EAAM6f,iBAAmBG,EACzBhgB,EAAM8f,eAAiBG,EACvBloB,KAAKmoB,gBAAgB1hB,GACvB,GACC,KAEHihB,EAAWvY,iBAAiB,SAAU6Y,GACtCH,EAAS1Y,iBAAiB,SAAU6Y,EACtC,CAMAZ,YAAAA,CAAa3gB,GACX,IACE,MAAMwB,MAAEA,EAAKkQ,SAAEA,GAAanY,KAAK2mB,iBAAiBzf,IAAIT,IAChDihB,WAAEA,EAAUG,SAAEA,GAAa1P,EAG3BiQ,EAAanL,IACjB,IACE,MAAMoL,EAAI,IAAI3nB,KAAKuc,GACnB,GAAI7G,MAAMiS,EAAE/R,WACV,MAAUvP,MAAM,gBAElB,OAAOshB,EAAE7G,cAAcpa,MAAM,KAAK,EACnC,CAAC,MAAOhH,GAEP,OADAJ,KAAKiN,IAAI8C,OAAO3P,MAAM,yBAA0BA,GACzC,EACT,GAIFsnB,EAAW5P,IAAMsQ,EAAWngB,EAAM6e,SAClCY,EAAW3P,IAAMqQ,EAAWngB,EAAM8e,SAClCc,EAAS/P,IAAMsQ,EAAWngB,EAAM6e,SAChCe,EAAS9P,IAAMqQ,EAAWngB,EAAM8e,SAGhCW,EAAWlgB,MAAQ4gB,EAAWngB,EAAM6f,kBACpCD,EAASrgB,MAAQ4gB,EAAWngB,EAAM8f,eACnC,CAAC,MAAO3nB,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,0BAA2BA,EACnD,CACF,CAMA+nB,eAAAA,CAAgB1hB,GACdzG,KAAKiN,IAAI8C,OAAOzP,KAAK,4BAA4BmG,GACjD,MAAMwB,MAAEA,GAAUjI,KAAK2mB,iBAAiBzf,IAAIT,GAE5CzG,KAAKiN,IAAIlE,MAAM6D,SAAQ4B,IACrB,IAEE,IAAKA,IAASA,EAAK2B,UAAY3B,EAAK2B,QAAQ1J,GAE1C,YADAzG,KAAKiN,IAAIsM,SAAS/K,GAIpB,MAAM8Z,EAAW,IAAI5nB,KAAK8N,EAAK2B,QAAQ1J,IAGvC,GAAI2P,MAAMkS,EAAShS,WAEjB,YADAtW,KAAKiN,IAAIsM,SAAS/K,GAKpB,MAAMyZ,EAAY,IAAIvnB,KAAKuH,EAAM6f,kBACjCG,EAAUM,SAAS,EAAG,EAAG,EAAG,GAE5B,MAAML,EAAU,IAAIxnB,KAAKuH,EAAM8f,gBAC/BG,EAAQK,SAAS,GAAI,GAAI,GAAI,KAE7B,MAAMC,EAAc,IAAI9nB,KAAK4nB,GAC7BE,EAAYD,SAAS,EAAG,EAAG,EAAG,GAE1BC,GAAeP,GAAaO,GAAeN,EAC7CloB,KAAKiN,IAAIwM,SAASjL,GAElBxO,KAAKiN,IAAIsM,SAAS/K,EAErB,CAAC,MAAOpO,GACPJ,KAAKiN,IAAI8C,OAAO3P,MAAM,gCAAiCA,GACvDJ,KAAKiN,IAAIsM,SAAS/K,EACpB,KAGFxO,KAAKiN,IAAI6F,gBACT9S,KAAKiN,IAAI6E,WAAWC,YACpB/R,KAAKiN,IAAIN,KAAK,aAAc,CAC1BlG,MACAwhB,UAAWhgB,EAAM6f,iBACjBI,QAASjgB,EAAM8f,gBAEnB,CAOAU,YAAAA,CAAahiB,GACX,MAAMkT,EAAQ3Z,KAAK2mB,iBAAiBzf,IAAIT,GACxC,OAAKkT,EAEE,CACLsO,UAAWtO,EAAM1R,MAAM6f,iBACvBI,QAASvO,EAAM1R,MAAM8f,gBAJJ,IAMrB,CAQAW,YAAAA,CAAajiB,EAAKwhB,EAAWC,GAC3B,MAAMvO,EAAQ3Z,KAAK2mB,iBAAiBzf,IAAIT,GACnCkT,IAELA,EAAM1R,MAAM6f,iBAAmBG,EAC/BtO,EAAM1R,MAAM8f,eAAiBG,EAC7BloB,KAAKonB,aAAa3gB,GAClBzG,KAAKmoB,gBAAgB1hB,GACvB,CAMAkiB,eAAAA,CAAgBliB,GACd,MAAMkT,EAAQ3Z,KAAK2mB,iBAAiBzf,IAAIT,GACnCkT,IAELA,EAAMxB,SAASjT,UAAU4G,SACzB9L,KAAK2mB,iBAAiBja,OAAOjG,GAC7BzG,KAAKiN,IAAI8C,OAAOzP,KAAK,0BAA0BmG,GACjD,EC7SK,MAAMmiB,EAAU,cAEhB,cAAkB7c,EAIvBlM,WAAAA,CAAYkG,EAAU,IACpB8iB,QACA7oB,KAAK8oB,eAAe/iB,EACtB,CAMA+iB,cAAAA,CAAe/iB,GACb,IACE/F,KAAK+F,QAAU,IAAI1E,EAAQ0E,GAG3B,MAAMjG,EAAQE,KAAK+F,QAAQmB,IAAI,SACzBnH,EAAWC,KAAK+F,QAAQmB,IAAI,YAClClH,KAAK+P,OAAS,IAAInQ,EAAOE,EAAOC,GAChCC,KAAK+P,OAAOjQ,MAAM,iCAAkCA,EAAO,SAAUC,GAErEC,KAAKiI,MAAQ,IAAID,EACjBhI,KAAKqjB,aAAe,IAAI3Z,EAAa1J,KAAK+F,SAE1C/F,KAAK+oB,gBACL/oB,KAAKgpB,qBACLhpB,KAAKipB,gBACN,CAAC,MAAO7oB,GAEP,MAAMA,CACR,CACF,CAMA2oB,aAAAA,GAME,GALA/oB,KAAK+P,OAAOjQ,MAAM,6BAElBE,KAAKkF,UAAYuF,SAAS6E,cACxBtP,KAAK+F,QAAQmB,IAAI,uBAEdlH,KAAKkF,UACR,MAAU6B,MACR,wBAAwB/G,KAAK+F,QAAQmB,IAAI,sBAI7ClH,KAAK+I,MAAQ/I,KAAKkF,UAAU+K,iBAC1BjQ,KAAK+F,QAAQmB,IAAI,iBAEO,IAAtBlH,KAAK+I,MAAM9B,QACbjH,KAAK+P,OAAO1P,KAAK,+BAGnBL,KAAKiI,MAAMmB,SAAS,cAAepJ,KAAK+I,MAAM9B,QAC9CjH,KAAKiI,MAAMmB,SAAS,gBAAiB,IAAIhB,IAAIpI,KAAK+I,OACpD,CAMAigB,kBAAAA,GACEhpB,KAAK+P,OAAOjQ,MAAM,yBAGlBE,KAAKgO,OAAS,IAAIwB,EAAOxP,MACzBA,KAAK0I,OAAS,IAAIoR,EAAO9Z,MACzBA,KAAK6I,KAAO,IAAIoT,EAAKjc,MACrBA,KAAKkpB,YAAc,IAAI9F,EAAYpjB,MACnCA,KAAK8R,WAAa,IAAI8O,EAAW5gB,MACjCA,KAAKmpB,WAAa,IAAIzC,EAAW1mB,MACjCA,KAAKgE,WAAa,IAAIsa,EAAWte,MACjCA,KAAKopB,iBAAmB,IAAIzR,EAAiB3X,MAG7CA,KAAKqjB,aAAalY,cAGlBnL,KAAK8R,WAAWkP,aAClB,CAMAiI,cAAAA,GACMjpB,KAAK+F,QAAQmB,IAAI,eACnBmZ,OAAOlR,iBAAiB,SAAUnP,KAAKqpB,aAAaC,KAAKtpB,OAGvDA,KAAK+F,QAAQmB,IAAI,kBACnBuD,SAAS0E,iBACP,mBACAnP,KAAKupB,uBAAuBD,KAAKtpB,OAIjCA,KAAK+F,QAAQmB,IAAI,eACnBlH,KAAKwpB,wBAGPxpB,KAAK2M,KAAK,cAAe,CACvBwJ,UAAWnW,KAAK+I,MAAM9B,OACtBlB,QAAS/F,KAAK+F,QAAQgC,UAE1B,CAQA0R,QAAAA,CAASjL,GAEP,MAAMmE,EAAe3S,KAAKiI,MAAM7G,WAAW2H,MAAMC,QACjD2J,EAAarG,IAAIkC,GACjBxO,KAAKiI,MAAMmB,SAAS,gBAAiBuJ,GAGrCnE,EAAKE,UAAU5C,OAAO9L,KAAK+F,QAAQmB,IAAI,gBAGvCsH,EAAKhE,MAAM6C,QAAU,IACrBmB,EAAKhE,MAAM8C,UAAY,cACvBkB,EAAKhE,MAAMmE,QAAU,GAMrB,MAAM1M,EAAkBjC,KAAK+F,QAAQmB,IAAI,mBACpCsH,EAAKE,UAAUsE,SAAS/Q,IAC3BuM,EAAKE,UAAUpC,IAAIrK,GAIrB4M,uBAAsB,KACpBA,uBAAsB,KAEpBL,EAAKhE,MAAM6C,QAAU,IACrBmB,EAAKhE,MAAM8C,UAAY,UAAU,GACjC,IAIJ,MAAM5H,EAAW1F,KAAK+F,QAAQmB,IAAI,uBAAyB,IAC3DuL,YAAW,KAELE,EAAatG,IAAImC,KACnBA,EAAKhE,MAAM8C,UAAY,GACvBkB,EAAKhE,MAAM6C,QAAU,GACvB,GACC3H,EACL,CAOA6T,QAAAA,CAAS/K,GAEP,MAAMmE,EAAe3S,KAAKiI,MAAM7G,WAAW2H,MAAMC,QACjD2J,EAAajG,OAAO8B,GACpBxO,KAAKiI,MAAMmB,SAAS,gBAAiBuJ,GAGrC,MAAM1Q,EAAkBjC,KAAK+F,QAAQmB,IAAI,mBACpCsH,EAAKE,UAAUsE,SAAS/Q,IAC3BuM,EAAKE,UAAUpC,IAAIrK,GAIrB4M,uBAAsB,KACpBL,EAAKhE,MAAM6C,QAAU,IACrBmB,EAAKhE,MAAM8C,UAAY,aAAa,IAItC,MAAM5H,EAAW1F,KAAK+F,QAAQmB,IAAI,uBAAyB,IAC3DuL,YAAW,KAEJE,EAAatG,IAAImC,KACpBA,EAAKE,UAAUpC,IAAItM,KAAK+F,QAAQmB,IAAI,gBAEpCsH,EAAKhE,MAAM8C,UAAY,GACvBkB,EAAKhE,MAAM6C,QAAU,GACvB,GACC3H,EACL,CAMA+jB,QAAAA,CAASC,GACP,MAAM3gB,EAAQrC,MAAMC,QAAQ+iB,GAAYA,EAAW,CAACA,GAC9ClT,EAAW/L,SAASgM,yBAE1B1N,EAAM6D,SAAS4B,IACbgI,EAAS3L,YAAY2D,GACrBxO,KAAKiI,MAAM7G,WAAW2H,MAAMC,QAAQsD,IAAIkC,EAAK,IAG/CxO,KAAKkF,UAAU2F,YAAY2L,GAC3BxW,KAAK+I,MAAQ/I,KAAKkF,UAAU+K,iBAC1BjQ,KAAK+F,QAAQmB,IAAI,iBAEnBlH,KAAKgO,OAAOyC,cACd,CAMAkZ,WAAAA,CAAYC,GACV,MAAM7gB,EAAQrC,MAAMC,QAAQijB,GACxBA,EACA,CAACA,GACCjX,EAAe3S,KAAKiI,MAAM7G,WAAW2H,MAAMC,QAEjDD,EAAM6D,SAAS4B,IACbmE,EAAajG,OAAO8B,GACpBA,EAAK1C,QAAQ,IAGf9L,KAAK+I,MAAQ/I,KAAKkF,UAAU+K,iBAC1BjQ,KAAK+F,QAAQmB,IAAI,iBAEnBlH,KAAK8S,eACP,CAOA+W,SAAAA,GACE,IAAK7pB,KAAK+F,QAAQmB,IAAI,iBAAkB,OAExC,MAAMe,EAAQ,CACZC,QAASxB,MAAM4C,KAAKtJ,KAAKgO,OAAO+G,oBAChCrM,OAAQ1I,KAAK0I,OAAOmT,WACpBhT,KAAM7I,KAAK6I,KAAKsV,iBAChBna,WAAYhE,KAAKgE,WAAW8lB,cAC5BrpB,UAAWC,KAAKqpB,OAGlBC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUliB,IACjDjI,KAAK+P,OAAOjQ,MAAM,cACpB,CAMAsqB,YAAAA,GACE,GAAKpqB,KAAK+F,QAAQmB,IAAI,iBAEtB,IACE,MAAMmjB,EAAQL,aAAaM,QAAQ,aACnC,IAAKD,EAAO,OAEZ,MAAMpiB,EAAQiiB,KAAKK,MAAMF,GACzB,GAAI3pB,KAAKqpB,MAAQ9hB,EAAMxH,UAAYT,KAAK+F,QAAQmB,IAAI,eAElD,YADA8iB,aAAaQ,WAAW,aAI1BxqB,KAAKoJ,SAASnB,GACdjI,KAAK+P,OAAOjQ,MAAM,iBACnB,CAAC,MAAOM,GACPJ,KAAK+P,OAAO3P,MAAM,yBAA0BA,EAC9C,CACF,CAMAgB,QAAAA,GACE,OAAOpB,KAAKiI,MAAMF,QACpB,CAMAqB,QAAAA,CAASqhB,GACPzqB,KAAKiI,MAAMuB,OAAOihB,GAClBzqB,KAAK+W,SACP,CAOAjE,aAAAA,GAEE,MAAM4X,EAAiBjgB,SAAS6E,cAC9BtP,KAAK+F,QAAQmB,IAAI,oBAEnB,GAAKwjB,EAEL,IAEE,MAAMzhB,EAAQjJ,KAAK+I,MAAM9B,OACnB+B,EAAUhJ,KAAKiI,MAAM7G,WAAW2H,MAAMC,QAAQnF,KAC9C8mB,EAAW1hB,EAAQD,EAGnB4hB,EACJ5qB,KAAK+F,QAAQmB,IAAI,YAAc7F,EAAQ4E,SAAStD,QAC5CC,EAAWgoB,EAAYhoB,UAAY,+BACnCI,EACJ4nB,EAAY5nB,WAAeC,CAAAA,GAAQA,EAAIC,kBAGnC2nB,EAAmB7nB,EAAUgG,GAC7B8hB,EAAiB9nB,EAAUiG,GAC3B8hB,EAAoB/nB,EAAU2nB,GAGpC,IAAIK,EAAcpoB,EACfsO,QAAQ,YAAa2Z,GACrB3Z,QAAQ,UAAW4Z,GACnB5Z,QAAQ,aAAc6Z,GAGrBJ,EAAW,GAAKC,EAAY/nB,eAG9BmoB,GACE,KAFAJ,EAAY9nB,kBAAoB,yBAEToO,QAAQ,aAAc6Z,IAIjC,IAAZ/hB,GAAiB4hB,EAAY7nB,oBAC/BioB,EAAcJ,EAAY7nB,mBAI5B2nB,EAAe/f,YAAcqgB,EAG7BhrB,KAAK2M,KAAK,iBAAkB,CAC1B1D,QACAD,UACA2hB,WACAG,iBACAD,mBACAE,qBAEH,CAAC,MAAO3qB,GAEPJ,KAAK+P,OAAO3P,MAAM,0BAA2BA,GAC7CsqB,EAAe/f,YAAc,GAC3B3K,KAAKiI,MAAM7G,WAAW2H,MAAMC,QAAQnF,QAClC7D,KAAK+I,MAAM9B,QACjB,CACF,CAMAmI,aAAAA,CAAcxD,GACZ5L,KAAK+F,QAAQ6B,OAAOgE,GACpB5L,KAAKqjB,aAAa1X,aAAaC,GAC/B5L,KAAK+W,SACP,CAMAA,OAAAA,GACE/W,KAAK+P,OAAOjQ,MAAM,kBAElBE,KAAK+I,MAAQ/I,KAAKkF,UAAU+K,iBAC1BjQ,KAAK+F,QAAQmB,IAAI,iBAEnBlH,KAAKiI,MAAMmB,SAAS,cAAepJ,KAAK+I,MAAM9B,QAE9CjH,KAAKgO,OAAOyC,eACZzQ,KAAK0I,OAAOA,OAAO1I,KAAK0I,OAAOmT,YAC/B7b,KAAKgE,WAAW4D,SAEhB5H,KAAK2M,KAAK,YAAa,CAAEwJ,UAAWnW,KAAK+I,MAAM9B,QACjD,CAOAoiB,aAAY,KAAGnS,GAAS,KACtBlX,KAAK2M,KAAK,UACV3M,KAAK+W,SAAS,GACb,KAHS,GASZwS,sBAAAA,GACM9e,SAASwgB,QACXjrB,KAAK2M,KAAK,UACV3M,KAAK6pB,cAEL7pB,KAAK2M,KAAK,WACV3M,KAAKoqB,eAET,CAMAZ,qBAAAA,GACmB,IAAI0B,kBAAkBC,IACjCA,EAAUzX,MAAM0X,GAA+B,cAAlBA,EAAS3lB,QACxCzF,KAAK+W,SACP,IAGOsU,QAAQrrB,KAAKkF,UAAW,CAC/BomB,WAAW,EACXC,SAAS,GAEb,CAOAC,UAAAA,GACE,OAAO5C,CACT,CAMA6C,kBAAAA,CAAmBC,GAkBjB,QAjB0B,CACxBhjB,SAAU1I,KAAK0I,OACf1E,YAAY,EACZwB,eAC4D,IAAnDiF,SAASC,cAAc,OAAOF,MAAMmhB,WAC7CC,SAA8C,mBAA7BvL,OAAOyB,QAAQP,UAChCyI,aAAc,MACZ,IAGE,OAFAA,aAAaC,QAAQ,OAAQ,QAC7BD,aAAaQ,WAAW,SACjB,CACR,CAAC,MAAOlQ,GACP,OAAO,CACT,CACD,EARa,IAWWoR,EAC7B,CAMAzU,OAAAA,GACEjX,KAAK+P,OAAOjQ,MAAM,2BAGlBugB,OAAOnR,oBAAoB,SAAUlP,KAAKqpB,cAC1C5e,SAASyE,oBACP,mBACAlP,KAAKupB,wBAIPvpB,KAAKgO,OAAOiJ,UACZjX,KAAK0I,OAAOuO,UACZjX,KAAK6I,KAAKoO,UACVjX,KAAKgE,WAAWiT,UAChBjX,KAAKkpB,YAAYjS,UAGjBjX,KAAKqjB,aAAaxX,eAClB7L,KAAKiI,MAAMH,QACXkiB,aAAaQ,WAAW,aAGxBxqB,KAAK+I,MAAM6D,SAAS4B,IAClBA,EAAKhE,MAAQ,GACbgE,EAAKE,UAAU5C,OACb9L,KAAK+F,QAAQmB,IAAI,eACjBlH,KAAK+F,QAAQmB,IAAI,eAClB,IAGHlH,KAAK2M,KAAK,YACZ"}